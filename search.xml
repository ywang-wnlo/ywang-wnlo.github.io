<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 插件推荐以及使用小技巧</title>
    <url>/posts/4143201a.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==">Hexo<i class="fa fa-external-link-alt"></i></span>
是一个快速、简洁且高效的博客框架，个人只需用 Markdown
来写文档，并且拥有丰富的插件和主题。当前博客就是使用 Hexo 配合 NexT
主题搭建的 <span id="more"></span></p>
<p>因为笔者个人在 Windows 环境下写博客，后续命令均以 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vcG93ZXJzaGVsbC9zY3JpcHRpbmcvaW5zdGFsbC9pbnN0YWxsaW5nLXBvd2Vyc2hlbGw/dmlldz1wb3dlcnNoZWxsLTcuMg==">PowerShell<i class="fa fa-external-link-alt"></i></span>
为例</p>
<h2 id="插件推荐">插件推荐</h2>
<h3 id="hexo-deployer-git"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWRlcGxveWVyLWdpdA==">hexo-deployer-git<i class="fa fa-external-link-alt"></i></span></h3>
<p>Hexo 支持一键部署网站到 git 仓库上，其他的一键部署方式参考 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudA==">官网介绍<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>安装 </li>
</ul>
<figure class="highlight ps"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>配置 </li>
</ul>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;仓库链接&gt;</span> <span class="comment"># 可以是 https 链接也可以是 git 链接</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">分支</span>] <span class="comment"># GitHub 的网站分支为 gh-pages，其他网站可能有所不同</span></span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>] <span class="comment"># 默认是 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}</span></span><br></pre></td></tr></tbody></table></figure>
<p>默认的提交信息只有时间信息，没有过多的参考价值推荐使用自定义提交信息，具体参考
<a href="#自定义提交信息">后续小节</a></p>
<h3 id="hexo-word-counter"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by13b3JkLWNvdW50ZXI=">hexo-word-counter<i class="fa fa-external-link-alt"></i></span></h3>
<p>显示每篇文章的字数统计以及大致阅读时长，需要主题支持</p>
<ul>
<li>安装 </li>
</ul>
<figure class="highlight ps"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-word-counter</span> <span class="literal">--save</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>配置 </li>
</ul>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-word-counter</span></span><br><span class="line"><span class="comment">## https://github.com/next-theme/hexo-word-counter</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">"mins."</span></span><br></pre></td></tr></tbody></table></figure>
<p>具体配置可以参考官方给出的说明：</p>
<blockquote>
<p>Note for Chinese users: because in Chinese language average word
length about ~1.5 and if you at most cases write posts in Chinese
(without mixed English), recommended to set awl to 2 and wpm to 300. But
if you usualy mix your posts with English, awl to 4 and wpm to 275 will
be nice.</p>
</blockquote>
<p>也就是说纯中文时推荐 <code>awl</code> 设为 2，<code>wpm</code> 设为
300；而中英文混合时推荐 <code>awl</code> 设为 4，<code>wpm</code> 设为
275</p>
<h3 id="hexo-abbrlink"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvemJvL2hleG8tYWJicmxpbms=">hexo-abbrlink<i class="fa fa-external-link-alt"></i></span></h3>
<p>Hexo
默认的文章链接是以时间以及文件名命名的，如果文件名为中文时转译之后会很长，并且不美观。而该插件可以利用
hash 值替换原有的文章链接</p>
<ul>
<li>安装 </li>
</ul>
<figure class="highlight ps"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-abbrlink</span> <span class="literal">--save</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>配置</li>
</ul>
<p>首先修改 <code>_config.yml</code> 文件中的 <code>permalink</code>
的配置</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br></pre></td></tr></tbody></table></figure>
<p>再增加以下配置</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="comment">## https://github.com/rozbo/hexo-abbrlink</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment"># support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span> <span class="comment"># support dec(default) and hex</span></span><br><span class="line">  <span class="attr">drafts:</span> <span class="literal">true</span> <span class="comment"># (true)Process draft,(false)Do not process draft. false(default)</span></span><br><span class="line">  <span class="comment"># Generate categories from directory-tree</span></span><br><span class="line">  <span class="comment"># depth: the max_depth of directory-tree you want to generate, should &gt; 0</span></span><br><span class="line">  <span class="attr">auto_category:</span></span><br><span class="line">     <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># true(default)</span></span><br><span class="line">     <span class="attr">depth:</span> <span class="number">3</span> <span class="comment"># 3(default)</span></span><br><span class="line">     <span class="attr">over_write:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">auto_title:</span> <span class="literal">false</span> <span class="comment"># enable auto title, it can auto fill the title by path</span></span><br><span class="line">  <span class="attr">auto_date:</span> <span class="literal">false</span> <span class="comment"># enable auto date, it can auto fill the date by time today</span></span><br><span class="line">  <span class="attr">force:</span> <span class="literal">false</span> <span class="comment"># enable force mode, in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="hexo-generator-sitemap"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWdlbmVyYXRvci1zaXRlbWFw">hexo-generator-sitemap<i class="fa fa-external-link-alt"></i></span></h3>
<p>为了使博客能被谷歌、bing、百度收录，最好生成 <code>sitemap</code>
方便爬取，整体流程可以参考 <a href="/posts/abac0c46">这篇博文</a></p>
<ul>
<li>安装 </li>
</ul>
<figure class="highlight ps"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator-sitemap</span> <span class="literal">--save</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>配置 </li>
</ul>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-generator-sitemap</span></span><br><span class="line"><span class="comment">## https://github.com/hexojs/hexo-generator-sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">  <span class="comment"># template: ./sitemap_template.xml</span></span><br><span class="line">  <span class="attr">rel:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="小技巧">小技巧</h2>
<h3 id="自定义提交信息">自定义提交信息</h3>
<figure class="highlight ps"><table><tbody><tr><td class="code"><pre><span class="line">hexo deploy <span class="literal">-m</span> <span class="string">"自定义提交信息"</span></span><br></pre></td></tr></tbody></table></figure>
<p>例如使用 <code>hexo</code> 仓库的提交信息来提交到 <code>deploy</code>
仓库</p>
<figure class="highlight ps"><table><tbody><tr><td class="code"><pre><span class="line">hexo deploy <span class="literal">-m</span> (git log <span class="literal">-1</span> <span class="literal">--pretty</span>=format:%s)</span><br></pre></td></tr></tbody></table></figure>
<p>如果中文乱码，可以参考 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQyNjg2MC9hcnRpY2xlL2RldGFpbHMvODMzNDgyODQ=">这篇博客<i class="fa fa-external-link-alt"></i></span>
修改 UTF-8 编码</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudA==">【Hexo】一键部署<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWRlcGxveWVyLWdpdA==">【GitHub】hexo-deployer-git<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by13b3JkLWNvdW50ZXI=">【GitHub】hexo-word-counter<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvemJvL2hleG8tYWJicmxpbms=">【GitHub】hexo-abbrlink<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWdlbmVyYXRvci1zaXRlbWFw">【GitHub】hexo-generator-sitemap<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1sb2cjX3ByZXR0eV9mb3JtYXRz">【Git】git log
自定义输出格式<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQyNjg2MC9hcnRpY2xlL2RldGFpbHMvODMzNDgyODQ=">【CSDN】解决
Windows PowerShell 乱码<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT 主题的配置使用记录</title>
    <url>/posts/9a0b7c3b.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>NexT 主题是 Hexo 上使用最广，同时在 GitHub 上也是 Star
最多的主题，bug 修复和功能更新也比较快。当前博客就是使用 Hexo 配合 NexT
主题搭建的 <span id="more"></span></p>
<h3 id="版本">版本</h3>
<p>在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy80">【必读】更新说明及常见问题<i class="fa fa-external-link-alt"></i></span>
中有相关说明，NexT 一共有三个不同的仓库：</p>
<table>
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>版本</th>
<th>年份</th>
<th>仓库</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> v5.1.4 或更低</td>
<td> 2014 ~ 2017</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0">iissnan/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr class="even">
<td>v6.0.0 ~ v7.8.0</td>
<td>2018 ~ 2019</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">theme-next/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr class="odd">
<td>v8.0.0 或更高</td>
<td> 2020</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0">next-theme/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></td>
</tr>
</tbody>
</table>
<p>旧的仓库基本上已经不再更新，因此推荐选择最新的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0">next-theme/hexo-theme-next<i class="fa fa-external-link-alt"></i></span>
仓库的 NexT 主题</p>
<h2 id="安装">安装</h2>
<p>推荐使用 GitHub 进行安装，可以随时更新</p>
<p>因为笔者个人在 Windows 环境下写博客，后续命令均以 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vcG93ZXJzaGVsbC9zY3JpcHRpbmcvaW5zdGFsbC9pbnN0YWxsaW5nLXBvd2Vyc2hlbGw/dmlldz1wb3dlcnNoZWxsLTcuMg==">PowerShell<i class="fa fa-external-link-alt"></i></span>
为例</p>
<figure class="highlight ps"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;hexo<span class="literal">-dir</span>&gt;</span><br><span class="line"><span class="comment"># git clone https://github.com/next-theme/hexo-theme-next.git .\themes\next\</span></span><br><span class="line">git clone git@github.com:next<span class="literal">-theme</span>/hexo<span class="literal">-theme-next</span>.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> .\themes\next\_config.yml .\_config.next.yml</span><br></pre></td></tr></tbody></table></figure>
<h2 id="配置记录">配置记录</h2>
<p>对 NexT 主题的配置可以直接在 <code>hexo</code> 仓库下的配置文件
<code>_config.next.yml</code>
中进行修改即可，该文件的修改会在生成页面时覆盖主题目录下的配置文件
<code>.\themes\next\_config.yml</code></p>
<p>衍生拓展：<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbiMlRTQlQkQlQkYlRTclOTQlQTglRTQlQkIlQTMlRTYlOUIlQkYlRTQlQjglQkIlRTklQTIlOTglRTklODUlOEQlRTclQkQlQUUlRTYlOTYlODclRTQlQkIlQjY=">【Hexo】配置文件优先级<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="风格主题">风格 / 主题</h3>
<p>NexT 主题包含了 4 个风格，个人喜欢
Gemini，类似卡片的风格，边界比较明显</p>
<figure>
<img data-src="/posts/9a0b7c3b/NexT_Schemes.png" alt="NexT_Schemes">
<figcaption aria-hidden="true">NexT_Schemes</figcaption>
</figure>
<p>修改 <code>_config.next.yml</code> 之后，用
<code>hexo clean; hexo g; hexo s</code> 重新生成一下，就可以在 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAw">本地<i class="fa fa-external-link-alt"></i></span>
预览了（后续流程如果没有特殊说明则基本一致）</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="网页图标">网页图标</h3>
<p>在各类网站上下载合适图标，按照配置文件中的文件名命名，并放在
<code>images</code> 下即可</p>
<p>衍生阅读：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL0FwcGxlQXBwbGljYXRpb25zL1JlZmVyZW5jZS9TYWZhcmlXZWJDb250ZW50L0NvbmZpZ3VyaW5nV2ViQXBwbGljYXRpb25zL0NvbmZpZ3VyaW5nV2ViQXBwbGljYXRpb25zLmh0bWw=">【Apple】Configuring
Web Applications<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="菜单栏">菜单栏</h3>
<p>菜单栏配置默认没有开启，个人开启了
<code>首页</code>、<code>标签</code>、<code>分类</code>、<code>归档</code>
四个子项目，并开启了图标和数量的气泡显示</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="侧边栏">侧边栏</h3>
<p>默认头像会开启旋转功能，花里胡哨的而且旋转有点快，个人选择了关闭</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be displayed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>
<p>在单独的文章页面时侧边栏会默认显示为目录，并且
<code>标签</code>、<code>分类</code>、<code>归档</code>
已经在菜单栏开启了，所以个人选择了关闭</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Posts / Categories / Tags in sidebar.</span></span><br><span class="line"><span class="attr">site_state:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>
<p>其他社交网站的主页的配置起来也很简单，简单替换一下链接，并且取消注释即可</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/ywang-wnlo</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:ywang_wnlo@qq.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="本地搜索">本地搜索</h3>
<p>本地搜索可以快速的检索所有的文章，有时候还是很有用的</p>
<p>配置本地搜索之前，首先要在 <code>hexo</code> 下安装插件</p>
<figure class="highlight ps"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator-searchdb</span> <span class="literal">--save</span></span><br></pre></td></tr></tbody></table></figure>
<p>然后在配置中开启即可</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="代码块">代码块</h3>
<p>代码块的高亮有很多种配色可以选，并且可以开启一键复制功能</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">vs</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">vs2015</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">prism</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">default</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="动画效果">动画效果</h3>
<p>NexT 默认开启了动画效果，但是感觉比较慢，感觉有些影响阅读，推荐开启
<code>async</code>，并且适当的修改动画效果</p>
<p>P.S. 菜单栏的动画不可以关闭和调整，应该是个 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy80MTI=">bug<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Use Animate.css to animate everything.</span></span><br><span class="line"><span class="comment"># For more information: https://animate.style</span></span><br><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="comment"># All available transition variants: https://theme-next.js.org/animate/</span></span><br><span class="line">    <span class="attr">post_block:</span> <span class="string">fadeIn</span></span><br><span class="line">    <span class="attr">post_header:</span></span><br><span class="line">    <span class="attr">post_body:</span></span><br><span class="line">    <span class="attr">coll_header:</span></span><br><span class="line">    <span class="comment"># Only for Pisces | Gemini.</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="string">fadeInDown</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="阅读进度">阅读进度</h3>
<p>阅读进度有两种展示方式，一个在回到首页的按钮上直接显示百分比，另一个可以配置在首位部增加进度条，个人两个都开启了</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: left | right</span></span><br><span class="line">  <span class="attr">start_at:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">bottom</span></span><br><span class="line">  <span class="attr">reversed:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#37c6c0"</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">5px</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="书签">书签</h3>
<p>NexT 的书签功能可以保存当前的阅读进度，下次打开是会在续接该进度</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Bookmark Support</span></span><br><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#222"</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="mermaid">Mermaid</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9tZXJtYWlkLWpzLmdpdGh1Yi5pby9tZXJtYWlkLyMv">Mermaid<i class="fa fa-external-link-alt"></i></span>
可以快速的用代码生成简单的流程图、时序图、甘特图等</p>
<p>NexT 中开启 Mermaid 支持很方便，同时还有不同的风格可以选</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Mermaid tag</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">neutral</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="lazyload">lazyload</h3>
<p>lazyload
是网站常用的技术，通过按需加载，避免一次性加载过多内容导致的打开缓慢</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Vanilla JavaScript plugin for lazyloading images.</span></span><br><span class="line"><span class="comment"># For more information: https://apoorv.pro/lozad.js/demo/</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="fancybox">fancybox</h3>
<p>fancybox
可以在点击图片时放大该图片，并且可以快速浏览当前文章的所有图片</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class="line"><span class="comment"># For more information: https://fancyapps.com/fancybox/</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="pangu">pangu</h3>
<p>对于强迫症来说，中英文混排时加上空格能很大程度改善阅读体验，但是有时候会不小心打漏部分空格，而
<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZpbnRhL3Bhbmd1Lmpz">pangu<i class="fa fa-external-link-alt"></i></span>
这个项目就可以帮你在展示时自动加上空格</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Pangu Support</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/vinta/pangu.js</span></span><br><span class="line"><span class="comment"># Server-side plugin: https://github.com/next-theme/hexo-pangu</span></span><br><span class="line"><span class="attr">pangu:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="捐赠">捐赠</h3>
<p>文章末尾还可以求打赏，需要配置好相应的二维码图片，并且可以修改提示语句</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Donate (Sponsor) settings</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, a donate button will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">赏个鸡腿🍗</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="版权声明">版权声明</h3>
<p>NexT 内置了文章末尾增加版权声明，只需手动开启即可</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/about/cclicenses/</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="comment"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="comment"># Available values: big | small</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">small</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line">  <span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="不蒜子">不蒜子</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9idXN1YW56aS5pYnJ1Y2UuaW5mby8=">不蒜子<i class="fa fa-external-link-alt"></i></span>
是一个极简的网页计数器，NexT 已经内置，只需打开即可</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># For more information: http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">far</span> <span class="string">fa-eye</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="gitalk">gitalk</h3>
<p>评论系统也是一个博客必不可少的，由于本博客搭在 GitHub Pages
上，所以评论系统就采用利用 GitHub Issues 实现的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGFsay9naXRhbGs=">gitalk<i class="fa fa-external-link-alt"></i></span></p>
<p>NexT 已经内置的 gitalk 的 <code>js</code> 和
<code>css</code>，在配置文件中开启并进行配置即可</p>
<p>在修改配置文件之前需要先在 GitHub 上申请一个 OAuth
Application，入口在 <code>【Settings】</code> -&gt;
<code>【Developer settings】</code> -&gt; <code>【OAuth Apps】</code>
-&gt; <code>【New OAuth App】</code>，或者直接使用这个 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2FwcGxpY2F0aW9ucy9uZXc=">链接<i class="fa fa-external-link-alt"></i></span></p>
<figure>
<img data-src="/posts/9a0b7c3b/OAuth_APP_Register.png" alt="OAuth_APP_Register">
<figcaption aria-hidden="true">OAuth_APP_Register</figcaption>
</figure>
<p>填写好之后，记录下应用 id
以及密钥，如果没有显示密钥需要手动生成一下</p>
<figure>
<img data-src="/posts/9a0b7c3b/OAuth_APP_ID_Secrets.png" alt="OAuth_APP_ID_Secrets">
<figcaption aria-hidden="true">OAuth_APP_ID_Secrets</figcaption>
</figure>
<p>然后首先选用 gitalk 作为评论系统</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">gitalk</span></span><br><span class="line">  <span class="comment"># Setting `true` means remembering the comment system selected by the visitor.</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Lazyload all comment systems.</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Modify texts or order for any naves, here are some examples.</span></span><br><span class="line">  <span class="attr">nav:</span></span><br><span class="line">    <span class="comment">#disqus:</span></span><br><span class="line">    <span class="comment">#  text: Load Disqus</span></span><br><span class="line">    <span class="comment">#  order: -1</span></span><br><span class="line">    <span class="comment">#gitalk:</span></span><br><span class="line">    <span class="comment">#  order: -2</span></span><br></pre></td></tr></tbody></table></figure>
<p>在 gitalk 配置中填上相应的内容</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">&lt;GitHub</span> <span class="string">id&gt;</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;GitHub</span> <span class="string">id&gt;.github.io</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">&lt;应用</span> <span class="string">id&gt;</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">&lt;应用密钥&gt;</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">&lt;GitHub</span> <span class="string">id&gt;</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># When the official proxy is not available, you can change it to your own proxy address</span></span><br><span class="line">  <span class="attr">proxy:</span> <span class="string">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span> <span class="comment"># This is official proxy address</span></span><br><span class="line">  <span class="comment"># Gitalk's display language depends on user's browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZw==">【NexT】v8.0.0+ 官网<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy80">【必读】更新说明及常见问题<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbiMlRTQlQkQlQkYlRTclOTQlQTglRTQlQkIlQTMlRTYlOUIlQkYlRTQlQjglQkIlRTklQTIlOTglRTklODUlOEQlRTclQkQlQUUlRTYlOTYlODclRTQlQkIlQjY=">【Hexo】配置文件优先级<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL0FwcGxlQXBwbGljYXRpb25zL1JlZmVyZW5jZS9TYWZhcmlXZWJDb250ZW50L0NvbmZpZ3VyaW5nV2ViQXBwbGljYXRpb25zL0NvbmZpZ3VyaW5nV2ViQXBwbGljYXRpb25zLmh0bWw=">【Apple】Configuring
Web Applications<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZXJtYWlkLWpzLmdpdGh1Yi5pby9tZXJtYWlkLyMv">【Mermaid】官网<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZpbnRhL3Bhbmd1Lmpz">【GitHub】pangu<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9idXN1YW56aS5pYnJ1Y2UuaW5mbw==">【不蒜子】官网<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGFsay9naXRhbGs=">【GitHub】Gitalk<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 配置主流搜索引擎收录流程记录</title>
    <url>/posts/abac0c46.html</url>
    <content><![CDATA[<p>想让网站能够被更多的人阅读，搜索引擎带来的流量必不可少。本文主要介绍如何配置
Hexo 并被主流的搜索引擎（Google、Bing）收录 <span id="more"></span></p>
<p>搜索引擎能搜索到网站的前提是它抓取了网站的内容，并对其建立了索引，其实也就是爬虫爬取
+
插入数据库。虽然大部分搜索引擎都是自动抓取网络上的所有链接，并尝试爬取以及入库，但通常会比较缓慢（毕竟它并不一定知道我们网站的地址 hhh）。所以更加推荐由我们站长主动出击，直接告诉它我们的网站地址</p>
<p>延伸阅读：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc2VhcmNoL2RvY3MvYmFzaWNzL2hvdy1zZWFyY2gtd29ya3M/aGw9emgtQ04=">Google
搜索运作方式的基础知识<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="是否已经被收录">是否已经被收录</h2>
<p>为了查看网站是否已经被收录，可以在 Google 或者 Bing
以下查询格式搜索，根据自己网站的地址对后面的 <code>http(s)</code>
链接进行替换即可</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">site:https://ywang-wnlo.github.io/</span><br></pre></td></tr></tbody></table></figure>
<figure>
<img data-src="/posts/abac0c46/google_site.png" alt="google_site">
<figcaption aria-hidden="true">google_site</figcaption>
</figure>
<p>如果能搜索到内容，那么恭喜网站已经被搜索引擎收录。不过为了更好的被收录网站中的内容，还是推荐生成站点地图并提交，来告诉搜索引擎网站中有哪些链接需要被爬取</p>
<h2 id="生成站点地图">生成站点地图</h2>
<p>站点地图是一种文件，您以在其中提供与网站中的网页、视频或其他文件有关的信息，还可以说明这些内容之间的关系。搜索引擎会读取此文件，以便更高效地抓取您的网站。站点地图会告诉搜索引擎您认为网站中的哪些网页和文件比较重要，还会提供与这些文件有关的重要信息。例如，网页上次更新的时间和网页是否有任何备用的语言版本</p>
<p>Hexo 配置站点地图 <code>sitemap</code> 可以利用
<code>hexo-generator-sitemap</code> 插件，具体的配置过程参见 <a href="/posts/4143201a.html#hexo-generator-sitemap">这里</a></p>
<p>仅仅生成站点地图还不够，为了更早被收录站点地图中的链接，还需要主动将站点地图提交给搜索引擎</p>
<h2 id="提交站点地图">提交站点地图</h2>
<p>下面手把手教你如何给 Google 和 Bing 提交站点地图</p>
<p>（由于 GitHub
屏蔽了百度的爬虫，所以在这里不做百度搜索引擎的流程介绍，不过以下内容可以参考）</p>
<h3 id="google">Google</h3>
<p>Google 官网给了详细的文档，可以看这篇 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc2VhcmNoL2RvY3MvYmVnaW5uZXIvZ2V0LXN0YXJ0ZWQ/aGw9emgtQ04=">新手入门指南<i class="fa fa-external-link-alt"></i></span></p>
<p>而对我们来说，主要分三个步骤：注册 Search
Console，验证网站所有权，提交站点地图</p>
<h4 id="注册-search-console">注册 Search Console</h4>
<p>注册的过程非常简单，进入 <span class="exturl" data-url="aHR0cHM6Ly9zZWFyY2guZ29vZ2xlLmNvbS9zZWFyY2gtY29uc29sZQ==">GSC
官网<i class="fa fa-external-link-alt"></i></span>，用谷歌账号登录即可</p>
<h4 id="验证网站所有权">验证网站所有权</h4>
<p>登录之后，就需要添加我们的网站了</p>
<figure>
<img data-src="/posts/abac0c46/google_add_website.png" alt="google_add_website">
<figcaption aria-hidden="true">google_add_website</figcaption>
</figure>
<p>由于该博客是利用 GitHub Pages 搭建，并没有 DNS
配置的相关权限，因此我们使用第二种方式进行配置，点击 <code>继续</code>
后会有五种方式供我们选择</p>
<figure>
<img data-src="/posts/abac0c46/google_verify_ownership_1.png" alt="google_verify_ownership">
<figcaption aria-hidden="true">google_verify_ownership</figcaption>
</figure>
<p>个人推荐使用第二种，也就是 HTML 标记的方式，因为 NexT
主题的配置中对其进行支持，配置起来比较简单</p>
<figure>
<img data-src="/posts/abac0c46/google_verify_ownership_2.png" alt="google_verify_ownership">
<figcaption aria-hidden="true">google_verify_ownership</figcaption>
</figure>
<p>点击复制，记录下其中的标记信息，例如我们这里复制的原始内容是</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"F3QOKaQRQaSAxN-JLDLGD21CCU5CkZRssZYwX-Mn-Zc"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>所以在 Next 的配置文件中 <code>_config.next.yml</code>
配置如下内容</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://developers.google.com/search</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="string">F3QOKaQRQaSAxN-JLDLGD21CCU5CkZRssZYwX-Mn-Zc</span></span><br></pre></td></tr></tbody></table></figure>
<p>之后重新生成网站，并推送到 GitHub，等待 GitHub Pages 生成完毕后，点击
<code>验证</code> 即可</p>
<h4 id="提交站点地图-1">提交站点地图</h4>
<p>之前 <code>hexo-generator-sitemap</code>
插件生成的站点地图，会默认放在在根目录下，只需在 <span class="exturl" data-url="aHR0cHM6Ly9zZWFyY2guZ29vZ2xlLmNvbS9zZWFyY2gtY29uc29sZS9zaXRlbWFwcw==">GSC
的站点地图页面<i class="fa fa-external-link-alt"></i></span> 填好站点地图的位置，然后点击提交即可</p>
<figure>
<img data-src="/posts/abac0c46/google_add_sitemap.png" alt="google_add_sitemap">
<figcaption aria-hidden="true">google_add_sitemap</figcaption>
</figure>
<p>不过和 Bing 不同，Google 的站点地图爬取需要一定的时间，并且由于 <span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vd2VibWFzdGVycy90aHJlYWQvMzEwNTkxNi9zaXRlbWFwLWNvdWxkLW5vdC1iZS1yZWFkLWluLW5ldy1nc2M=">GSC
的 bug<i class="fa fa-external-link-alt"></i></span>，会将 <code>等待中</code> 错误的显示为
<code>无法获取</code>，一般需要几天的时间，此时只能耐心等待</p>
<h3 id="bing">Bing</h3>
<h4 id="从-gsc-导入">从 GSC 导入</h4>
<figure>
<img data-src="/posts/abac0c46/bing_add_website.png" alt="bing_add_website">
<figcaption aria-hidden="true">bing_add_website</figcaption>
</figure>
<p>Bing 的流程和前面类似，不过由于已经配置好了 GSC，我们可以选择直接从
GSC 进行导入即可</p>
<h4 id="手动添加网站">手动添加网站</h4>
<p>如果需要手动添加的话，其实步骤和 Google 也很类似</p>
<figure>
<img data-src="/posts/abac0c46/bing_verify_ownership.png" alt="bing_verify_ownership">
<figcaption aria-hidden="true">bing_verify_ownership</figcaption>
</figure>
<p>这里一样推荐使用第二种，也就是 HTML Meta 标记的方式，因为 NexT
主题的配置中对其进行支持，配置起来比较简单</p>
<p>点击复制，记录下其中的标记信息，例如我们这里复制的原始内容是</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msvalidate.01"</span> <span class="attr">content</span>=<span class="string">"65AB321A829DD5542989CC078C3ABD9E"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>所以在 Next 的配置文件中 <code>_config.next.yml</code>
配置如下内容</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Bing Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmasters</span></span><br><span class="line"><span class="attr">bing_site_verification:</span> <span class="string">65AB321A829DD5542989CC078C3ABD9E</span></span><br></pre></td></tr></tbody></table></figure>
<p>之后重新生成网站，并推送到 GitHub，等待 GitHub Pages 生成完毕后，点击
<code>验证</code> 即可</p>
<p>提交站点地图也，只需在 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmluZy5jb20vd2VibWFzdGVycy9zaXRlbWFwcw==">Bing Webmasters tools
的站点地图页面<i class="fa fa-external-link-alt"></i></span> 填好站点地图的位置，然后点击 <code>提交</code>
即可</p>
<figure>
<img data-src="/posts/abac0c46/bing_add_sitemap.png" alt="bing_add_sitemap">
<figcaption aria-hidden="true">bing_add_sitemap</figcaption>
</figure>
<p>Bing 的站点地图爬取一般几分钟就会完成，之后只需静静等待 Bing
给我们网站建立索引即可，一般来说一两天就可以完成整个网站的爬取，这点要比
Google 快不少</p>
<h2 id="手动请求编入索引">手动请求编入索引</h2>
<p>根据个人观察，Google
及时获取到站点地图后似乎不会立刻根据站点地图爬取网站，因此推荐再自行进行一次手动请求编入索引</p>
<p>具体流程为：</p>
<ol type="1">
<li><p>点击 GSC
的【网址检查】或者直接在顶部输入栏输入网站的根地址（也可以是其他子页面地址）</p>
<figure>
<img data-src="/posts/abac0c46/google_check_website.png" alt="google_check_website">
<figcaption aria-hidden="true">google_check_website</figcaption>
</figure></li>
<li><p> 等待结果返回后，点击【请求编入索引】即可</p>
<figure>
<img data-src="/posts/abac0c46/google_manual_submit.png" alt="google_manual_submit">
<figcaption aria-hidden="true">google_manual_submit</figcaption>
</figure></li>
</ol>
<p>个人实测，大概需要一个月左右，Google
上就能搜索到网站上的大多数页面了</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc2VhcmNoL2RvY3MvYmFzaWNzL2hvdy1zZWFyY2gtd29ya3M/aGw9emgtQ04=">【Google】Google
搜索运作方式的基础知识<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc2VhcmNoL2RvY3M/aGw9emgtQ04=">【Google】浏览
Google 搜索文档，改善网站的 SEO 过程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc2VhcmNoL2RvY3MvYWR2YW5jZWQvc2l0ZW1hcHMvb3ZlcnZpZXc/aGw9emgtQ04=">【Google】了解站点地图<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc2VhcmNoL2RvY3MvYmVnaW5uZXIvZ2V0LXN0YXJ0ZWQ/aGw9emgtQ04=">【Google】新手入门指南<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9taXplcmkuZ2l0aHViLmlvLzIwMjEvMDQvMTgvaGV4by1zaXRlbWFwLWdvb2dsZS8=">【个人博客】Hexo
博客站点地图配置（Google）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hc3VyYWRhLnpvbmUvcG9zdC9CbG9nLVNlYXJjaC1FbmdpbmUtSW5kZXgv">【个人博客】Hexo
博客主流搜索引擎收录详细指南<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX PPT</title>
    <url>/posts/499c5a19.html</url>
    <content><![CDATA[<h2 id="beamer-模板">Beamer 模板</h2>
<p>PPT 推荐用 Beamer 模板来做，可以参考 <span class="exturl" data-url="aHR0cHM6Ly93d3cub3ZlcmxlYWYuY29tL2xlYXJuL2xhdGV4L0JlYW1lcg==">Overleaf
上相关介绍<i class="fa fa-external-link-alt"></i></span> 来使用 <span id="more"></span></p>
<figure>
<img data-src="/posts/499c5a19/Beamer-overview.png" alt="Beamer">
<figcaption aria-hidden="true">Beamer</figcaption>
</figure>
<!-- TODO: Beamer 介绍和额外的特性 -->
<h2 id="特性">特性</h2>
<h3 id="frame-与-slide"><code>frame</code> 与 <code>slide</code></h3>
<p>Beamer 中通常会用一对
<code>\begin{frame}</code>、<code>\end{frame}</code>
来制作一页幻灯片（slide），例如</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line">	<span class="keyword">\frametitle</span>{标题名称}</span><br><span class="line">	主体内容</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br></pre></td></tr></tbody></table></figure>
<figure>
<img data-src="/posts/499c5a19/Beamer-frame.png" alt="frame">
<figcaption aria-hidden="true">frame</figcaption>
</figure>
<p>然而其实 frame 并不等同于 slide，其实 frame 对应的是一组 slides</p>
<h4 id="pause"><code>\pause</code></h4>
<p>添加 <code>\pause</code> 会将 <code>\pause</code>
语句前面内容单独在新的一页 slide 上显示，实现了类似 PPT
动画中的点击页面出现下一段文字的效果，下面给出代码和生成的 PDF
帮助理解</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line">	<span class="keyword">\frametitle</span>{<span class="keyword">\textbackslash</span> pause 使用}</span><br><span class="line"></span><br><span class="line">	在这组幻灯片中 <span class="keyword">\pause</span></span><br><span class="line">	</span><br><span class="line">	这段文件将部分可见 <span class="keyword">\pause</span></span><br><span class="line">	</span><br><span class="line">	现在所有文字都可以看见了</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br></pre></td></tr></tbody></table></figure>
<figure>
<img data-src="/posts/499c5a19/Beamer-pause.jpg" alt="pause">
<figcaption aria-hidden="true">pause</figcaption>
</figure>
<h4 id="itemize-中的尖括号-strat-end"><code>itemize</code> 中的尖括号
&lt;strat-end&gt;</h4>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"><span class="keyword">\frametitle</span>{item 中的尖括号}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{itemize}</span><br><span class="line">	<span class="keyword">\item</span>&lt;1-&gt; 该文字在 1+ 页均可见</span><br><span class="line">	<span class="keyword">\item</span>&lt;2-3&gt; 该文字在 2-3 页均可见</span><br><span class="line">	<span class="keyword">\item</span>&lt;3&gt; 该文字仅在第 3 页均可见</span><br><span class="line">	<span class="keyword">\item</span>&lt;4-&gt; 该文字在 4+ 页均可见</span><br><span class="line"><span class="keyword">\end</span>{itemize}</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br></pre></td></tr></tbody></table></figure>
<figure>
<img data-src="/posts/499c5a19/Beamer-item.jpg" alt="item">
<figcaption aria-hidden="true">item</figcaption>
</figure>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3ZlcmxlYWYuY29tL2xlYXJuL2xhdGV4L0JlYW1lcg==">【Overleaf】Beamer<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>Beamer</tag>
        <tag>LaTeX</tag>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 基础介绍</title>
    <url>/posts/a4752f87.html</url>
    <content><![CDATA[<h2 id="tex-和-latex">TeX 和 LaTeX</h2>
<p>Tex 是一个排版软件，而 LaTeX 是基于 TeX 开发的排版系统，可以理解成
LaTeX 通过对 TeX 进行封装，使用 TeX
作为它的格式化引擎，使得排版文字变得更加方便。</p>
<p>LaTeX 利用 TeX 对 <code>.tex</code> 后缀的文件进行编译，生成
<code>.dvi</code> 文件 <span id="more"></span></p>
<h2 id="pdftexxetex-和-luatex">pdfTeX、XeTeX 和 LuaTeX</h2>
<h3 id="三者的介绍">三者的介绍</h3>
<p>pdfTeX、XeTeX 和 LuaTeX 都是在原有的 TeX 停止更新后进行修改增强的 TeX
引擎，提供一些额外的附加功能，例如可以直接输出成 pdf 文件等。</p>
<ul>
<li>pdfLaTeX 表示将 LaTeX 宏包与 pdfTeX 引擎一起使用</li>
<li> XeLaTeX 表示将 LaTeX 宏包与 XeTeX 引擎一起使用</li>
<li> LuaLaTeX 表示将 LaTeX 宏包与 LuaTeX 引擎一起使用</li>
</ul>
<h3 id="各自的特性">各自的特性</h3>
<ul>
<li>pdfTeX 的主要特性是能直接生成 pdf</li>
<li>XeLaTeX 的主要特性是支持 UTF-8 编码，因此理论上原生支持中文字符</li>
<li> LuaLaTeX 的主要特性除了支持 UTF-8 编外之外，主要是增加了 Lua
脚本</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3ZlcmxlYWYuY29tL2xlYXJuL2xhdGV4L0FydGljbGVzL1doYXQlMjdzX2luX2FfTmFtZSUzQV9BX0d1aWRlX3RvX3RoZV9NYW55X0ZsYXZvdXJzX29mX1RlWCNBbmRfZmluYWxseTpfZnJvbV9UZVhfdG9fcGRmVGVYLjJDX1hlVGVYX2FuZF9MdWFUZVg=">【Overleaf】pdfTeX,
XeTeX and LuaTeX<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 环境配置</title>
    <url>/posts/4f94956.html</url>
    <content><![CDATA[<h2 id="网页环境">网页环境</h2>
<h3 id="overleaf">Overleaf</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3ZlcmxlYWYuY29t">Overleaf<i class="fa fa-external-link-alt"></i></span> 是一个在线的 LaTeX
编辑环境，可以避免在本地安装和配置的过程，同时还能和他人共享编辑
<span id="more"></span></p>
<h2 id="本地环境">本地环境</h2>
<h3 id="tex-live">TeX Live</h3>
<p>TeX Live 可以利用镜像安装节省下载时间</p>
<ul>
<li>从 <span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL0NUQU4vc3lzdGVtcy90ZXhsaXZlL0ltYWdlcy8=">清华镜像站<i class="fa fa-external-link-alt"></i></span>
直接下载</li>
<li>或者利用 <span class="exturl" data-url="aHR0cDovL3d3dy50dWcub3JnL3RleGxpdmUvYWNxdWlyZS1pc28uaHRtbCN0b3JyZW50">种子文件<i class="fa fa-external-link-alt"></i></span>
BT 下载镜像</li>
</ul>
<p>可以在安装 TeX Live 时同时勾选上安装 TeXworks 前端，然后就可以使用
TeXworks 作为 IDE 来使用了</p>
<h3 id="texstudio">TeXstudio</h3>
<p>TeXstudio 也是一个很好的 LaTeX 编辑软件，可以直接去 <span class="exturl" data-url="aHR0cHM6Ly93d3cudGV4c3R1ZGlvLm9yZy8=">官网<i class="fa fa-external-link-alt"></i></span> 下载安装，并且有中文界面</p>
<h3 id="vscode">VSCode</h3>
<p>个人更喜欢 VSCode，通过安装扩展并进行相应的配置即可较好的支持
LaTeX，同时还有格式化和自动补全等功能，非常方便</p>
<h4 id="安装-latex-workshop-扩展">安装 LaTeX Workshop 扩展</h4>
<p>直接在 <span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPUphbWVzLVl1LmxhdGV4LXdvcmtzaG9w">VSCode
的扩展商店<i class="fa fa-external-link-alt"></i></span> 中搜索 <code>LaTeX Workshop</code> 安装即可</p>
<h4 id="编译链配置">编译链配置</h4>
<ol type="1">
<li><p>默认配置</p>
<p>TeX Live 安装时会同时安装 <code>latexmk</code>, LaTeX Workshop
会默认使用 <code>latexmk</code> 来编译
<code>.tex</code>，无需手动再配置</p></li>
<li><p>手动配置 (可选)</p>
<p>手动配置 LaTeX Workshop，在 VSCode 的配置文件
<code>settings.json</code> 中直接手动添加如下代码:</p>
<p>主要参考插件的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzLVl1L0xhVGVYLVdvcmtzaG9wL3dpa2kvQ29tcGlsZSNsYXRleC1yZWNpcGVz">官方
recipes 配置<i class="fa fa-external-link-alt"></i></span> 修改</p>
<p></p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 配置编译链，可以根据需要做修改</span></span><br><span class="line"><span class="attr">"latex-workshop.latex.recipes"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"xelatex 🔃"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"tools"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"xelatex"</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"pdflatex 🔃"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"tools"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"pdflatex"</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"latexmk 🔃"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"tools"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"latexmk"</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"xelatex ➞ bibtex ➞ xelatex`×2"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"tools"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"xelatex"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"bibtex"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"xelatex"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"xelatex"</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"pdflatex ➞ bibtex ➞ pdflatex`×2"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"tools"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"pdflatex"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"bibtex"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"pdflatex"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"pdflatex"</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 具体的编译命令配置</span></span><br><span class="line"><span class="attr">"latex-workshop.latex.tools"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"latexmk"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"command"</span><span class="punctuation">:</span> <span class="string">"latexmk"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"-synctex=1"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"-interaction=nonstopmode"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"-file-line-error"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"-pdf"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"-outdir=%OUTDIR%"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"%DOC%"</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"xelatex"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"command"</span><span class="punctuation">:</span> <span class="string">"xelatex"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"-synctex=1"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"-interaction=nonstopmode"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"-file-line-error"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"%DOC%"</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"pdflatex"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"command"</span><span class="punctuation">:</span> <span class="string">"pdflatex"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"-synctex=1"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"-interaction=nonstopmode"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"-file-line-error"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">"%DOC%"</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"bibtex"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"command"</span><span class="punctuation">:</span> <span class="string">"bibtex"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"%DOCFILE%"</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p><!-- TODO: 弄清编译命令和编译链当前配置的具体含义，主要是 bibtex --></p></li>
</ol>
<h4 id="正向同步">正向同步</h4>
<p>正向同步指的是编译完成后，在 <code>.tex</code>
文件内通过快捷键，快速定位到光标位置在 <code>.tex</code>
的对应位置，方便查看 PDF 文件</p>
<p>推荐打开文件修改后，编译完成后自动正向同步。该功能通过
<code>latex-workshop.synctex.afterBuild.enabled</code> 来控制</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"latex-workshop.synctex.afterBuild.enabled"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="反向同步">反向同步</h4>
<p>反向同步指的是编译完成后，在 PDF 文件内通过快捷键，快速定位点击部分在
<code>.tex</code> 的位置，方便修改 <code>.tex</code> 源码</p>
<p>主要参考插件的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzLVl1L0xhVGVYLVdvcmtzaG9wL3dpa2kvVmlldyNzeW5jdGV4">官方
synctex 配置<i class="fa fa-external-link-alt"></i></span> 修改</p>
<ol type="1">
<li><p>VSCode 内部 PDF 浏览器</p>
<p>如果直接使用 VSCode 来浏览 PDF，不需要额外设置，可以根据需要修改
<code>latex-workshop.view.pdf.internal.synctex.keybinding</code>
来修改反向同步的快捷键即可，默认 Ctrl 加鼠标左键</p>
<p></p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 默认 Ctrl 加鼠标左键</span></span><br><span class="line"><span class="attr">"latex-workshop.view.pdf.internal.synctex.keybinding"</span><span class="punctuation">:</span> <span class="string">"ctrl-click"</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>外部 PDF 浏览器</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3VtYXRyYXBkZnJlYWRlci5vcmcvZnJlZS1wZGYtcmVhZGVy">SumatraPDF<i class="fa fa-external-link-alt"></i></span>
是一款流行的小巧方便的免费 PDF 浏览软件。VSCode 支持使用外部的 PDF
浏览器来查看编译后的 PDF 文件，以及反向搜索功能。主要需要如下配置：</p>
<p></p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 配置为使用外部 PDF 浏览软件来浏览 PDF</span></span><br><span class="line"><span class="attr">"latex-workshop.view.pdf.viewer"</span><span class="punctuation">:</span> <span class="string">"external"</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 配置外部 PDF 浏览软件的命令行以及参数</span></span><br><span class="line"><span class="attr">"latex-workshop.view.pdf.external.viewer.command"</span><span class="punctuation">:</span> <span class="string">"D:/Program/SumatraPDF/SumatraPDF-3.2-64.exe"</span><span class="punctuation">,</span> <span class="comment">// 自行修改路径</span></span><br><span class="line"><span class="attr">"latex-workshop.view.pdf.external.viewer.args"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">"%PDF%"</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p>在 SumatraPDF 的设置 - 选项中设置反向搜索命令行
<code>C:\Users\&lt;user&gt;\AppData\Local\Programs\Microsoft VS Code\Code.exe -g "%f:%l"</code>，Code
的路径应该为完整的绝对路径</p></li>
</ol>
<h4 id="其他可选配置">其他可选配置</h4>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 关闭自动编译</span></span><br><span class="line"><span class="attr">"latex-workshop.latex.autoBuild.run"</span><span class="punctuation">:</span> <span class="string">"never"</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 默认选择上次编译链</span></span><br><span class="line"><span class="attr">"latex-workshop.latex.recipe.default"</span><span class="punctuation">:</span> <span class="string">"lastUsed"</span></span><br><span class="line"><span class="comment">// 右键菜单</span></span><br><span class="line"><span class="attr">"latex-workshop.showContextMenu"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 关闭编译出错的弹窗</span></span><br><span class="line"><span class="attr">"latex-workshop.message.error.show"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"latex-workshop.message.warning.show"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="中文支持">中文支持</h2>
<p>该节主要参考 <span class="exturl" data-url="aHR0cHM6Ly9jbi5vdmVybGVhZi5jb20vbGVhcm4vbGF0ZXgvQ2hpbmVzZQ==">Overleaf Chinese<i class="fa fa-external-link-alt"></i></span>
文档</p>
<p><strong>推荐使用 XeLaTeX 和 LuaLaTeX 来编译含有中文字符的
<code>.tex</code> 文件</strong></p>
<h3 id="xelatex-和-lualatex">XeLaTeX 和 LuaLaTeX</h3>
<ol type="1">
<li>直接使用 <code>ctexart</code> 文档类即可支持中文</li>
<li>或者使用 <code>ctex</code> 包来支持中文</li>
</ol>
<p>参考代码如下：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{abstract}</span><br><span class="line">这是简介及摘要。</span><br><span class="line"><span class="keyword">\end</span>{abstract}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>{前言}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>{关于数学部分}</span><br><span class="line">数学、中英文皆可以混排。You can intersperse math, Chinese and English (Latin script) without adding extra environments.</span><br><span class="line"></span><br><span class="line">這是繁體中文。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>
<p>或者</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{xxx}</span><br><span class="line"><span class="keyword">\usepackage</span>{ctex}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="xelatex">XeLaTeX</h3>
<p>XeLaTeX 还可以使用 <code>xeCJK</code> 包来支持中文</p>
<p>参考代码如下：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{article}</span><br><span class="line"><span class="keyword">\usepackage</span>{xeCJK}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>{前言}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>{关于数学部分}</span><br><span class="line">数学、中英文皆可以混排。You can intersperse math, Chinese and English (Latin script) without adding extra environments.</span><br><span class="line"></span><br><span class="line">這是繁體中文。</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="pdflatex">pdfLaTeX</h3>
<p>pdfLaTeX 对中文支持不是很好，只用 pdaLaTeX 的话需要引入
<code>CJKutf8</code> 包，并且用 <code>\begin{CJK*}{UTF8}{gbsn}</code> 和
<code>\end{CJK*}</code> 包住所有的中文。</p>
<ul>
<li><code>gbsn</code> 和 <code>gkai</code> 是简体的字体</li>
<li><code>bsmi</code> 和 <code>bkai</code> 是繁体的字体</li>
</ul>
<p>参考代码如下：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{article}</span><br><span class="line"><span class="keyword">\usepackage</span>{CJKutf8}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{CJK*}{UTF8}{gbsn}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>{前言}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>{关于数学部分}</span><br><span class="line">数学、中英文皆可以混排。You can intersperse math, Chinese and English (Latin script) without adding extra environments.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{CJK*}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\bigskip</span>  <span class="comment">%% Just some white space</span></span><br><span class="line"></span><br><span class="line">You can also insert Latin text in your document</span><br><span class="line"></span><br><span class="line"><span class="keyword">\bigskip</span>  <span class="comment">%% Just some white space</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{CJK*}{UTF8}{bsmi}</span><br><span class="line">這是繁體中文。</span><br><span class="line"><span class="keyword">\end</span>{CJK*}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="编译">编译</h3>
<ol type="1">
<li><p>首先 <code>.tex</code>
文件名以及路径尽量不要含有空格以及中文字符</p></li>
<li><p>在使用 <code>latexmk</code> 和 VSCode 的 LaTeX Workshop
时，推荐使用第三个编译链 <code>Recipe: latexmk (lualatex)</code></p>
<figure>
<img data-src="/posts/4f94956/build-chinese-latex.png" alt="编译中文 LaTeX">
<figcaption aria-hidden="true">编译中文 LaTeX</figcaption>
</figure></li>
</ol>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzLVl1L0xhVGVYLVdvcmtzaG9wL3dpa2kvSW5zdGFsbCNyZXF1aXJlbWVudHM=">【LaTeX
Workshop】依赖<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzLVl1L0xhVGVYLVdvcmtzaG9wL3dpa2kvQ29tcGlsZSNsYXRleC1yZWNpcGVz">【LaTeX
Workshop】recipes 配置<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzLVl1L0xhVGVYLVdvcmtzaG9wL3dpa2kvVmlldyNzeW5jdGV4">【LaTeX
Workshop】synctex 配置<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zODE3ODAxNQ==">【知乎】使用 VSCode
编写 LaTeX<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNjY1MjMwNjQ=">【知乎】Visual
Studio Code 配置 LaTeX<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbi5vdmVybGVhZi5jb20vbGVhcm4vbGF0ZXgvQ2hpbmVzZQ==">【Overleaf】Chinese<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
        <tag>todo</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 语法</title>
    <url>/posts/2033aa70.html</url>
    <content><![CDATA[<p>中文支持参考环境配置中的 <a href="/posts/4f94956.html#中文支持">内容</a>，在这里不做重复
<span id="more"></span></p>
<h2 id="长度">长度</h2>
<p>常用的长度单位</p>
<table>
<thead>
<tr class="header">
<th>单位</th>
<th>含义</th>
<th>换算成 pt</th>
<th> 换成算成 mm</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>pt</td>
<td> 基本单位</td>
<td> 1 pt</td>
<td>0.35146 mm</td>
</tr>
<tr class="even">
<td>mm</td>
<td> 毫米</td>
<td> 2.84 pt</td>
<td>1 mm</td>
</tr>
<tr class="odd">
<td>cm</td>
<td> 厘米</td>
<td> 28.4 pt</td>
<td>10 mm</td>
</tr>
<tr class="even">
<td>in</td>
<td> 英寸</td>
<td> 72.27 pt</td>
<td>0.35146 mm</td>
</tr>
<tr class="odd">
<td>ex</td>
<td> 当前字体的 x 字母高度</td>
<td> -</td>
<td>-</td>
</tr>
<tr class="even">
<td>em</td>
<td> 当前字体的 m 字母宽度</td>
<td> -</td>
<td>-</td>
</tr>
</tbody>
</table>
<h2 id="空行">空行</h2>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\vspace</span>{length}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="空格">空格</h2>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\hspace</span>{length}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="超链接">超链接</h2>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">% 开启链接颜色配置，并配置为蓝色</span></span><br><span class="line"><span class="keyword">\usepackage</span>[colorlinks=true, allcolors=blue]{hyperref}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\url</span>{<span class="link">https://ywang-wnlo.github.io/posts/2033aa70.html</span>}</span><br><span class="line"><span class="keyword">\href</span>{<span class="link">https://ywang-wnlo.github.io/posts/2033aa70.html</span>}{LaTeX 语法}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="数学公式">数学公式</h2>
<h3 id="段落中隐式">段落中（隐式）</h3>
<p>三种均可，任意选择，以 E=mc<sup>2</sup> 为例</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\(</span>E=mc<span class="built_in">^</span>2<span class="keyword">\)</span></span><br><span class="line"><span class="built_in">$</span>E=mc<span class="built_in">^</span>2<span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>{math}E=mc<span class="built_in">^</span>2<span class="keyword">\end</span>{math}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="单独成段显式">单独成段（显式）</h3>
<p>三种均可，任意选择</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\[</span>E=mc<span class="built_in">^</span>2<span class="keyword">\]</span></span><br><span class="line"><span class="keyword">\begin</span>{displaymath}E=mc<span class="built_in">^</span>2<span class="keyword">\end</span>{displaymath}</span><br><span class="line"><span class="keyword">\begin</span>{equation}E=mc<span class="built_in">^</span>2<span class="keyword">\end</span>{equation}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="居中左对齐右对齐">居中，左对齐，右对齐</h2>
<h3 id="居中">居中</h3>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{center}</span><br><span class="line">  balabala</span><br><span class="line"><span class="keyword">\end</span>{center}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="左对齐">左对齐</h3>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{flushleft}</span><br><span class="line">  balabala</span><br><span class="line"><span class="keyword">\end</span>{flushleft}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="右对齐">右对齐</h3>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{flushright}</span><br><span class="line">  balabala</span><br><span class="line"><span class="keyword">\end</span>{flushright}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="参考文献配置">参考文献配置</h2>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\bibliographystyle</span>{stylename}</span><br><span class="line"><span class="keyword">\bibliography</span>{bibfile}</span><br></pre></td></tr></tbody></table></figure>
<p>其中 <code>bibfile</code> 为 <code>.bib</code> 文件的名，而
<code>stylename</code> 是风格名称，以 overleaf 为例，有如下选项</p>
<table>
<colgroup>
<col style="width: 57%">
<col style="width: 42%">
</colgroup>
<thead>
<tr class="header">
<th>stylename</th>
<th>output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>abbrc</td>
<td><img data-src="/posts/2033aa70/BibtexStylesAbbrc.png" alt="BibtexStylesAbbrc"></td>
</tr>
<tr class="even">
<td>acm</td>
<td><img data-src="/posts/2033aa70/BibtexStylesAcm.png" alt="BibtexStylesAcm"></td>
</tr>
<tr class="odd">
<td>alpha</td>
<td><img data-src="/posts/2033aa70/BibtexStylesAlpha.png" alt="BibtexStylesAlpha"></td>
</tr>
<tr class="even">
<td>apalike</td>
<td><img data-src="/posts/2033aa70/BibtexStylesApalike.png" alt="BibtexStylesApalike"></td>
</tr>
<tr class="odd">
<td>ieeetr</td>
<td><img data-src="/posts/2033aa70/BibtexStylesIeeetr.png" alt="BibtexStylesIeeetr"></td>
</tr>
<tr class="even">
<td>plain</td>
<td><img data-src="/posts/2033aa70/BibtexStylesPlain.png" alt="BibtexStylesPlain"></td>
</tr>
<tr class="odd">
<td>siam</td>
<td><img data-src="/posts/2033aa70/BibtexStylesSiam.png" alt="BibtexStylesSiam"></td>
</tr>
<tr class="even">
<td>unsrt</td>
<td><img data-src="/posts/2033aa70/BibtexStylesUnsrt.png" alt="BibtexStylesUnsrt"></td>
</tr>
</tbody>
</table>
<h2 id="todo">TODO</h2>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpYm9va3Mub3JnL3dpa2kvTGFUZVgvTGVuZ3Rocw==">【维基百科】LaTeX
Lengths<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpYm9va3Mub3JnL3dpa2kvTGFUZVgvSHlwZXJsaW5rcw==">【维基百科】LaTeX
Hyperlinks<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3ZlcmxlYWYuY29tL2xlYXJuL2xhdGV4L01hdGhlbWF0aWNhbF9leHByZXNzaW9ucw==">【overleaf】Mathematical
expressions<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3ZlcmxlYWYuY29tL2xlYXJuL2xhdGV4L0JpYnRleF9iaWJsaW9ncmFwaHlfc3R5bGVz">【overleaf】Bibtex
bibliography styles<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义配置 RocksDB 进行 YCSB 测试</title>
    <url>/posts/4bc1e607.html</url>
    <content><![CDATA[<p>本文主要记录在利用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyaWFuZnJhbmtjb29wZXIvWUNTQg==">YCSB<i class="fa fa-external-link-alt"></i></span>
使用配置文件测试 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JvY2tzZGI=">RocksDB<i class="fa fa-external-link-alt"></i></span>
的过程中遇到的一些问题以及相应的解决办法 <span id="more"></span></p>
<h2 id="简介">简介</h2>
<p>YCSB 的全程是 Yahoo! Cloud Serving
Benchmark，是雅虎开发的用来对云服务进行基础测试的工具，支持目前常见的
NoSQL 数据库产品，如 HBase、MongoDB、OrientDB、Redis 等等</p>
<p>RocksDB 是一个具有键 / 值接口的存储引擎，其中键和值是任意字节流。它是在
Facebook（Meta） 基于 LevelDB 开发的，并为 LevelDB API
提供向后兼容的支持</p>
<h2 id="编译-rocksdb">编译 RocksDB</h2>
<p>由于 YCSB 是用 Java 实现的，一般测试的数据库都需要提供 Java 版本的
<code>.jar</code> 包</p>
<p>虽然 RocksDB 最初是 C++
的一个库（因为是嵌入式数据库），但是后续也提供了 Java 的 API
以及可以通过源码编译出 <code>.jar</code> 包，也可以直接通过
<code>Maven</code> 获取</p>
<p>官方在 GitHub 上给出了 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JvY2tzZGIvd2lraS9Sb2Nrc0phdmEtQmFzaWNz">Java
版本的介绍<i class="fa fa-external-link-alt"></i></span>，编译过程也很简单</p>
<p>首先需要保证机器上安装好了 Java 的环境，必须在 1.7+
版本以上，例如，安装 <code>openjdk-8-jdk</code> 包即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></tbody></table></figure>
<p>同时 RocksDB 本身还有一些环境需要安装，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JvY2tzZGIvYmxvYi9tYWluL0lOU1RBTEwubWQ=">官方<i class="fa fa-external-link-alt"></i></span>
也给出来了</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev</span><br></pre></td></tr></tbody></table></figure>
<p>实际编译 jar 包时，需要提前配置好环境变量</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="string">"/usr/lib/jvm/java-8-openjdk-amd64"</span></span><br></pre></td></tr></tbody></table></figure>
<p>实际编译时，有两个中版本可以选择，其中 <code>rocksdbjava</code> 是
debug 版本，而 <code>rocksdbjavastatic</code> 这是 release
版本，不过官方在 Java 版说明中没有提及，我是在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JvY2tzZGIvYmxvYi9tYWluL01ha2VmaWxl">Makefile
文件<i class="fa fa-external-link-alt"></i></span> 中找到的</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">make -j$(<span class="built_in">nproc</span>) rocksdbjava</span><br><span class="line">make -j$(<span class="built_in">nproc</span>) rocksdbjavastatic</span><br></pre></td></tr></tbody></table></figure>
<h2 id="编译-ycsb">编译 YCSB</h2>
<p>YCSB 在 2019/10/17 的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyaWFuZnJhbmtjb29wZXIvWUNTQi9jb21taXQvNGE5OTAwOTlhNjY3YzkyMjZkNWMzM2RlNzk3MWY4YjdlZGU5ZmZjMA==">4a99009<i class="fa fa-external-link-alt"></i></span>
增加了对 RocksDB 配置文件的支持，然而目前官方给出的 release 版本还是
0.17.0，并且发布时间是 2019/10/6，因此我们只能选择从源码开始编译了</p>
<p>根据 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyaWFuZnJhbmtjb29wZXIvWUNTQi90cmVlL21hc3Rlci9yb2Nrc2Ri">官方给出的流程<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/brianfrankcooper/YCSB.git</span><br><span class="line"><span class="built_in">cd</span> YCSB</span><br><span class="line">mvn -pl site.ycsb:rocksdb-binding -am clean package</span><br></pre></td></tr></tbody></table></figure>
<p>此时编译好的文件在 <code>./rocksdb/target/</code> 目录下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">~/YCSB$ <span class="built_in">ls</span> rocksdb/target/*.jar</span><br><span class="line">rocksdb/target/rocksdb-binding-0.18.0-SNAPSHOT.jar</span><br></pre></td></tr></tbody></table></figure>
<p>该 <code>.jar</code> 包其实只是 YCSB 和 RocksDB
之间的中间件，实际使用的 RocksDB 的 <code>.jar</code>
包以及其他的依赖包则是在 <code>./rocksdb/target/dependency/</code>
目录下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">~/YCSB$ tree rocksdb/target/dependency/</span><br><span class="line">rocksdb/target/dependency/</span><br><span class="line">├── jcip-annotations-1.0.jar</span><br><span class="line">├── rocksdbjni-6.2.2.jar</span><br><span class="line">├── slf4j-api-1.7.25.jar</span><br><span class="line">└── slf4j-simple-1.7.25.jar</span><br></pre></td></tr></tbody></table></figure>
<p>RocksDB 的包其实是由 YCSB 通过 <code>Maven</code>
下载的，具体的版本在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyaWFuZnJhbmtjb29wZXIvWUNTQi9jb21taXQvNGE5OTAwOTlhNjY3YzkyMjZkNWMzM2RlNzk3MWY4YjdlZGU5ZmZjMCNkaWZmLTljNWZiM2QxYjdlM2IwZjU0YmM1YzQxODI5NjVjNGZlMWY5MDIzZDQ0OTAxN2NlY2UzMDA1ZDNmOTBlOGU0ZDhMMTUw">pom.xml<i class="fa fa-external-link-alt"></i></span>
中定义了</p>
<ul>
<li>如果使用原本 RocksDB 则可以简单的通过修改这个版本信息，重新编译利用
<code>Maven</code> 重新下载</li>
<li>如果使用的是自己修改过源码的 RocksDB 则需要将自行编译的 RocksDB 的
<code>.jar</code> 包移到该目录下，并且删除旧的 <code>.jar</code> 包</li>
</ul>
<h2 id="修复报错">修复报错</h2>
<p>但此时如果使用 <code>./bin/ycsb.sh</code> 来进行测试，会报错</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">~/YCSB$ ./bin/ycsb.sh load rocksdb -s -P workloads/workloada -p rocksdb.dir=tmp/</span><br><span class="line">/usr/lib/jvm/java-8-openjdk-amd64/bin/java  -classpath /home/ywang/YCSB/conf:/home/ywang/YCSB/core/target/core-0.18.0-SNAPSHOT.jar:/home/ywang/YCSB/rocksdb/target/rocksdb-binding-0.18.0-SNAPSHOT.jar:/home/ywang/YCSB/rocksdb/target/dependency/jcip-annotations-1.0.jar:/home/ywang/YCSB/rocksdb/target/dependency/rocksdbjni-6.2.2.jar:/home/ywang/YCSB/rocksdb/target/dependency/slf4j-api-1.7.25.jar:/home/ywang/YCSB/rocksdb/target/dependency/slf4j-simple-1.7.25.jar site.ycsb.Client -load -db site.ycsb.db.rocksdb.RocksDBClient -s -P workloads/workloada -p rocksdb.dir=tmp/</span><br><span class="line">Command line: -load -db site.ycsb.db.rocksdb.RocksDBClient -s -P workloads/workloada -p rocksdb.dir=tmp/</span><br><span class="line">YCSB Client 0.18.0-SNAPSHOT</span><br><span class="line"></span><br><span class="line">Loading workload...</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.NoClassDefFoundError: org/apache/htrace/core/Tracer<span class="variable">$Builder</span></span><br><span class="line">        at site.ycsb.Client.getTracer(Client.java:458)</span><br><span class="line">        at site.ycsb.Client.main(Client.java:304)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.apache.htrace.core.Tracer<span class="variable">$Builder</span></span><br><span class="line">        at java.net.URLClassLoader.findClass(URLClassLoader.java:387)</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:418)</span><br><span class="line">        at sun.misc.Launcher<span class="variable">$AppClassLoader</span>.loadClass(Launcher.java:352)</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:351)</span><br><span class="line">        ... 2 more</span><br><span class="line"> (might take a few minutes <span class="keyword">for</span> large data sets)</span><br></pre></td></tr></tbody></table></figure>
<p>主要是使用的 <code>./bin/ycsb.sh</code> 脚本有 bug，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyaWFuZnJhbmtjb29wZXIvWUNTQi9pc3N1ZXMvMTEwNQ==">官方已经知道<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyaWFuZnJhbmtjb29wZXIvWUNTQi9wdWxsLzkwOA==">并尝试修复<i class="fa fa-external-link-alt"></i></span>，不过好像仍然没有解决</p>
<p>目前可以手动将 <code>htrace</code> 的包的依赖加入 RocksDB
中，并重新编译，利用 <code>Maven</code> 下载到
<code>./rocksdb/target/dependency/</code> 目录下</p>
<p>可以手动将 <code>./core/pom.xml</code> 中 <code>htrace</code>
的依赖信息复制添加到 <code>./rocksdb/pom.xml</code> 中</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ./rocksdb/pom.xml --&gt;</span></span><br><span class="line">	……</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.rocksdb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocksdbjni<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${rocksdb.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.htrace<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>htrace-core4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0-incubating<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>site.ycsb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${project.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	……</span><br></pre></td></tr></tbody></table></figure>
<p>然后利用
<code>mvn -pl site.ycsb:rocksdb-binding -am clean package</code>
重新编译</p>
<p>这时再次利用 <code>./bin/ycsb.sh</code> 来进行测试，还会报错</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">~/YCSB$ ./bin/ycsb.sh load rocksdb -s -P workloads/workloada -p rocksdb.dir=tmp/</span><br><span class="line">/usr/lib/jvm/java-8-openjdk-amd64/bin/java  -classpath /home/ywang/YCSB/conf:/home/ywang/YCSB/core/target/core-0.18.0-SNAPSHOT.jar:/home/ywang/YCSB/rocksdb/target/rocksdb-binding-0.18.0-SNAPSHOT.jar:/home/ywang/YCSB/rocksdb/target/dependency/htrace-core4-4.1.0-incubating.jar:/home/ywang/YCSB/rocksdb/target/dependency/jcip-annotations-1.0.jar:/home/ywang/YCSB/rocksdb/target/dependency/rocksdbjni-6.2.2.jar:/home/ywang/YCSB/rocksdb/target/dependency/slf4j-api-1.7.25.jar:/home/ywang/YCSB/rocksdb/target/dependency/slf4j-simple-1.7.25.jar site.ycsb.Client -load -db site.ycsb.db.rocksdb.RocksDBClient -s -P workloads/workloada -p rocksdb.dir=tmp/</span><br><span class="line">Command line: -load -db site.ycsb.db.rocksdb.RocksDBClient -s -P workloads/workloada -p rocksdb.dir=tmp/</span><br><span class="line">YCSB Client 0.18.0-SNAPSHOT</span><br><span class="line"></span><br><span class="line">Loading workload...</span><br><span class="line">Starting <span class="built_in">test</span>.</span><br><span class="line">[Thread-3] INFO site.ycsb.db.rocksdb.RocksDBClient - RocksDB data <span class="built_in">dir</span>: tmp</span><br><span class="line">2021-12-25 16:10:30:807 0 sec: 0 operations; est completion <span class="keyword">in</span> 0 second</span><br><span class="line">DBWrapper: report latency <span class="keyword">for</span> each error is <span class="literal">false</span> and specific error codes to track <span class="keyword">for</span> latency are: []</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"Thread-3"</span> java.lang.NoClassDefFoundError: org/HdrHistogram/EncodableHistogram</span><br><span class="line">        at site.ycsb.measurements.Measurements.constructOneMeasurement(Measurements.java:129)</span><br><span class="line">        at site.ycsb.measurements.Measurements.getOpMeasurement(Measurements.java:220)</span><br><span class="line">        at site.ycsb.measurements.Measurements.measure(Measurements.java:188)</span><br><span class="line">        at site.ycsb.DBWrapper.measure(DBWrapper.java:184)</span><br><span class="line">        at site.ycsb.DBWrapper.insert(DBWrapper.java:229)</span><br><span class="line">        at site.ycsb.workloads.CoreWorkload.doInsert(CoreWorkload.java:621)</span><br><span class="line">        at site.ycsb.ClientThread.run(ClientThread.java:135)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.HdrHistogram.EncodableHistogram</span><br><span class="line">        at java.net.URLClassLoader.findClass(URLClassLoader.java:387)</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:418)</span><br><span class="line">        at sun.misc.Launcher<span class="variable">$AppClassLoader</span>.loadClass(Launcher.java:352)</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:351)</span><br><span class="line">        ... 8 more</span><br><span class="line">2021-12-25 16:10:30:954 0 sec: 0 operations; est completion <span class="keyword">in</span> 106751991167300 days 15 hours</span><br><span class="line">[OVERALL], RunTime(ms), 170</span><br><span class="line">[OVERALL], Throughput(ops/sec), 0.0</span><br><span class="line">[TOTAL_GCS_PS_Scavenge], Count, 0</span><br><span class="line">[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 0</span><br><span class="line">[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.0</span><br><span class="line">[TOTAL_GCS_PS_MarkSweep], Count, 0</span><br><span class="line">[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 0</span><br><span class="line">[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.0</span><br><span class="line">[TOTAL_GCs], Count, 0</span><br><span class="line">[TOTAL_GC_TIME], Time(ms), 0</span><br><span class="line">[TOTAL_GC_TIME_%], Time(%), 0.0</span><br></pre></td></tr></tbody></table></figure>
<p>原因和之前一样，再次将 <code>HdrHistogram</code> 相关的依赖，从
<code>./core/pom.xml</code> 复制添加到 <code>./rocksdb/pom.xml</code>
中</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ./rocksdb/pom.xml --&gt;</span></span><br><span class="line">	……</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.rocksdb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocksdbjni<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${rocksdb.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.htrace<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>htrace-core4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0-incubating<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hdrhistogram<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HdrHistogram<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>site.ycsb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${project.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	……</span><br></pre></td></tr></tbody></table></figure>
<p>然后利用
<code>mvn -pl site.ycsb:rocksdb-binding -am clean package</code>
重新编译</p>
<p>这时再次利用 <code>./bin/ycsb.sh</code> 来进行测试就已经正常了</p>
<h2 id="自定义配置-rocksdb-进行-ycsb-测试">自定义配置 RocksDB 进行 YCSB
测试</h2>
<p>自定义配置 RocksDB 的方式就很简单了，在 YCSB 测试时增加
<code>rocksdb.optionsfile</code> 参数并给出配置文件的路径即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./bin/ycsb.sh load rocksdb -s -P workloads/workloada -p rocksdb.dir=/tmp/ycsb-rocksdb-data -p workloads/ycsb-rocksdb-options.ini</span><br><span class="line">./bin/ycsb.sh run rocksdb -s -P workloads/workloada -p rocksdb.dir=/tmp/ycsb-rocksdb-data -p workloads/ycsb-rocksdb-options.ini</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>配置文件可以参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JvY2tzZGIvYmxvYi9tYWluL2V4YW1wbGVzL3JvY2tzZGJfb3B0aW9uX2ZpbGVfZXhhbXBsZS5pbmk=">RocksDB
官方的例子<i class="fa fa-external-link-alt"></i></span> 修改</li>
<li>也可以先不加测试文件，执行一次
<code>./bin/ycsb.sh load rocksdb -s -P workloads/workloada -p rocksdb.dir=/tmp/ycsb-rocksdb-data</code>，让
YCSB 自己生成，然后根据 RocksDB
测试目录（<code>/tmp/ycsb-rocksdb-data</code>）下的
<code>OPTIONS-000009</code> 的配置文件来修改</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JvY2tzZGIvd2lraS9Sb2Nrc0phdmEtQmFzaWNz">【GitHub】RocksJava
Basics<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMS9ucHJvYy4xLmh0bWw=">【man】nproc(1)
— Linux manual page<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyaWFuZnJhbmtjb29wZXIvWUNTQi9pc3N1ZXMvMTEwNQ==">【GitHub】Cannot
execute YCSB #1105<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyaWFuZnJhbmtjb29wZXIvWUNTQi9pc3N1ZXMvMTEwNQ==">【GitHub】[core]
Fix ycsb.sh and ycsb.bat missing core dependencies #908<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5OTMwOTYyODEvYXJ0aWNsZS9kZXRhaWxzLzg3ODY0MzQw">【CSDN】rocksdb
在 YCSB 中的运行教程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>RocksDB</tag>
        <tag>YCSB</tag>
      </tags>
  </entry>
  <entry>
    <title>修复 chrome 打不开微信或者部分第三方应用内链接</title>
    <url>/posts/29e0b18c.html</url>
    <content><![CDATA[<p>最近电脑有个问题持续了好久：<strong>当默认浏览器设置为 chrome
时，并且 chrome
已经打开的情况下</strong>，在微信内通过默认浏览器打开总是没有反应
<del>（如果 chrome 没有打开时，则会正常跳出 chrome
以及相应的网页，好气哦）</del> <span id="more"></span></p>
<figure>
<img data-src="/posts/29e0b18c/wechat_default_browser.png" alt="wechat_default_browser">
<figcaption aria-hidden="true">wechat_default_browser</figcaption>
</figure>
<h2 id="修复问题卸载-kgchromeplugin">修复问题：卸载 KGChromePlugin</h2>
<p>经过各种查询资料，最后发现原因是 chrome 的启动参数被 KGChromePlugin
金格插件篡改了，从而导致部分第三方应用（实测，微信、vscode、cmd
都不行，但是 QQ 可以）无法调用 chrome 打开超链接</p>
<ol type="1">
<li><p>可通过 chrome://version/ 查看命令行中是否含有
<code>--register-pepper-plugins=XXX</code></p>
<figure>
<img data-src="/posts/29e0b18c/chrome_version_before.png" alt="chrome_version_before">
<figcaption aria-hidden="true">chrome_version_before</figcaption>
</figure></li>
<li><p> 根据 XXX 中的路径信息，找到 KGChromePlugin 所在的文件路径，通常是
<code>C:\Program Files (x86)\KGChromePlugin</code>，然后在文件夹中找到卸载程序
<code>KGPMUninstall.exe</code>，双击进行卸载即可</p></li>
<li><p>卸载之后，重启一下
chrome，命令行应该就恢复正常了，此时也能在已打开 chrome
的情况下在第三方应用中顺利打开超链接了</p>
<figure>
<img data-src="/posts/29e0b18c/chrome_version_after.png" alt="chrome_version_after">
<figcaption aria-hidden="true">chrome_version_after</figcaption>
</figure></li>
</ol>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM2Nzg0ODgwNA==">【知乎】chrome
浏览器 每次打开提示：“--no-sandbox.” 怎么去除？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>日常踩坑</category>
      </categories>
      <tags>
        <tag>日常踩坑</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 pip 安装第三方包时因 SSL 报错</title>
    <url>/posts/2e7aa01a.html</url>
    <content><![CDATA[<h2 id="踩坑">踩坑</h2>
<p>好久没用 <code>python</code>，最近重新下载安装好 <code>python</code>
后发现用 <code>pip</code>
安装第三方包一直失败。经过一番折腾发现，如果报错信息符合下面两种，一般都是因为网络连接时
SSL 认证失败导致的 <span id="more"></span></p>
<ol type="1">
<li><p>check_hostname requires server_hostname</p>
<blockquote>
<p><code>raise ValueError("check_hostname requires server_hostname")</code>
<code>ValueError: check_hostname requires server_hostname</code></p>
</blockquote></li>
<li><p>EOF occurred in violation of protocol</p>
<blockquote>
<p><code>Could not fetch URL https://pypi.org/simple/xxx/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/xxx/ (Caused by SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:997)'))) - skipping</code></p>
</blockquote></li>
</ol>
<h2 id="什么是-ssl">什么是 SSL ？</h2>
<p>传输层安全性协议（英语：Transport Layer
Security，TLS）及其前身安全套接层（英语：Secure Sockets
Layer，SSL）是现在的 HTTPS
协议中的一种安全协议，目的是为互联网通信提供安全及数据完整性保障</p>
<p>而较新版本的 <code>python</code> 内置的 <code>pip</code>
以及用于网络请求的 <code>requests</code>、<code>urllib3</code>
包也较新，并且会使用 HTTPS 协议来下载新的软件包</p>
<h2 id="为什么会报错">为什么会报错</h2>
<p>根据报错信息可以发现错误的根源就在于
SSL，也就是没有通过该安全协议的认证，通常是由于开启了网络代理、VPN
或者网络抓包等软件的导致的</p>
<h2 id="解决办法">解决办法</h2>
<h3 id="临时关闭代理vpn-或者网络抓包等软件">1. 临时关闭代理、VPN
或者网络抓包等软件</h3>
<p>最推荐的办法是临时关闭代理、VPN
或者网络抓包等软件，但是如果关闭后下载速度过慢可以尝试后面两种解决办法</p>
<h3 id="通过镜像的-http-源来避免-ssl-认证问题">2. 通过镜像的 HTTP
源来避免 SSL 认证问题</h3>
<p>由于是 SSL 是 HTTPS 协议需要的，因此我们可以切换至 HTTP
的镜像站来进行安装下载</p>
<p>HTTPS 现在已经比较普及，有不少镜像源也早已经切换至 HTTPS
协议，但部分镜像源在支持 HTTPS 协议的而同时也还支持 HTTP
协议，下面简单罗列几个 <code>pip</code> 镜像源</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 清华，仅支持 HTTPS</span></span><br><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里，HTTP 和 HTTPS 均支持</span></span><br><span class="line">http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 豆瓣，HTTP 和 HTTPS 均支持</span></span><br><span class="line">http://pypi.doubanio.com/simple/</span><br><span class="line">https://pypi.doubanio.com/simple/</span><br></pre></td></tr></tbody></table></figure>
<p>安装时第三方包时可以参考如下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install xxx-package -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</span><br><span class="line">pip install xxx-package -i http://pypi.doubanio.com/simple/ --trusted-host pypi.doubanio.com</span><br></pre></td></tr></tbody></table></figure>
<p>如果想永久使用镜像站，则需要修改配置文件，以 Linux 为例：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim ~/.pip/pip.conf</span><br></pre></td></tr></tbody></table></figure>
<p>修改文件内容如下</p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span> = mirrors.aliyun.com</span><br></pre></td></tr></tbody></table></figure>
<h3 id="切换至低版本-pip">3. 切换至低版本 <code>pip</code></h3>
<p>经过测试，当 <code>pip</code> 版本高于 <span class="exturl" data-url="aHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L3BpcC8yMC4zLyNoaXN0b3J5">20.3<i class="fa fa-external-link-alt"></i></span>
后才会出现此错误，因此我们可以手动将 pip 版本降级至 <code>20.2.4</code>
或者 <code>20.3b1</code> 等较低版本即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">python -m pip install pip==20.2.4 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</span><br><span class="line">python -m pip install pip==20.2.4 -i http://pypi.doubanio.com/simple/ --trusted-host pypi.doubanio.com</span><br></pre></td></tr></tbody></table></figure>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvcHlwaQ==">【阿里云】PyPI
镜像<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R6X3pzL2FydGljbGUvZGV0YWlscy84NzkzOTk3Nw==">【CSDN】python
pip 的安装、更新、卸载、降级、和使用 pip 管理包<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lrdW4wODkvYXJ0aWNsZS9kZXRhaWxzLzEwNjA1Nzk1Mg==">【CSDN】修改
pip 配置文件路径、更改 pip 源、使用 pip 安装已经下载的 whl 文件<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>日常踩坑</category>
      </categories>
      <tags>
        <tag>日常踩坑</tag>
        <tag>pip</tag>
        <tag>python</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 平台最强播放器组合 —— Potplayer + LAV Filters + madVR + xy-SubFilter</title>
    <url>/posts/3b7ae835.html</url>
    <content><![CDATA[<p>本文主要来源于 VCB-Studio 官网的 <span class="exturl" data-url="aHR0cHM6Ly92Y2Itcy5jb20vYXJjaGl2ZXMvNzIyOA==">科普教程<i class="fa fa-external-link-alt"></i></span>，个人重新梳理进行备份
<span id="more"></span></p>
<h2 id="安装程序">安装程序</h2>
<p>1、安装 <span class="exturl" data-url="aHR0cHM6Ly9wb3RwbGF5ZXIuZGF1bS5uZXQv">PotPlayer<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05ldmNhaXJpZWwvTEFWRmlsdGVycy9yZWxlYXNlcw==">LAV
Filters<i class="fa fa-external-link-alt"></i></span></p>
<p>二者都是普通的 <code>exe</code>
安装包，双击启动安装即可，安装过程中可以全默认</p>
<p>2、安装 <span class="exturl" data-url="aHR0cDovL21hZHZyLmNvbS8=">madVR<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0N5YmVyYmVpbmcveHktVlNGaWx0ZXIvcmVsZWFzZXM=">xy-SubFilter<i class="fa fa-external-link-alt"></i></span></p>
<p>二者都是插件，推荐将其解压到单独的文件夹中，然后移动至 Potplayer
目录下，最后以管理员权限运行其中的安装脚本 <code>install.bat</code></p>
<h2 id="显卡驱动配置">显卡驱动配置</h2>
<p>首先解锁显卡驱动上的色彩管理范围和显示器输出配置，打开【NVIDIA
控制面板】，参考下图进行配置</p>
<figure>
<img data-src="/posts/3b7ae835/动态范围.png" alt="动态范围">
<figcaption aria-hidden="true">动态范围</figcaption>
</figure>
<figure>
<img data-src="/posts/3b7ae835/显示器设置.png" alt="显示器设置">
<figcaption aria-hidden="true">显示器设置</figcaption>
</figure>
<p>其他显卡配置类似，这里略去</p>
<h2 id="配置-potplayer">配置 Potplayer</h2>
<p>首先我们来看一下最终目标，用 PotPlayer 随便打开一个视频，按一下 Tab
键，即可调出 Potplayer 自带的 OSD
菜单，红框中的内容是配置完成后的最佳配置</p>
<figure>
<img data-src="/posts/3b7ae835/最终目标.png" alt="最终目标">
<figcaption aria-hidden="true">最终目标</figcaption>
</figure>
<p>下面我们一步一步进行配置</p>
<h3 id="关闭-potplayer-内置滤镜">关闭 Potplayer 内置滤镜</h3>
<p>在播放视频（暂停也可以）时 <code>右键-选项</code>，或者直接
<code>F5</code> 快捷键，进入 <code>选项</code> 菜单</p>
<p>切至 <code>滤镜</code> 选项卡，关闭 Pot 内置滤镜</p>
<figure>
<img data-src="/posts/3b7ae835/关闭内置滤镜.png" alt="关闭内置滤镜">
<figcaption aria-hidden="true">关闭内置滤镜</figcaption>
</figure>
<h3 id="添加-lav-滤镜解码器">添加 LAV 滤镜 / 解码器</h3>
<p>切至 <code>滤镜-源滤镜/分离器</code> 选项卡，点击
<code>滤镜/解码器管理</code></p>
<figure>
<img data-src="/posts/3b7ae835/添加%20LAV%20滤镜、解码器-1.png" alt="添加 LAV 滤镜、解码器-1">
<figcaption aria-hidden="true">添加 LAV 滤镜、解码器 - 1</figcaption>
</figure>
<p>在新窗口中，点击 <code>搜索后添加</code> 后确认 LAV
的相关滤镜、解码器已被勾选，然后点击 <code>确定</code></p>
<figure>
<img data-src="/posts/3b7ae835/添加%20LAV%20滤镜、解码器-2.png" alt="添加 LAV 滤镜、解码器-2">
<figcaption aria-hidden="true">添加 LAV 滤镜、解码器 - 2</figcaption>
</figure>
<h3 id="分离器">分离器</h3>
<p>切至 <code>滤镜-源滤镜/分离器</code> 选项卡 ，将右侧的所有选项都换成
LAV Splitter Source，无法切换的就保持原状，列表较长，记得滚轮翻页</p>
<figure>
<img data-src="/posts/3b7ae835/配置分离器.png" alt="配置分离器">
<figcaption aria-hidden="true">配置分离器</figcaption>
</figure>
<h3 id="视频解码器">视频解码器</h3>
<p>切至 <code>滤镜-视频解码器</code> 选项卡，将右侧的所有选项都换成 LAV
Video Decoder，无法切换为 LAV 的就保持原状，列表较长，记得滚轮翻页</p>
<figure>
<img data-src="/posts/3b7ae835/配置视频解码器.png" alt="配置视频解码器">
<figcaption aria-hidden="true">配置视频解码器</figcaption>
</figure>
<h3 id="视频渲染器">视频渲染器</h3>
<p>切至 <code>视频</code> 选项卡，设置视频渲染方式，选择
<code>Madshi 视频渲染</code>，也就是 madVR</p>
<figure>
<img data-src="/posts/3b7ae835/配置视频渲染器.png" alt="配置视频渲染器">
<figcaption aria-hidden="true">配置视频渲染器</figcaption>
</figure>
<h3 id="音频解码器">音频解码器</h3>
<p>切至 <code>滤镜-音频解码器</code> 选项卡 ，将右侧的所有选项都换成 LAV
Audio Decoder，无法切换的就保持原状，列表较长，记得滚轮翻页</p>
<figure>
<img data-src="/posts/3b7ae835/配置音频解码器.png" alt="配置音频解码器">
<figcaption aria-hidden="true">配置音频解码器</figcaption>
</figure>
<h3 id="音频渲染器">音频渲染器</h3>
<p>切至 <code>声音</code> 选项卡，设置音频渲染方式，选择
<code>内置 WSAPI 音频渲染器</code></p>
<figure>
<img data-src="/posts/3b7ae835/配置音频渲染器.png" alt="配置音频渲染器">
<figcaption aria-hidden="true">配置音频渲染器</figcaption>
</figure>
<h3 id="其他">其他</h3>
<h4 id="调教进度条">调教进度条</h4>
<p>切至 <code>播放</code>
选项卡，开始调教进度条，将进度条的相关配置全开启</p>
<figure>
<img data-src="/posts/3b7ae835/调教进度条.png" alt="调教进度条">
<figcaption aria-hidden="true">调教进度条</figcaption>
</figure>
<h4 id="关闭音频规格化">关闭音频规格化</h4>
<p>切至 <code>声音-规格化/混响</code> 选项卡，关闭音频规格化，避免
potplayer 乱改音量</p>
<figure>
<img data-src="/posts/3b7ae835/关闭音频规格化.png" alt="关闭音频规格化">
<figcaption aria-hidden="true">关闭音频规格化</figcaption>
</figure>
<h4 id="启用-xy-subfilter">启用 xy-SubFilter</h4>
<p>切至 <code>滤镜-个人滤镜优先权</code> 选项卡，点击
<code>添加系统滤镜</code></p>
<figure>
<img data-src="/posts/3b7ae835/添加字幕滤镜-1.png" alt="添加字幕滤镜-1">
<figcaption aria-hidden="true">添加字幕滤镜 - 1</figcaption>
</figure>
<p>在新窗口中，选中 xy-SubFilter 的相关滤镜，然后点击
<code>确定</code></p>
<figure>
<img data-src="/posts/3b7ae835/添加字幕滤镜-2.png" alt="添加字幕滤镜-2">
<figcaption aria-hidden="true">添加字幕滤镜 - 2</figcaption>
</figure>
<p>优先级设置上，将 XySubFilterAutoLoader 设为强制使用，负责外挂字幕；
XySubFilter 设为按优先级使用，负责内挂字幕</p>
<figure>
<img data-src="/posts/3b7ae835/配置字幕滤镜.png" alt="配置字幕滤镜">
<figcaption aria-hidden="true">配置字幕滤镜</figcaption>
</figure>
<p>所有配置完成后记得点击 <code>应用</code> 和 <code>确定</code>
按钮保存当前配置</p>
<h2 id="配置-lav-filters">配置 LAV Filters</h2>
<p>在播放视频（暂停也可以）时 <code>右键-属性</code>，或者直接
<code>Ctrl+F1</code> 快捷键，进入 <code>属性</code> 菜单</p>
<p>点击红色框就能进入视频 / 音频解码器设置界面</p>
<figure>
<img data-src="/posts/3b7ae835/属性界面.png" alt="属性界面">
<figcaption aria-hidden="true">属性界面</figcaption>
</figure>
<h3 id="lav-视频解码器">LAV 视频解码器</h3>
<p>视频解码器保持 LAV 默认设置即可，也就是勾选除了 <code>AYUV</code>
以外的所有选项；<code>RGB Output Level</code> 选
<code>PC</code>；<code>Dither Mode</code> 选
<code>Random</code>；<code>Hardware Decoder to use</code> 选
<code>None</code></p>
<figure>
<img data-src="/posts/3b7ae835/LAV%20视频解码器.png" alt="LAV 视频解码器">
<figcaption aria-hidden="true">LAV 视频解码器</figcaption>
</figure>
<h3 id="lav-音频解码器">LAV 音频解码器</h3>
<p>在音频解码器中，切换至 <code>Mixing</code> 标签，勾上
<code>Enable Mixing</code> 即可</p>
<figure>
<img data-src="/posts/3b7ae835/LAV%20音频解码器.png" alt="LAV 音频解码器">
<figcaption aria-hidden="true">LAV 音频解码器</figcaption>
</figure>
<h2 id="配置-madvr">配置 madVR</h2>
<p>madVR 个人没有折腾，直接用默认配置</p>
<h2 id="使用-xy-subfilter">使用 xy-SubFilter</h2>
<p>由于 Potplayer 内置了字幕插件，加上我们选择 xy-SubFilter
来处理字幕，所以需要关闭 Potplayer
内置字幕插件，否则就会出现两行字幕</p>
<p>可以通过快捷键 <code>ALt+H</code> 快速开关内置字幕</p>
<p>而 xy-SubFilter
的字幕选择和开关则需要要在桌面右下角小图标右键进行切换</p>
<h2 id="其他问题">其他问题</h2>
<h3 id="倍数播放字幕异常">倍数播放字幕异常</h3>
<p>通过 <code>x</code>、<code>c</code>
快捷键调整倍数播放之后发现，字幕显示速度没变，经过一番搜索在 Anime
字幕论坛的 <span class="exturl" data-url="aHR0cHM6Ly9iYnMuYWNncmlwLmNvbS90aHJlYWQtNTg0Mi0yLTEuaHRtbA==">一篇帖子<i class="fa fa-external-link-alt"></i></span>
里面找到了解决办法：直接 <code>Shift+X</code> 开关声音处理滤镜即可</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9wb3RwbGF5ZXIuZGF1bS5uZXQv">【PotPlayer 官网】<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05ldmNhaXJpZWwvTEFWRmlsdGVycy9yZWxlYXNlcw==">【GitHub】LAV
Filters<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL21hZHZyLmNvbS8=">【madVR 官网】<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0N5YmVyYmVpbmcveHktVlNGaWx0ZXIvcmVsZWFzZXM=">【GitHub】xy-SubFilter<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly92Y2Itcy5jb20vYXJjaGl2ZXMvNzIyOA==">【VCB-Studio
官网】科普教程 2.2—— 基于 PotPlayer 和 madVR 的播放器教程（已更新
XySubFilter）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9iYnMuYWNncmlwLmNvbS90aHJlYWQtNTg0Mi0yLTEuaHRtbA==">【Anime
字幕论坛】倍速播放<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hY2VjbGVlLmFydC9hcmNoaXZlcy8zMzE=">【个人博客】视频播放器使用教程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>软件配置</category>
      </categories>
      <tags>
        <tag>Potplayer</tag>
      </tags>
  </entry>
  <entry>
    <title>从 SSLEOFError 到正确配置 Proxy</title>
    <url>/posts/76f6af57.html</url>
    <content><![CDATA[<p>本文主要参考 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGF2eXl5L3AvMTQzODg2MjMuaHRtbA==">Python 遭遇
ProxyError 问题记录<i class="fa fa-external-link-alt"></i></span> 重新梳理改写</p>
<h2 id="踩坑">踩坑</h2>
<p>在前几天搞定 <code>pip</code> 的 SSL 认证之后，结果在利用
<code>requests</code> 库请求 HTTPS 网站又出现了
<code>SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:1129)'))</code>
的 SSL 相关错误</p>
<p>经过一系列的查询资料和测试发现，原因竟然在于 <code>python</code>
自身的 <code>urllib</code> 库没有正确配置 HTTPS 代理 <span id="more"></span></p>
<h2 id="代理服务器">代理服务器</h2>
<h3 id="普通的代理服务器">普通的代理服务器</h3>
<figure>
<img data-src="/posts/76f6af57/Proxy_Server.png" alt="Proxy_Server">
<figcaption aria-hidden="true">Proxy_Server</figcaption>
</figure>
<p>上面提及的 HTTP (S) 代理，其实是通过代理服务器进行 HTTP (S)
流量的转发的意思，也是在上图中的 <em>黄线</em> 所代表的协议，文中后续用
<u>出口协议</u> 来指代</p>
<p>而和代理服务器之间其实也需要一种协议进行通信，就是在上图中的
<em>绿线</em> 部分，文中后续用 <u>入口协议</u> 来指代</p>
<p>而 <u>入口协议</u> <strong>通常使用较多的都是 HTTP 和
Socks4/Socks5，很少有采用 HTTPS
作为与代理服务器间的连接协议</strong>，这点也是<strong>导致之前报错的主要原因</strong></p>
<h3 id="科学上网工具">科学上网工具</h3>
<p>其实代理服务器和 SS、SSR、V2Ray、Clash
等科学上网代理工具都是同一种性质，主要的不同点在于与实际代理服务器之间的
<u>入口协议</u> 部分（例如 Shadowsocks、VMess、Trojan 等）。为了不被 GFW
发现，需要实现对流量的混淆加密等。而且通常为了兼容性等因素，大多数科学上网工具在与实际代理服务器之间还有一级本地的代理服务器</p>
<figure>
<img data-src="/posts/76f6af57/Fuck_GFW.png" alt="Fuck_GFW">
<figcaption aria-hidden="true">Fuck_GFW</figcaption>
</figure>
<p>科学上网工具的特殊协议只是在上图中的只有红线部分使用，而整个蓝色框的部分就是科学上网工具，用户并不需要关心这些特殊协议，只需要通过与通常代理服务器一样的
<em>绿线</em> 的 <u>入口协议</u> 来进行连接即可</p>
<h3 id="代理配置">代理配置</h3>
<p>因此 <u>入口协议</u> 和 <u>出口协议</u> 之间其实没有任何因果联系，以
<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZuZHJvaWQvY2xhc2hfZm9yX3dpbmRvd3NfcGtn">Clash for
Windows, CFW<i class="fa fa-external-link-alt"></i></span> 为例</p>
<figure>
<img data-src="/posts/76f6af57/Clash_for_Windows_Local_Proxy.png" alt="Clash_for_Windows_Local_Proxy">
<figcaption aria-hidden="true">Clash_for_Windows_Local_Proxy</figcaption>
</figure>
<p>它的 <u>入口协议</u> 支持 http 以及
socks，而且都在同一个端口，因此正确的代理配置应该是这样的：</p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 正确的配置方式</span></span><br><span class="line"><span class="attr">HTTP_PROXY</span>=http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line"><span class="attr">HTTPS_PROXY</span>=http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br></pre></td></tr></tbody></table></figure>
<p>或者</p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 正确的配置方式</span></span><br><span class="line"><span class="attr">HTTP_PROXY</span>=socks5://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line"><span class="attr">HTTPS_PROXY</span>=socks5://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>重点：</strong></p>
<p><code>HTTPS_PROXY</code> 也应该填写
<code>http://127.0.0.1:7890</code>，因为 <code>HTTPS_PROXY</code> 中
<code>HTTPS</code> 代表的是 <u>出口协议</u>，而
<code>http://127.0.0.1:7890</code> 代表和 <code>127.0.0.1:7890</code>
服务器之间的 <u>入口协议</u> 是 <code>HTTP</code></p>
<h2 id="追根溯源">追根溯源</h2>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 错误的配置方式</span></span><br><span class="line"><span class="attr">HTTP_PROXY</span>=http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line"><span class="attr">HTTPS_PROXY</span>=https://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br></pre></td></tr></tbody></table></figure>
<p>而之前一直采用的上述错误配置，则会因为旧版本的 <code>python</code> 的
<code>pip</code> 内含的 <code>urllib3</code> 不支持 HTTPS 的
<u>入口协议</u> ，自动转换成了 HTTP 的 <u>入口协议</u> 进行连接了</p>
<h3 id="urllib3">urllib3</h3>
<p>但是在 <code>urllib3</code> 库升级到 v1.26.0 版本之后，增加了对 HTTPS
的 <u>入口协议</u> 的支持，参见 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VybGxpYjMvdXJsbGliMy9jb21taXQvOGM3YTQzYjRhNGNhMGM4ZDM2ZDU1ZjEzMmRhYTJhNDNkMDZmZTNjNA==">Add
support for HTTPS connections to proxies.<i class="fa fa-external-link-alt"></i></span></p>
<figure>
<img data-src="/posts/76f6af57/Urllib3_Support_HTTPS.png" alt="Urllib3_Support_HTTPS">
<figcaption aria-hidden="true">Urllib3_Support_HTTPS</figcaption>
</figure>
<h3 id="pip">pip</h3>
<p><code>pip</code> 内置了的 <code>requests</code> 和
<code>urllib3</code> 包，而不依赖全局的 <code>requests</code> 和
<code>urllib3</code> 包</p>
<p>当 <code>pip</code> 版本高于 <span class="exturl" data-url="aHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L3BpcC8yMC4zLyNoaXN0b3J5">20.3<i class="fa fa-external-link-alt"></i></span> 时，内置的
<code>requests</code> 包升级到了 v2.25.0，<code>urllib3</code>
包也升级到了 v1.26.2，也就是说开始支持 HTTPS 的 <u>入口协议</u> 了，参见
<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B5cGEvcGlwL2Jsb2IvYzMxYzE0OGE1YjFkODc1OTE4NjJjNzE1YWRjN2E3ZTVmMzI0MmZiYS9ORVdTLnJzdCN2ZW5kb3JlZC1saWJyYXJpZXM=">pypa/pip
20.3 (2020-11-30) NEWS.rst<i class="fa fa-external-link-alt"></i></span></p>
<figure>
<img data-src="/posts/76f6af57/Pip_Support_HTTPS.png" alt="Pip_Support_HTTPS">
<figcaption aria-hidden="true">Pip_Support_HTTPS</figcaption>
</figure>
<h3 id="万恶之源-urllib">万恶之源 urllib</h3>
<p>但是其实他们都不是罪魁祸首，真正的原因其实在 python 的内置包
<code>urllib</code> 上</p>
<p>一般 <code>CFW</code> 等科学上网软件都会通过修改 Windows 注册表的
<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings</code>
目录下的 <code>ProxyServer</code> 来配置代理服务器地址端口以及
<code>ProxyEnable</code> 是否启用代理</p>
<figure>
<img data-src="/posts/76f6af57/Win11_Reg.png" alt="Win11_Reg">
<figcaption aria-hidden="true">Win11_Reg</figcaption>
</figure>
<p><code>CFW</code> 在配置代理服务器时，仅仅给出了地址和端口，并没有给出
<u>入口协议</u></p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># urllib 配置代理的源码摘录：</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'='</span> <span class="keyword">in</span> proxyServer:</span><br><span class="line">    <span class="comment"># Per-protocol settings</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> proxyServer.split(<span class="string">';'</span>):</span><br><span class="line">        protocol, address = p.split(<span class="string">'='</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># See if address has a type:// prefix</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">'(?:[^/:]+)://'</span>, address):</span><br><span class="line">            address = <span class="string">'%s://%s'</span> % (protocol, address)</span><br><span class="line">        proxies[protocol] = address</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># Use one setting for all protocols</span></span><br><span class="line">    <span class="keyword">if</span> proxyServer[:<span class="number">5</span>] == <span class="string">'http:'</span>:</span><br><span class="line">        proxies[<span class="string">'http'</span>] = proxyServer</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        proxies[<span class="string">'http'</span>] = <span class="string">'http://%s'</span> % proxyServer</span><br><span class="line">        proxies[<span class="string">'https'</span>] = <span class="string">'https://%s'</span> % proxyServer</span><br><span class="line">        proxies[<span class="string">'ftp'</span>] = <span class="string">'ftp://%s'</span> % proxyServer</span><br></pre></td></tr></tbody></table></figure>
<p>按照上面给出的 <code>urllib</code> 库源码逻辑，会将代理配置为</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line">proxies = {</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://127.0.0.1:7890'</span>,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://127.0.0.1:7890'</span>,</span><br><span class="line">    <span class="string">'ftp'</span>: <span class="string">'ftp://127.0.0.1:7890'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>因此导致了 <code>pip</code>、<code>requests</code> 等上层包，访问
HTTPS 网站时会错误的使用 <code>https://127.0.0.1:7890</code> 代理，而
<code>CFW</code> 根本不支持 HTTPS 的
<u>入口协议</u>，所以才会产生这么一系列的错误</p>
<p>个人推荐可以根据自己常用的科学上网工具所支持的 <u>入口协议</u> 来修改
<code>urllib</code> 库源码逻辑（文件位置一般在
<code>***/python3.*/urllib/request.py</code> 或者
<code>***/anaconda3/Lib/urllib/request.py</code>）</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">'='</span> <span class="keyword">in</span> proxyServer:</span><br><span class="line">    <span class="comment"># Per-protocol settings</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> proxyServer.split(<span class="string">';'</span>):</span><br><span class="line">        protocol, address = p.split(<span class="string">'='</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># See if address has a type:// prefix</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">'(?:[^/:]+)://'</span>, address):</span><br><span class="line">            address = <span class="string">'%s://%s'</span> % (protocol, address)</span><br><span class="line">        proxies[protocol] = address</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># Use one setting for all protocols</span></span><br><span class="line">    proxies[<span class="string">'http'</span>] = <span class="string">'http://%s'</span> % proxyServer</span><br><span class="line">    proxies[<span class="string">'https'</span>] = <span class="string">'http://%s'</span> % proxyServer</span><br><span class="line">    proxies[<span class="string">'ftp'</span>] = <span class="string">'http://%s'</span> % proxyServer</span><br></pre></td></tr></tbody></table></figure>
<p>或者简单的按照下面的方式进行修改（并不一定适用所有情况）</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">'='</span> <span class="keyword">in</span> proxyServer:</span><br><span class="line">    <span class="comment"># Per-protocol settings</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> proxyServer.split(<span class="string">';'</span>):</span><br><span class="line">        protocol, address = p.split(<span class="string">'='</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># See if address has a type:// prefix</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">'(?:[^/:]+)://'</span>, address):</span><br><span class="line">            address = <span class="string">'%s://%s'</span> % (protocol, address)</span><br><span class="line">        proxies[protocol] = address</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># Use one setting for all protocols</span></span><br><span class="line">    proxies[<span class="string">'http'</span>] = proxyServer</span><br><span class="line">    proxies[<span class="string">'https'</span>] = proxyServer</span><br><span class="line">    proxies[<span class="string">'ftp'</span>] = proxyServer</span><br></pre></td></tr></tbody></table></figure>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGF2eXl5L3AvMTQzODg2MjMuaHRtbA==">【博客园】Python
遭遇 ProxyError 问题记录<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJCJUEzJUU3JTkwJTg2JUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4">【维基百科】代理服务器<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZuZHJvaWQvY2xhc2hfZm9yX3dpbmRvd3NfcGtnL2lzc3Vlcy8zMTI=">【GitHub】Fndroid/clash_for_windows_pkg
系统代理自动关闭或打开<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B5cGEvcGlwL2lzc3Vlcy85MjE2I2lzc3VlY29tbWVudC03NDE4MzYwNTg=">【GitHub】pypa/pip
Pip 20.3+ break proxy connection<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VybGxpYjMvdXJsbGliMy9jb21taXQvOGM3YTQzYjRhNGNhMGM4ZDM2ZDU1ZjEzMmRhYTJhNDNkMDZmZTNjNA==">【GitHub】urllib3/urllib3
Add support for HTTPS connections to proxies.<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B5cGEvcGlwL2Jsb2IvYzMxYzE0OGE1YjFkODc1OTE4NjJjNzE1YWRjN2E3ZTVmMzI0MmZiYS9ORVdTLnJzdCN2ZW5kb3JlZC1saWJyYXJpZXM=">【GitHub】pypa/pip
20.3 (2020-11-30) NEWS.rst<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>日常踩坑</category>
      </categories>
      <tags>
        <tag>日常踩坑</tag>
        <tag>python</tag>
        <tag>SSL</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>io_uring 内核源码分析</title>
    <url>/posts/4f0d345c.html</url>
    <content><![CDATA[<p>当前内容基于 Linux Kernel <span class="exturl" data-url="aHR0cHM6Ly9naXQua2VybmVsLm9yZy9wdWIvc2NtL2xpbnV4L2tlcm5lbC9naXQvc3RhYmxlL2xpbnV4LmdpdC90YWcvP2g9djUuNC4xMjE=">v5.4.121<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="io_uring">1. <code>io_uring</code></h2>
<p><a href="/posts/c142853f.html#系统调用">之前</a> 介绍过 io_uring
只增加了三个 Linux 系统调用分别是
<code>io_uring_setup</code>，<code>io_uring_enter</code> 和
<code>io_uring_register</code></p>
<p>他们的入口都在 Linux 内核源码的 <code>fs/io_uring.c</code>
文件中，下面将逐个分析 <span id="more"></span></p>
<h2 id="系统调用-io_uring_setup">2. 系统调用
<code>io_uring_setup</code></h2>
<p><code>io_uring_setup</code> 的作用在 <a href="/posts/d7259d1d.html#io-uring-queue-init">用户库源码分析</a>
中有过介绍，主要是初始化初始化 <code>io_uring</code> 结构体</p>
<h3 id="io_uring_setup">2.1. <code>io_uring_setup</code></h3>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Sets up an aio uring context, and returns the fd. Applications asks for a</span></span><br><span class="line"><span class="comment"> * ring size, we return the actual sq/cq ring sizes (among other things) in the</span></span><br><span class="line"><span class="comment"> * params structure passed in.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">io_uring_setup</span><span class="params">(u32 entries, <span class="keyword">struct</span> io_uring_params __user *params)</span></span><br><span class="line">{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">p</span>;</span></span><br><span class="line">	<span class="type">long</span> ret;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 用户态拷贝到内核态</span></span><br><span class="line">	<span class="keyword">if</span> (copy_from_user(&amp;p, params, <span class="keyword">sizeof</span>(p)))</span><br><span class="line">		<span class="keyword">return</span> -EFAULT;</span><br><span class="line">	<span class="comment">// 确认保留区域没有被赋值</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(p.resv); i++) {</span><br><span class="line">		<span class="keyword">if</span> (p.resv[i])</span><br><span class="line">			<span class="keyword">return</span> -EINVAL;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检查 flags 参数</span></span><br><span class="line">	<span class="keyword">if</span> (p.flags &amp; ~(IORING_SETUP_IOPOLL | IORING_SETUP_SQPOLL |</span><br><span class="line">			IORING_SETUP_SQ_AFF))</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 分配内存空间，创建 workqueue，创建 fd 等</span></span><br><span class="line">	ret = io_uring_create(entries, &amp;p);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 内核态拷贝回用户态</span></span><br><span class="line">	<span class="keyword">if</span> (copy_to_user(params, &amp;p, <span class="keyword">sizeof</span>(p)))</span><br><span class="line">		<span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">SYSCALL_DEFINE2(io_uring_setup, u32, entries,</span><br><span class="line">		<span class="keyword">struct</span> io_uring_params __user *, params)</span><br><span class="line">{</span><br><span class="line">	<span class="keyword">return</span> io_uring_setup(entries, params);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>可以看到 <code>io_uring_setup</code> 的核心函数是
<code>io_uring_create</code></p>
<h3 id="io_uring_create">2.2. <code>io_uring_create</code></h3>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_uring_create</span><span class="params">(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring_params *p)</span></span><br><span class="line">{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line">	<span class="type">bool</span> account_mem;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!entries || entries &gt; IORING_MAX_ENTRIES)</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Use twice as many entries for the CQ ring. It's possible for the</span></span><br><span class="line"><span class="comment">	 * application to drive a higher depth than the size of the SQ ring,</span></span><br><span class="line"><span class="comment">	 * since the sqes are only used at submission time. This allows for</span></span><br><span class="line"><span class="comment">	 * some flexibility in overcommitting a bit.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	p-&gt;sq_entries = roundup_pow_of_two(entries);</span><br><span class="line">	p-&gt;cq_entries = <span class="number">2</span> * p-&gt;sq_entries;</span><br><span class="line"></span><br><span class="line">	user = get_uid(current_user());</span><br><span class="line">	<span class="comment">// 允许对共享内存段进行锁定</span></span><br><span class="line">	account_mem = !capable(CAP_IPC_LOCK);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (account_mem) {</span><br><span class="line">		<span class="comment">// 不能对共享内存段进行锁定，就需要增加当前可以锁定的内存</span></span><br><span class="line">		ret = io_account_mem(user,</span><br><span class="line">				ring_pages(p-&gt;sq_entries, p-&gt;cq_entries));</span><br><span class="line">		<span class="keyword">if</span> (ret) {</span><br><span class="line">			free_uid(user);</span><br><span class="line">			<span class="keyword">return</span> ret;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	ctx = io_ring_ctx_alloc(p);</span><br><span class="line">	<span class="keyword">if</span> (!ctx) {</span><br><span class="line">		<span class="keyword">if</span> (account_mem)</span><br><span class="line">			io_unaccount_mem(user, ring_pages(p-&gt;sq_entries,</span><br><span class="line">								p-&gt;cq_entries));</span><br><span class="line">		free_uid(user);</span><br><span class="line">		<span class="keyword">return</span> -ENOMEM;</span><br><span class="line">	}</span><br><span class="line">	ctx-&gt;compat = in_compat_syscall();</span><br><span class="line">	ctx-&gt;account_mem = account_mem;</span><br><span class="line">	ctx-&gt;user = user;</span><br><span class="line"></span><br><span class="line">	ctx-&gt;creds = get_current_cred();</span><br><span class="line">	<span class="keyword">if</span> (!ctx-&gt;creds) {</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 申请 io_rings SQEs</span></span><br><span class="line">	ret = io_allocate_scq_urings(ctx, p);</span><br><span class="line">	<span class="keyword">if</span> (ret)</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化 workqueue，[初始化内核线程用于进行 IO poll]</span></span><br><span class="line">	ret = io_sq_offload_start(ctx, p);</span><br><span class="line">	<span class="keyword">if</span> (ret)</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(&amp;p-&gt;sq_off, <span class="number">0</span>, <span class="keyword">sizeof</span>(p-&gt;sq_off));</span><br><span class="line">	p-&gt;sq_off.head = offsetof(<span class="keyword">struct</span> io_rings, sq.head);</span><br><span class="line">	p-&gt;sq_off.tail = offsetof(<span class="keyword">struct</span> io_rings, sq.tail);</span><br><span class="line">	p-&gt;sq_off.ring_mask = offsetof(<span class="keyword">struct</span> io_rings, sq_ring_mask);</span><br><span class="line">	p-&gt;sq_off.ring_entries = offsetof(<span class="keyword">struct</span> io_rings, sq_ring_entries);</span><br><span class="line">	p-&gt;sq_off.flags = offsetof(<span class="keyword">struct</span> io_rings, sq_flags);</span><br><span class="line">	p-&gt;sq_off.dropped = offsetof(<span class="keyword">struct</span> io_rings, sq_dropped);</span><br><span class="line">	p-&gt;sq_off.<span class="built_in">array</span> = (<span class="type">char</span> *)ctx-&gt;sq_array - (<span class="type">char</span> *)ctx-&gt;rings;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(&amp;p-&gt;cq_off, <span class="number">0</span>, <span class="keyword">sizeof</span>(p-&gt;cq_off));</span><br><span class="line">	p-&gt;cq_off.head = offsetof(<span class="keyword">struct</span> io_rings, cq.head);</span><br><span class="line">	p-&gt;cq_off.tail = offsetof(<span class="keyword">struct</span> io_rings, cq.tail);</span><br><span class="line">	p-&gt;cq_off.ring_mask = offsetof(<span class="keyword">struct</span> io_rings, cq_ring_mask);</span><br><span class="line">	p-&gt;cq_off.ring_entries = offsetof(<span class="keyword">struct</span> io_rings, cq_ring_entries);</span><br><span class="line">	p-&gt;cq_off.overflow = offsetof(<span class="keyword">struct</span> io_rings, cq_overflow);</span><br><span class="line">	p-&gt;cq_off.cqes = offsetof(<span class="keyword">struct</span> io_rings, cqes);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Install ring fd as the very last thing, so we don't risk someone</span></span><br><span class="line"><span class="comment">	 * having closed it before we finish setup</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">// 创建 fd 便于用户态访问 ctx</span></span><br><span class="line">	ret = io_uring_get_fd(ctx);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">	p-&gt;features = IORING_FEAT_SINGLE_MMAP;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">err:</span><br><span class="line">	io_ring_ctx_wait_and_kill(ctx);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<pre class="mermaid">graph TD
io_uring_setup --&gt; io_ring_ctx_alloc
io_uring_setup --&gt; io_allocate_scq_urings
io_uring_setup --&gt; io_sq_offload_start
io_uring_setup --&gt; io_uring_get_fd</pre>
<ol type="1">
<li><p><code>io_ring_ctx_alloc</code>
主要用来申请空间，初始化列表头、互斥锁、自旋锁等结构</p></li>
<li><p><code>io_allocate_scq_urings</code> 来初始化整个
<code>struct io_rings *rings</code>，包括
<code>SQ</code>、<code>CQ</code> 头尾指针的初始化，以及
<code>SQE</code>、<code>CQE</code> 的初始化</p>
<ul>
<li>不同的是 <code>SQ</code>、<code>CQ</code> 头尾指针以及
<code>CQE</code> 都在 <code>struct io_rings *rings</code> 结构体中</li>
<li>而 <code>SQE</code> 则是在 <code>struct io_ring_ctx *ctx</code>
结构体中</li>
</ul></li>
<li><p><code>io_sq_offload_start</code> 会根据用户通过
<code>io_uring_setup</code> 传递的 <code>flags</code> 来配置
<code>io_uring</code> 的运行方式，后续详细展开</p></li>
<li><p><code>io_uring_get_fd</code> 将
<code>struct io_ring_ctx *ctx</code> 暴露给用户态访问</p></li>
</ol>
<h3 id="io_sq_offload_start">2.3. <code>io_sq_offload_start</code></h3>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_sq_offload_start</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx,</span></span><br><span class="line"><span class="params">			       <span class="keyword">struct</span> io_uring_params *p)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">	mmgrab(current-&gt;mm);</span><br><span class="line">	ctx-&gt;sqo_mm = current-&gt;mm;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SQPOLL) {</span><br><span class="line">		<span class="comment">// IORING_SETUP_SQPOLL 将会创建一个内核线程来 poll SQ</span></span><br><span class="line">		ret = -EPERM;</span><br><span class="line">		<span class="keyword">if</span> (!capable(CAP_SYS_ADMIN))</span><br><span class="line">			<span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">		ctx-&gt;sq_thread_idle = msecs_to_jiffies(p-&gt;sq_thread_idle);</span><br><span class="line">		<span class="keyword">if</span> (!ctx-&gt;sq_thread_idle)</span><br><span class="line">			ctx-&gt;sq_thread_idle = HZ;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_SQ_AFF) {</span><br><span class="line">			<span class="type">int</span> cpu = p-&gt;sq_thread_cpu;</span><br><span class="line"></span><br><span class="line">			ret = -EINVAL;</span><br><span class="line">			<span class="keyword">if</span> (cpu &gt;= nr_cpu_ids)</span><br><span class="line">				<span class="keyword">goto</span> err;</span><br><span class="line">			<span class="keyword">if</span> (!cpu_online(cpu))</span><br><span class="line">				<span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">			ctx-&gt;sqo_thread = kthread_create_on_cpu(io_sq_thread,</span><br><span class="line">							ctx, cpu,</span><br><span class="line">							<span class="string">"io_uring-sq"</span>);</span><br><span class="line">		} <span class="keyword">else</span> {</span><br><span class="line">			ctx-&gt;sqo_thread = kthread_create(io_sq_thread, ctx,</span><br><span class="line">							<span class="string">"io_uring-sq"</span>);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">if</span> (IS_ERR(ctx-&gt;sqo_thread)) {</span><br><span class="line">			ret = PTR_ERR(ctx-&gt;sqo_thread);</span><br><span class="line">			ctx-&gt;sqo_thread = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">goto</span> err;</span><br><span class="line">		}</span><br><span class="line">		wake_up_process(ctx-&gt;sqo_thread);</span><br><span class="line">	} <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_SQ_AFF) {</span><br><span class="line">		<span class="comment">/* Can't have SQ_AFF without SQPOLL */</span></span><br><span class="line">		ret = -EINVAL;</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Do QD, or 2 * CPUS, whatever is smallest */</span></span><br><span class="line">	ctx-&gt;sqo_wq[<span class="number">0</span>] = alloc_workqueue(<span class="string">"io_ring-wq"</span>,</span><br><span class="line">			WQ_UNBOUND | WQ_FREEZABLE,</span><br><span class="line">			min(ctx-&gt;sq_entries - <span class="number">1</span>, <span class="number">2</span> * num_online_cpus()));</span><br><span class="line">	<span class="keyword">if</span> (!ctx-&gt;sqo_wq[<span class="number">0</span>]) {</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * This is for buffered writes, where we want to limit the parallelism</span></span><br><span class="line"><span class="comment">	 * due to file locking in file systems. As "normal" buffered writes</span></span><br><span class="line"><span class="comment">	 * should parellelize on writeout quite nicely, limit us to having 2</span></span><br><span class="line"><span class="comment">	 * pending. This avoids massive contention on the inode when doing</span></span><br><span class="line"><span class="comment">	 * buffered async writes.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">// 对 buffer 写的 workqueue 深度进行限制，减少锁争用开销?</span></span><br><span class="line">	ctx-&gt;sqo_wq[<span class="number">1</span>] = alloc_workqueue(<span class="string">"io_ring-write-wq"</span>,</span><br><span class="line">						WQ_UNBOUND | WQ_FREEZABLE, <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (!ctx-&gt;sqo_wq[<span class="number">1</span>]) {</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">err:</span><br><span class="line">	io_finish_async(ctx);</span><br><span class="line">	mmdrop(ctx-&gt;sqo_mm);</span><br><span class="line">	ctx-&gt;sqo_mm = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>当 <code>flags</code> 中配置了 <code>IORING_SETUP_SQPOLL</code>
时，将启动一个单独的内核线程 <code>io_sq_thread</code>，而当
<code>IORING_SETUP_SQ_AFF</code> 字段也配置时，将根据
<code>sq_thread_cpu</code> 字段，在指定的 CPU 上启用内核线程
<code>io_sq_thread</code></p>
<p>同时该函数还会创建两个工作队列 <code>ctx-&gt;sqo_wq[2]</code>
分别名为 <code>io_ring-wq</code> 和 <code>io_ring-write-wq</code></p>
<ul>
<li><code>io_ring-wq</code> 主要处理读 IO，以及 direct 写 IO</li>
<li><code>io_ring-write-wq</code> 主要是处理 buffer 写 IO</li>
</ul>
<h2 id="系统调用-io_uring_enter">3. 系统调用
<code>io_uring_enter</code></h2>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE6(io_uring_enter, <span class="type">unsigned</span> <span class="type">int</span>, fd, u32, to_submit,</span><br><span class="line">		u32, min_complete, u32, flags, <span class="type">const</span> <span class="type">sigset_t</span> __user *, sig,</span><br><span class="line">		<span class="type">size_t</span>, sigsz)</span><br><span class="line">{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line">	<span class="type">long</span> ret = -EBADF;</span><br><span class="line">	<span class="type">int</span> submitted = <span class="number">0</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (flags &amp; ~(IORING_ENTER_GETEVENTS | IORING_ENTER_SQ_WAKEUP))</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	f = fdget(fd);</span><br><span class="line">	<span class="keyword">if</span> (!f.file)</span><br><span class="line">		<span class="keyword">return</span> -EBADF;</span><br><span class="line"></span><br><span class="line">	ret = -EOPNOTSUPP;</span><br><span class="line">	<span class="keyword">if</span> (f.file-&gt;f_op != &amp;io_uring_fops)</span><br><span class="line">		<span class="keyword">goto</span> out_fput;</span><br><span class="line"></span><br><span class="line">	ret = -ENXIO;</span><br><span class="line">	ctx = f.file-&gt;private_data;</span><br><span class="line">	<span class="keyword">if</span> (!percpu_ref_tryget(&amp;ctx-&gt;refs))</span><br><span class="line">		<span class="keyword">goto</span> out_fput;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * For SQ polling, the thread will do all submissions and completions.</span></span><br><span class="line"><span class="comment">	 * Just return the requested submit count, and wake the thread if</span></span><br><span class="line"><span class="comment">	 * we were asked to.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	ret = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SQPOLL) {</span><br><span class="line">		<span class="keyword">if</span> (flags &amp; IORING_ENTER_SQ_WAKEUP)</span><br><span class="line">			wake_up(&amp;ctx-&gt;sqo_wait);</span><br><span class="line">		submitted = to_submit;</span><br><span class="line">	} <span class="keyword">else</span> <span class="keyword">if</span> (to_submit) {</span><br><span class="line">		to_submit = min(to_submit, ctx-&gt;sq_entries);</span><br><span class="line"></span><br><span class="line">		mutex_lock(&amp;ctx-&gt;uring_lock);</span><br><span class="line">		submitted = io_ring_submit(ctx, to_submit);</span><br><span class="line">		mutex_unlock(&amp;ctx-&gt;uring_lock);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (submitted != to_submit)</span><br><span class="line">			<span class="keyword">goto</span> out;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span> (flags &amp; IORING_ENTER_GETEVENTS) {</span><br><span class="line">		<span class="type">unsigned</span> nr_events = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		min_complete = min(min_complete, ctx-&gt;cq_entries);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_IOPOLL) {</span><br><span class="line">			ret = io_iopoll_check(ctx, &amp;nr_events, min_complete);</span><br><span class="line">		} <span class="keyword">else</span> {</span><br><span class="line">			ret = io_cqring_wait(ctx, min_complete, sig, sigsz);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">	percpu_ref_put(&amp;ctx-&gt;refs);</span><br><span class="line">out_fput:</span><br><span class="line">	fdput(f);</span><br><span class="line">	<span class="keyword">return</span> submitted ? submitted : ret;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>TODO</p>
<h2 id="系统调用-io_uring_register">4. 系统调用
<code>io_uring_register</code></h2>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE4(io_uring_register, <span class="type">unsigned</span> <span class="type">int</span>, fd, <span class="type">unsigned</span> <span class="type">int</span>, opcode,</span><br><span class="line">		<span class="type">void</span> __user *, arg, <span class="type">unsigned</span> <span class="type">int</span>, nr_args)</span><br><span class="line">{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line">	<span class="type">long</span> ret = -EBADF;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>;</span></span><br><span class="line"></span><br><span class="line">	f = fdget(fd);</span><br><span class="line">	<span class="keyword">if</span> (!f.file)</span><br><span class="line">		<span class="keyword">return</span> -EBADF;</span><br><span class="line"></span><br><span class="line">	ret = -EOPNOTSUPP;</span><br><span class="line">	<span class="keyword">if</span> (f.file-&gt;f_op != &amp;io_uring_fops)</span><br><span class="line">		<span class="keyword">goto</span> out_fput;</span><br><span class="line"></span><br><span class="line">	ctx = f.file-&gt;private_data;</span><br><span class="line"></span><br><span class="line">	mutex_lock(&amp;ctx-&gt;uring_lock);</span><br><span class="line">	ret = __io_uring_register(ctx, opcode, arg, nr_args);</span><br><span class="line">	mutex_unlock(&amp;ctx-&gt;uring_lock);</span><br><span class="line">out_fput:</span><br><span class="line">	fdput(f);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>TODO</p>
<h2 id="内核线程-io_sq_thread">5. 内核线程
<code>io_sq_thread</code></h2>
<p>TODO</p>
<h2 id="iopoll-模式">6. <code>IOPOLL</code> 模式</h2>
<h3 id="启用">6.1. 启用</h3>
<p>当 <code>io_uring_setup</code> 初始化时 <code>flags</code> 配置了
<code>IORING_SETUP_IOPOLL</code> 字段后将开启 <code>IOPOLL</code>
模式</p>
<h3 id="限制">6.2. 限制</h3>
<p>开启此选项必须保证后续只用 <code>O_DIRECT</code>
打开文件并且文件系统的 <code>file_operations</code> 中注册了
<code>iopoll</code> 函数，否则 IO 将下发失败</p>
<h3 id="调用栈">6.3. 调用栈</h3>
<p>开启后内核将调用注册的 <code>iopoll</code> 函数来主动轮询设备驱动确认
IO 是否完成</p>
<p>对 <code>f_op-&gt;iopoll</code> 函数调用关系进行了分析</p>
<pre class="mermaid">graph TD
io_uring_create --&gt; io_ring_ctx_wait_and_kill
io_uring_release --&gt; io_ring_ctx_wait_and_kill
io_ring_ctx_wait_and_kill --&gt; io_iopoll_reap_events
io_ring_ctx_wait_and_kill --&gt; io_ring_ctx_free
io_ring_ctx_free --&gt; io_iopoll_reap_events
io_iopoll_reap_events --&gt; io_iopoll_getevents

syscall["SYSCALL_DEFINE6(io_uring_enter, ……)"] --&gt; io_iopoll_check --&gt; io_iopoll_getevents

io_sq_thread --&gt; io_iopoll_getevents

io_iopoll_getevents --&gt; io_do_iopoll --&gt; iopoll["f_op-&gt;iopoll"]</pre>
<p>主要有三条调用路线（所有调用逻辑都会判断是否在初始化时配置了
<code>IORING_SETUP_IOPOLL</code>）：</p>
<ol type="1">
<li><code>io_uring</code> 销毁时需要调用</li>
<li>系统调用 <code>io_uring_enter</code> 将会触发，用于轮询 IO
完成情况，直到到达指定的 <code>wait_nr</code> 数量 IO
完成后才会退出轮询</li>
<li>当初始化时同时配置了 <code>IORING_SETUP_SQPOLL</code>
时，<code>io_sq_thread</code> 内核线程触发，当存在未完成的 IO
时调用，用于更新 IO 完成情况（ <code>io_do_iopoll</code> 的参数
<code>min = 0</code>，即每次调用无论是否有新完成的 IO
都会退出轮询，不会阻塞线程）</li>
</ol>
]]></content>
      <categories>
        <category>存储</category>
        <category>IO</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>异步 IO</tag>
        <tag>kernel</tag>
        <tag>liburing</tag>
        <tag>io_uring</tag>
      </tags>
  </entry>
  <entry>
    <title>io_uring 用户库源码分析</title>
    <url>/posts/d7259d1d.html</url>
    <content><![CDATA[<p>当前内容基于 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F4Ym9lL2xpYnVyaW5nL3JlbGVhc2VzL3RhZy9saWJ1cmluZy0yLjE=">liburing
2.1<i class="fa fa-external-link-alt"></i></span> 版本</p>
<h2 id="整体流程">整体流程</h2>
<p>之前在 <a href="/posts/c142853f.html#代码流程">io_uring
简介和使用</a> 有过总结，使用 io_uring 的一般流程如下：
<span id="more"></span></p>
<ul>
<li>使用 <code>open</code>、<code>fstat</code>
等函数来打开文件以及元数据查看等操作
<ul>
<li>因为 io_uring 替换的是读写接口，后续 io_uring 操作的对象是
<code>fd</code>（由 <code>open</code> 函数执行返回的）</li>
</ul></li>
<li>使用 <code>io_uring_queue_init</code> 初始化
<code>struct io_uring ring</code> 结构体</li>
<li>初始化 <code>struct iovec *iovecs</code> 结构体用于存放用户态 buffer
指针和长度</li>
<li>通过 <code>io_uring_get_sqe</code> 获取 <code>sqe</code></li>
<li>通过 <code>io_uring_prep_#OP</code> 对 <code>sqe</code>
填充命令，buffer 以及 offset 信息
<ul>
<li>【可选】 通过 <code>io_uring_sqe_set_data</code> 对 <code>sqe</code>
附加 <code>user_data</code> 信息（该信息会在 <code>cqe</code>
中进行返回）</li>
</ul></li>
<li>通过 <code>io_uring_submit</code> 对整个 <code>ring</code> 的所有
<code>sqe</code> 进行下发</li>
<li>通过 <code>io_uring_wait_cqe</code> 或者
<code>io_uring_peek_cqe</code> 来获取 <code>cqe</code>
<ul>
<li><code>io_uring_wait_cqe</code> 会阻塞当前线程直到有一个
<code>cqe</code> 返回</li>
<li><code>io_uring_peek_cqe</code> 不会阻塞，如果当前没有
<code>cqe</code>，就会返回错误</li>
<li><code>io_uring_cqe_get_data</code> 可以从 <code>cqe</code> 中获取
<code>user_data</code></li>
</ul></li>
<li>通过 <code>io_uring_cqe_seen</code> 对当前 <code>cqe</code>
进行清除，避免被二次处理</li>
<li>所有 IO 完成后，通过 <code>io_uring_queue_exit</code> 将
<code>ring</code> 销毁</li>
</ul>
<h2 id="io_uring_queue_init"><code>io_uring_queue_init</code></h2>
<ul>
<li><p>函数调用逻辑</p>
<pre class="mermaid">  graph TD
io_uring_queue_init --&gt; io_uring_queue_init_params --&gt; __sys_io_uring_setup --&gt; syscall --&gt;|陷入内核|io_uring_setup
io_uring_queue_init_params --&gt; io_uring_queue_mmap --&gt; io_uring_mmap --&gt; mmap</pre></li>
<li><p>函数功能</p>
<p>该函数主要将队列深度以及额外的 <code>flags</code>
参数传递到内核，让内核的 <code>io_uring_setup</code> 来初始化
<code>io_uring</code> 结构体，同时使用 <code>mmap</code>
将在内核中初始化的 <code>SQ</code>、<code>CQ</code> 以及
<code>SQEs</code> 映射到用户态</p>
<p>初始化时传递的 <code>flags</code> 将影响 <code>io_uring</code>
的运行方式：</p>
<ul>
<li><code>IORING_SETUP_IOPOLL</code>：开启此选项必须保证后续只用
<code>O_DIRECT</code> 打开文件并且文件系统的
<code>file_operations</code> 中注册了 <code>iopoll</code> 函数，否则 IO
将下发失败。开启后内核将调用注册的 <code>iopoll</code>
函数来主动轮询设备驱动确认 IO
是否完成<!-- ，`iopoll` 的触发时机可以参看 [io_uring 内核源码分析](/io_uring/内核源码分析) --></li>
<li><code>IORING_SETUP_SQPOLL</code>：将启动一个单独的内核线程
<code>io_sq_thread</code>，内核将主动轮询 SQ，然后将 IO
下发至驱动设备，能大大减少提交 IO 时的系统调用开销（内核线程工作时，提交
IO
将无需系统调用；但是该线程可能会休眠，休眠时需要系统调用来唤醒该线程）</li>
<li><code>IORING_SETUP_SQ_AFF</code>：当
<code>IORING_SETUP_SQPOLL</code> 已经配置后，启用
<code>sq_thread_cpu</code> 字段，用于配置内核线程
<code>io_sq_thread</code> 的跑在哪个 CPU 上</li>
</ul></li>
</ul>
<h2 id="io_uring_get_sqe"><code>io_uring_get_sqe</code></h2>
<p>由于 SQ 已经通过 <code>mmap</code> 映射到用户态，该函数只需在读取
<code>sq-&gt;khead</code> 时通过 <code>io_uring_smp_load_acquire</code>
保证一致性，而 <code>sq-&gt;sqe_tail</code>
只用于用户态，直接读取即可，根据 <code>sq-&gt;khead</code> 以及
<code>sq-&gt;sqe_tail</code> 判断 SQ 是否已满，未满则给出
<code>sq-&gt;sqe_tail</code> 处的 <code>sqe</code> 即可，然后更新
<code>sq-&gt;sqe_tail</code></p>
<h2 id="io_uring_prep_op"><code>io_uring_prep_#OP</code></h2>
<p>通过调用 <code>io_uring_prep_rw</code> 对 <code>sqe</code> 填充命令
OP、<code>fd</code>、buffer 指针以及 offset 信息等</p>
<h2 id="io_uring_sqe_set_data"><code>io_uring_sqe_set_data</code></h2>
<p>直接对 <code>sqe-&gt;user_data</code> 进行赋值</p>
<h2 id="io_uring_submit"><code>io_uring_submit</code></h2>
<ul>
<li><p>函数调用逻辑</p>
<pre class="mermaid">    graph TD
  io_uring_submit --&gt; __io_uring_submit_and_wait --&gt; __io_uring_flush_sq
  __io_uring_submit_and_wait --&gt; __io_uring_submit --&gt; sq_ring_needs_enter
  __io_uring_submit --&gt; __sys_io_uring_enter --&gt; __sys_io_uring_enter2 --&gt; syscall --&gt;|陷入内核|io_uring_enter</pre></li>
<li><p>函数功能</p>
<ul>
<li><p><code>__io_uring_flush_sq</code></p>
<p>根据 <code>sq-&gt;sqe_tail</code>、<code>sq-&gt;sqe_head</code>
差值依次填充 <code>sq-&gt;array</code>，然后一次性更新
<code>sq-&gt;ktail</code>，并返回内核中仍未处理 <code>sqe</code>
数量（<code>sq-&gt;ktail - sq-&gt;khead</code>）</p></li>
<li><p><code>sq_ring_needs_enter</code></p>
<p>判断内核线程 <code>io_sq_thread</code>
是否启用以及正常工作（没有休眠）:</p>
<ul>
<li>首先要判断用户态 <code>ring-&gt;flags</code> 是否配置了
<code>IORING_SETUP_SQPOLL</code> 标志位，判断是否启用了内核线程
<code>io_sq_thread</code></li>
<li>然后再判断内核态 <code>ring-&gt;sq.kflags</code> 是否配置了
<code>IORING_SQ_NEED_WAKEUP</code> 标志位，判断内核线程
<code>io_sq_thread</code> 是否需要唤醒</li>
</ul>
<p>当内核线程 <code>io_sq_thread</code> 启用并且正常工作时，则整个
<code>io_uring_submit</code> 到此结束，无需后续的
<code>__sys_io_uring_enter</code> 系统调用，减少了 IO
下发的系统调用的开销</p></li>
<li><p><code>__sys_io_uring_enter</code></p>
<p>系统调用陷入内核态，将参数传递给内核的 <code>io_uring_setup</code>
函数，主要用于提交 IO 和获取 IO 完成情况，具体功能和初始化时配置的
<code>ring-&gt;flags</code>
相关<!-- ，详细分析可以参看 [io_uring 内核源码分析](/io_uring/内核源码分析) --></p></li>
</ul></li>
</ul>
<h2 id="io_uring_wait_cqe"><code>io_uring_wait_cqe</code></h2>
<p>在用户态轮询判断是否有一个新的
<code>cqe</code>，无需系统调用陷入内核，但是会阻塞当前线程直到有一个新的
<code>cqe</code> 或者出错</p>
<h2 id="io_uring_peek_cqe"><code>io_uring_peek_cqe</code></h2>
<p>仅在用户态判断一次是否有新的
<code>cqe</code>，无需系统调用陷入内核，如果没有新的
<code>cqe</code>，会返回失败信息 <code>-errno</code></p>
<h2 id="io_uring_cqe_get_data"><code>io_uring_cqe_get_data</code></h2>
<p><code>cqe-&gt;user_data</code> 会在 IO 完成后，从 <code>sqe</code>
复制到对应的 <code>cqe</code> 中，该函数只用直接对
<code>cqe-&gt;user_data</code> 进行读取</p>
<h2 id="io_uring_cqe_seen"><code>io_uring_cqe_seen</code></h2>
<p>更新 <code>cq-&gt;khead</code>，避免当前 <code>cqe</code>
被重复获取</p>
<h2 id="io_uring_queue_exit"><code>io_uring_queue_exit</code></h2>
<p>首先通过 <code>munmap</code> 将初始化时 <code>mmap</code> 的
<code>SQ</code>、<code>CQ</code> 以及 <code>SQEs</code>
解除映射，然后通过 <code>close</code> 关闭 <code>io_uring</code> 对应的
<code>fd</code>，<code>close</code> 会调用到该 <code>fd</code> 注册的
<code>io_uring_release</code> 来释放 <code>io_uring</code></p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sb3JlLmtlcm5lbC5vcmcvbGludXgtYmxvY2svMjAxOTA1MTcyMTQxMzEuNTkyNS0xLWF4Ym9lQGtlcm5lbC5kay8=">【Kernel】io_uring
IOSQE_IO_LINK<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2t5emguZGV2L3Bvc3RzL2FydGljbGVzLzIwMjEtMDYtMTQtZGVlcC1kaXZlLWlvLXVyaW5nLw==">【个人博客】io_uring
的接口与实现<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>存储</category>
        <category>IO</category>
      </categories>
      <tags>
        <tag>异步 IO</tag>
        <tag>liburing</tag>
        <tag>io_uring</tag>
      </tags>
  </entry>
  <entry>
    <title>io_uring 简介和使用</title>
    <url>/posts/c142853f.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>io_uring 是 Linux 在 5.1 版本引入的一套新的异步 IO 实现。相比 Linux
在 2.6 版本引入的 AIO，io_uring 性能强很多，接近 SPDK<span class="exturl" data-url="aHR0cHM6Ly9sb3JlLmtlcm5lbC5vcmcvbGludXgtYmxvY2svMjAxOTAxMTYxNzUwMDMuMTc4ODAtMS1heGJvZUBrZXJuZWwuZGsv">[1]<i class="fa fa-external-link-alt"></i></span>，同时支持
buffer IO <span id="more"></span></p>
<p>io_uring 的作者 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmVuc19BeGJvZQ==">Jens Axboe<i class="fa fa-external-link-alt"></i></span> 是 Linux
内核块层和其他块设备的维护者，同时也是 CFQ、Noop、Deadline
调度器、blktrace 以及 FIO 的作者，对内核块层非常熟悉</p>
<h2 id="使用">使用</h2>
<h3 id="系统调用">系统调用</h3>
<p>io_uring 只增加了三个 Linux 系统调用分别是
<code>io_uring_setup</code>，<code>io_uring_enter</code> 和
<code>io_uring_register</code></p>
<p>他们的入口都在 Linux 内核源码的 <code>fs/io_uring.c</code> 文件中</p>
<p>用户程序可以直接使用 <code>syscall(__NR_xxx, ……)</code>
的方式直接调用，使用起来很麻烦</p>
<h3 id="liburing">liburing</h3>
<p>由于直接使用系统调用较为复杂，Jens Axboe 还提供了封装好的用户态库
liburing，简化了 io_uring 的使用，代码位置在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F4Ym9lL2xpYnVyaW5n">github<i class="fa fa-external-link-alt"></i></span> 上</p>
<h4 id="样例">样例</h4>
<p>liburing 仓库的 <code>examples/</code>
目录下提供了几个简单的样例程序：</p>
<table>
<colgroup>
<col style="width: 9%">
<col style="width: 17%">
<col style="width: 73%">
</colgroup>
<thead>
<tr class="header">
<th>文件</th>
<th>功能</th>
<th>其他</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>io_uring-test.c</code></td>
<td>读取一个文件的全部内容</td>
<td> -</td>
</tr>
<tr class="even">
<td><code>io_uring-cp.c</code></td>
<td>复制一个文件的内容到另一个文件</td>
<td>使用 <code>user_data</code> 手动处理读写 IO 之间的依赖，读 IO
返回之后才下发写 IO</td>
</tr>
<tr class="odd">
<td><code>link-cp.c</code></td>
<td>复制一个文件的内容到另一个文件</td>
<td>同时下发读写，使用 <code>IOSQE_IO_LINK</code> 保证读写之间的依赖<span class="exturl" data-url="aHR0cHM6Ly9sb3JlLmtlcm5lbC5vcmcvbGludXgtYmxvY2svMjAxOTA1MTcyMTQxMzEuNTkyNS0xLWF4Ym9lQGtlcm5lbC5kay8="> [2]<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr class="even">
<td><code>ucontext-cp.c</code></td>
<td>复制 n 个文件的内容到另 n 个文件</td>
<td>使用 <code>ucontext</code> 进行上下文切换，模拟 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxOTEwODk0OTA0L2FydGljbGUvZGV0YWlscy80MTkxMTE3NQ==">协程<i class="fa fa-external-link-alt"></i></span></td>
</tr>
</tbody>
</table>
<h4 id="代码流程">代码流程</h4>
<p>仔细阅读前三个用例，可以看出使用 io_uring 的一般流程如下：</p>
<ul>
<li>使用 <code>open</code>、<code>fstat</code>
等函数来打开文件以及元数据查看等操作
<ul>
<li>因为 io_uring 替换的是读写接口，后续 io_uring 操作的对象是
<code>fd</code>（由 <code>open</code> 函数执行返回的）</li>
</ul></li>
<li>使用 <code>io_uring_queue_init</code> 初始化
<code>struct io_uring ring</code> 结构体</li>
<li>初始化 <code>struct iovec *iovecs</code> 结构体用于存放用户态 buffer
指针和长度</li>
<li>通过 <code>io_uring_get_sqe</code> 获取 <code>sqe</code></li>
<li>通过 <code>io_uring_prep_#OP</code> 对 <code>sqe</code>
填充命令，buffer 以及 offset 信息
<ul>
<li>【可选】 通过 <code>io_uring_sqe_set_data</code> 对 <code>sqe</code>
附加 <code>user_data</code> 信息（该信息会在 <code>cqe</code>
中进行返回）</li>
</ul></li>
<li>通过 <code>io_uring_submit</code> 对整个 <code>ring</code> 的所有
<code>sqe</code> 进行下发</li>
<li>通过 <code>io_uring_wait_cqe</code> 或者
<code>io_uring_peek_cqe</code> 来获取 <code>cqe</code>
<ul>
<li><code>io_uring_wait_cqe</code> 会阻塞当前线程直到有一个
<code>cqe</code> 返回</li>
<li><code>io_uring_peek_cqe</code> 不会阻塞，如果当前没有
<code>cqe</code>，就会返回错误</li>
<li><code>io_uring_cqe_get_data</code> 可以从 <code>cqe</code> 中获取
<code>user_data</code></li>
</ul></li>
<li>通过 <code>io_uring_cqe_seen</code> 对当前 <code>cqe</code>
进行清除，避免被二次处理</li>
<li>所有 IO 完成后，通过 <code>io_uring_queue_exit</code> 将
<code>ring</code> 销毁</li>
</ul>
<h2 id="编译">编译</h2>
<p>根据官方 <code>Makefile</code> 可以看出编译时有额外的三个条件</p>
<ul>
<li>定义 <code>_GNU_SOURCE</code> 宏，<code>-D</code> 宏定义</li>
<li>指定额外的头文件目录，<code>-I</code> 指定头文件目录位置</li>
<li>使用 <code>liburing</code> 库，<code>-L</code>
指定库位置，<code>-l</code> 指定库名</li>
</ul>
<p>即
<code>gcc -D_GNU_SOURCE -I../src/include/ -L../src/ -o test test.c -luring</code></p>
<p>其中头文件目录下主要有三个头文件：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tree src/include/</span><br><span class="line">src/include/</span><br><span class="line">├── liburing</span><br><span class="line">│   ├── barrier.h</span><br><span class="line">│   └── io_uring.h</span><br><span class="line">└── liburing.h</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br></pre></td></tr></tbody></table></figure>
<p>而 <code>liburing</code> 库也需要编译生成，推荐直接在
<code>liburing</code> 的顶层目录直接 <code>make all</code></p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="/posts/c142853f/io_uring.pdf">【PDF】官方 pdf</a></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sb3JlLmtlcm5lbC5vcmcvbGludXgtYmxvY2svMjAxOTAxMTYxNzUwMDMuMTc4ODAtMS1heGJvZUBrZXJuZWwuZGsv">【Kernel】io_uring
性能测试<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmVuc19BeGJvZQ==">【维基百科】Jens
Axboe<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sb3JlLmtlcm5lbC5vcmcvbGludXgtYmxvY2svMjAxOTA1MTcyMTQxMzEuNTkyNS0xLWF4Ym9lQGtlcm5lbC5kay8=">【Kernel】io_uring
IOSQE_IO_LINK<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9rZXJuZWwudGFvYmFvLm9yZy8yMDE5LzA2L2lvX3VyaW5nLWEtbmV3LWxpbnV4LWFzeW5jaHJvbm91cy1pby1BUEkv">【阿里云技术博客】Linux
异步 IO 新时代：io_uring<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpbmtlcmlzdC9ibG9nL2lzc3Vlcy8yNQ==">【GitHub】《操作系统与存储：解析
Linux 内核全新异步 IO 引擎 —— io_uring 设计与实现》<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hcnRodXJjaGlhby5hcnQvYmxvZy9pbnRyby10by1pby11cmluZy16aC8=">【个人博客】[译]
Linux 异步 I/O 框架
io_uring：基本原理、程序示例与性能压测（2020）<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>存储</category>
        <category>IO</category>
      </categories>
      <tags>
        <tag>异步 IO</tag>
        <tag>liburing</tag>
        <tag>io_uring</tag>
      </tags>
  </entry>
  <entry>
    <title>page cache 简介</title>
    <url>/posts/9ba60726.html</url>
    <content><![CDATA[<p>当前内容基于 Linux Kernel <span class="exturl" data-url="aHR0cHM6Ly9naXQua2VybmVsLm9yZy9wdWIvc2NtL2xpbnV4L2tlcm5lbC9naXQvc3RhYmxlL2xpbnV4LmdpdC90YWcvP2g9djUuNC4xMjE=">v5.4.121<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="page-cache">page cache</h2>
<p>由于磁盘 HDD 甚至于现在广泛使用的固态硬盘 SSD 的读写速度都远小于内存
DRAM
的读写速度，为了避免每次读取数据都要直接访问这些低速的底层存储设备，Linux
在利用 DRAM 实现了一个缓存层，缓存的粒度是 page，因此也叫 page
cache，中文一般称为页（面）缓存 <span id="more"></span></p>
<p>经过这层 page cache 的作用，IO 的性能得到了显著的提升。不过由于 DRAM
具有易失性，在掉电后数据会丢失，因此内核中的 <a href="/posts/646202b9.html">回写机制</a> 定时将 page cache
中的数据下刷到设备上，保证数据的持久化。此外内核还在 page cache
中实现了巧妙的 <a href="/TODO">预读机制</a> 提升了顺序读性能</p>
<h2 id="直接-io-与-缓存-io">直接 IO 与 缓存 IO</h2>
<p>在拥有 page cache 这一层缓存后，写数据就有了三种不同的策略：</p>
<ol type="1">
<li>不经过缓存，直接写底层存储设备，但同时要使缓存中数据失效，也叫不缓存（nowrite）</li>
<li>只写缓存，缓存中数据定期刷到底层存储设备上，也叫写回（write
back）</li>
<li>同时写缓存和底层存储设备，也叫写穿（write through）</li>
</ol>
<p>前两种就是 Linux 在 IO 栈中支持的直接 IO（direct IO）和缓存
IO（buffer IO）</p>
<p>第三种策略虽然能非常简单保证缓存和底层设备的一致性，不过基于时间局部性原理，page
cache 中的数据可能只是中间态，会被频繁修改，每次写穿会产生大量的开销</p>
<h2 id="linux-io-栈">Linux IO 栈</h2>
<p>详细的 Linux IO 栈图如下（来源于 <span class="exturl" data-url="aHR0cHM6Ly93d3cudGhvbWFzLWtyZW5uLmNvbS9lbi93aWtpL0xpbnV4X1N0b3JhZ2VfU3RhY2tfRGlhZ3JhbQ==">Thomas-Krenn-Wiki<i class="fa fa-external-link-alt"></i></span>）：</p>
<figure>
<img data-src="/posts/9ba60726/Linux-storage-stack-diagram_v4.10.png" alt="Linux-storage-stack-diagram">
<figcaption aria-hidden="true">Linux-storage-stack-diagram</figcaption>
</figure>
<p>其实简化一下，可以分为文件系统、块层和设备驱动层这三层</p>
<figure>
<img data-src="/posts/9ba60726/simple_IO_stack.png" alt="simple_IO_stack">
<figcaption aria-hidden="true">simple_IO_stack</figcaption>
</figure>
<h2 id="linux-中的具体实现">Linux 中的具体实现</h2>
<p>这里介绍和 page cache 相关的主要结构体和一些常用的函数</p>
<h3 id="相关结构体">相关结构体</h3>
<h4 id="超级块-super_block">超级块 <code>super_block</code></h4>
<p>每个文件系统都有 <code>super_block</code>
结构体，用于存储该文件系统的特定信息</p>
<p>其定义在 <code>include/linux/fs.h</code> 中</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> {</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">s_list</span>;</span>		<span class="comment">/* Keep this first */</span></span><br><span class="line">	<span class="type">dev_t</span>			s_dev;		<span class="comment">/* search index; _not_ kdev_t */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span>		s_blocksize_bits;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		s_blocksize;</span><br><span class="line">	<span class="type">loff_t</span>			s_maxbytes;	<span class="comment">/* Max file size */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span>	*<span class="title">s_type</span>;</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">super_operations</span>	*<span class="title">s_op</span>;</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dquot_operations</span>	*<span class="title">dq_op</span>;</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">quotactl_ops</span>	*<span class="title">s_qcop</span>;</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">export_operations</span> *<span class="title">s_export_op</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		s_flags;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		s_iflags;	<span class="comment">/* internal SB_I_* flags */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		s_magic;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dentry</span>		*<span class="title">s_root</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span>	<span class="title">s_umount</span>;</span></span><br><span class="line">	<span class="type">int</span>			s_count;</span><br><span class="line">	<span class="type">atomic_t</span>		s_active;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">	<span class="type">void</span>                    *s_security;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">xattr_handler</span> **<span class="title">s_xattr</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FS_ENCRYPTION</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">fscrypt_operations</span>	*<span class="title">s_cop</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>		*<span class="title">s_master_keys</span>;</span> <span class="comment">/* master crypto keys in use */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FS_VERITY</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">fsverity_operations</span> *<span class="title">s_vop</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_bl_head</span>	<span class="title">s_roots</span>;</span>	<span class="comment">/* alternate root dentries for NFS */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">s_mounts</span>;</span>	<span class="comment">/* list of mounts; _not_ for fs use */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">block_device</span>	*<span class="title">s_bdev</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">backing_dev_info</span> *<span class="title">s_bdi</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mtd_info</span>		*<span class="title">s_mtd</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span>	<span class="title">s_instances</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		s_quota_types;	<span class="comment">/* Bitmask of supported quota types */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">quota_info</span>	<span class="title">s_dquot</span>;</span>	<span class="comment">/* Diskquota specific options */</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sb_writers</span>	<span class="title">s_writers</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Keep s_fs_info, s_time_gran, s_fsnotify_mask, and</span></span><br><span class="line"><span class="comment">	 * s_fsnotify_marks together for cache efficiency. They are frequently</span></span><br><span class="line"><span class="comment">	 * accessed and rarely modified.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">void</span>			*s_fs_info;	<span class="comment">/* Filesystem private info */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Granularity of c/m/atime in ns (cannot be worse than a second) */</span></span><br><span class="line">	u32			s_time_gran;</span><br><span class="line">	<span class="comment">/* Time limits for c/m/atime in seconds */</span></span><br><span class="line">	<span class="type">time64_t</span>		   s_time_min;</span><br><span class="line">	<span class="type">time64_t</span>		   s_time_max;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FSNOTIFY</span></span><br><span class="line">	__u32			s_fsnotify_mask;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fsnotify_mark_connector</span> __<span class="title">rcu</span>	*<span class="title">s_fsnotify_marks</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>			s_id[<span class="number">32</span>];	<span class="comment">/* Informational name */</span></span><br><span class="line">	<span class="type">uuid_t</span>			s_uuid;		<span class="comment">/* UUID */</span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		s_max_links;</span><br><span class="line">	<span class="type">fmode_t</span>			s_mode;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * The next field is for VFS *only*. No filesystems have any business</span></span><br><span class="line"><span class="comment">	 * even looking at it. You had been warned.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">s_vfs_rename_mutex</span>;</span>	<span class="comment">/* Kludge */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Filesystem subtype.  If non-empty the filesystem type field</span></span><br><span class="line"><span class="comment">	 * in /proc/mounts will be "type.subtype"</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *s_subtype;</span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dentry_operations</span> *<span class="title">s_d_op</span>;</span> <span class="comment">/* default d_op for dentries */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Saved pool identifier for cleancache (-1 means none)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">int</span> cleancache_poolid;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">shrinker</span> <span class="title">s_shrink</span>;</span>	<span class="comment">/* per-sb shrinker handle */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Number of inodes with nlink == 0 but still referenced */</span></span><br><span class="line">	<span class="type">atomic_long_t</span> s_remove_count;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Pending fsnotify inode refs */</span></span><br><span class="line">	<span class="type">atomic_long_t</span> s_fsnotify_inode_refs;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Being remounted read-only */</span></span><br><span class="line">	<span class="type">int</span> s_readonly_remount;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* AIO completions deferred from interrupt context */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">workqueue_struct</span> *<span class="title">s_dio_done_wq</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">s_pins</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Owning user namespace and default context in which to</span></span><br><span class="line"><span class="comment">	 * interpret filesystem uids, gids, quotas, device nodes,</span></span><br><span class="line"><span class="comment">	 * xattrs and security labels.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">s_user_ns</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * The list_lru structure is essentially just a pointer to a table</span></span><br><span class="line"><span class="comment">	 * of per-node lru lists, each of which has its own spinlock.</span></span><br><span class="line"><span class="comment">	 * There is no need to put them into separate cachelines.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_lru</span>		<span class="title">s_dentry_lru</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_lru</span>		<span class="title">s_inode_lru</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span>		<span class="title">rcu</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span>	<span class="title">destroy_work</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex</span>		<span class="title">s_sync_lock</span>;</span>	<span class="comment">/* sync serialisation lock */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Indicates how deep in a filesystem stack this SB is</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">int</span> s_stack_depth;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* s_inode_list_lock protects s_inodes */</span></span><br><span class="line">	<span class="type">spinlock_t</span>		s_inode_list_lock ____cacheline_aligned_in_smp;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">s_inodes</span>;</span>	<span class="comment">/* all inodes */</span></span><br><span class="line"></span><br><span class="line">	<span class="type">spinlock_t</span>		s_inode_wblist_lock;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">s_inodes_wb</span>;</span>	<span class="comment">/* writeback inodes */</span></span><br><span class="line">} __randomize_layout;</span><br></pre></td></tr></tbody></table></figure>
<p><code>super_block</code>
通常在挂载文件系统时会从底层存储设备上读取并构建，并且需要同步回底层存储设备</p>
<h4 id="索引节点-inode">索引节点 <code>inode</code></h4>
<p>而 <code>inode</code>
则是文件系统中最重要的一个结构体，用于保存一个文件的元数据以及其在底层设备上的位置信息等（在
Linux 下一切皆是文件，目录也是一种文件）</p>
<p>其定义也在 <code>include/linux/fs.h</code> 中</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Keep mostly read-only and often accessed (especially for</span></span><br><span class="line"><span class="comment"> * the RCU path lookup and 'stat' data) fields at the beginning</span></span><br><span class="line"><span class="comment"> * of the 'struct inode'</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> {</span></span><br><span class="line">	<span class="comment">// inode 类型</span></span><br><span class="line">	<span class="type">umode_t</span>			i_mode;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">short</span>		i_opflags;</span><br><span class="line">	<span class="type">kuid_t</span>			i_uid;</span><br><span class="line">	<span class="type">kgid_t</span>			i_gid;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		i_flags;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FS_POSIX_ACL</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">posix_acl</span>	*<span class="title">i_acl</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">posix_acl</span>	*<span class="title">i_default_acl</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">inode_operations</span>	*<span class="title">i_op</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">super_block</span>	*<span class="title">i_sb</span>;</span></span><br><span class="line">	<span class="comment">// page cache 相关</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>	*<span class="title">i_mapping</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">	<span class="type">void</span>			*i_security;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Stat data, not accessed from path walking */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		i_ino;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Filesystems may only read i_nlink directly.  They shall use the</span></span><br><span class="line"><span class="comment">	 * following functions for modification:</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 *    (set|clear|inc|drop)_nlink</span></span><br><span class="line"><span class="comment">	 *    inode_(inc|dec)_link_count</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> {</span></span><br><span class="line">		<span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> i_nlink;</span><br><span class="line">		<span class="type">unsigned</span> <span class="type">int</span> __i_nlink;</span><br><span class="line">	};</span><br><span class="line">	<span class="type">dev_t</span>			i_rdev;</span><br><span class="line">	<span class="type">loff_t</span>			i_size;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">timespec64</span>	<span class="title">i_atime</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">timespec64</span>	<span class="title">i_mtime</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">timespec64</span>	<span class="title">i_ctime</span>;</span></span><br><span class="line">	<span class="type">spinlock_t</span>		i_lock;	<span class="comment">/* i_blocks, i_bytes, maybe i_size */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">short</span>          i_bytes;</span><br><span class="line">	u8			i_blkbits;</span><br><span class="line">	u8			i_write_hint;</span><br><span class="line">	<span class="type">blkcnt_t</span>		i_blocks;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __NEED_I_SIZE_ORDERED</span></span><br><span class="line">	<span class="type">seqcount_t</span>		i_size_seqcount;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Misc */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		i_state;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span>	<span class="title">i_rwsem</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		dirtied_when;	<span class="comment">/* jiffies of first dirtying */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		dirtied_time_when;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span>	<span class="title">i_hash</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">i_io_list</span>;</span>	<span class="comment">/* backing dev IO list */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CGROUP_WRITEBACK</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">bdi_writeback</span>	*<span class="title">i_wb</span>;</span>		<span class="comment">/* the associated cgroup wb */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* foreign inode detection, see wbc_detach_inode() */</span></span><br><span class="line">	<span class="type">int</span>			i_wb_frn_winner;</span><br><span class="line">	u16			i_wb_frn_avg_time;</span><br><span class="line">	u16			i_wb_frn_history;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">i_lru</span>;</span>		<span class="comment">/* inode LRU list */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">i_sb_list</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">i_wb_list</span>;</span>	<span class="comment">/* backing dev writeback list */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> {</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span>	<span class="title">i_dentry</span>;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span>		<span class="title">i_rcu</span>;</span></span><br><span class="line">	};</span><br><span class="line">	<span class="type">atomic64_t</span>		i_version;</span><br><span class="line">	<span class="type">atomic64_t</span>		i_sequence; <span class="comment">/* see futex */</span></span><br><span class="line">	<span class="type">atomic_t</span>		i_count;</span><br><span class="line">	<span class="type">atomic_t</span>		i_dio_count;</span><br><span class="line">	<span class="type">atomic_t</span>		i_writecount;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_IMA) || defined(CONFIG_FILE_LOCKING)</span></span><br><span class="line">	<span class="type">atomic_t</span>		i_readcount; <span class="comment">/* struct files open RO */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> {</span></span><br><span class="line">		<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span>	*<span class="title">i_fop</span>;</span>	<span class="comment">/* former -&gt;i_op-&gt;default_file_ops */</span></span><br><span class="line">		<span class="type">void</span> (*free_inode)(<span class="keyword">struct</span> inode *);</span><br><span class="line">	};</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">file_lock_context</span>	*<span class="title">i_flctx</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>	<span class="title">i_data</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">i_devices</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> {</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">pipe_inode_info</span>	*<span class="title">i_pipe</span>;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">block_device</span>	*<span class="title">i_bdev</span>;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">cdev</span>		*<span class="title">i_cdev</span>;</span></span><br><span class="line">		<span class="type">char</span>			*i_link;</span><br><span class="line">		<span class="type">unsigned</span>		i_dir_seq;</span><br><span class="line">	};</span><br><span class="line"></span><br><span class="line">	__u32			i_generation;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FSNOTIFY</span></span><br><span class="line">	__u32			i_fsnotify_mask; <span class="comment">/* all events this inode cares about */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fsnotify_mark_connector</span> __<span class="title">rcu</span>	*<span class="title">i_fsnotify_marks</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FS_ENCRYPTION</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fscrypt_info</span>	*<span class="title">i_crypt_info</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FS_VERITY</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fsverity_info</span>	*<span class="title">i_verity_info</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>			*i_private; <span class="comment">/* fs or device private pointer */</span></span><br><span class="line">} __randomize_layout;</span><br></pre></td></tr></tbody></table></figure>
<p>与 <code>super_block</code> 一样，<code>inode</code>
也是从底层存储设备上读取并构建的，并且也需要同步回底层存储设备</p>
<h4 id="文件-file">文件 <code>file</code></h4>
<p><code>file</code>
其实是已经打开的底层存储设备上的文件在内存中的表示。与前面两个结构体有所不同，底层存储设备上并不会存储，该结构体只是内核抽象出来的，仅仅存在于内存中，方便管理</p>
<p>其定义也在 <code>include/linux/fs.h</code> 中</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> {</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> {</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span>	<span class="title">fu_llist</span>;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> 	<span class="title">fu_rcuhead</span>;</span></span><br><span class="line">	} f_u;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">path</span>		<span class="title">f_path</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span>		*<span class="title">f_inode</span>;</span>	<span class="comment">/* cached value */</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span>	*<span class="title">f_op</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Protects f_ep_links, f_flags.</span></span><br><span class="line"><span class="comment">	 * Must not be taken from IRQ context.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">spinlock_t</span>		f_lock;</span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">rw_hint</span>		<span class="title">f_write_hint</span>;</span></span><br><span class="line">	<span class="type">atomic_long_t</span>		f_count;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> 		f_flags;</span><br><span class="line">	<span class="type">fmode_t</span>			f_mode;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex</span>		<span class="title">f_pos_lock</span>;</span></span><br><span class="line">	<span class="type">loff_t</span>			f_pos;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fown_struct</span>	<span class="title">f_owner</span>;</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span>	*<span class="title">f_cred</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">file_ra_state</span>	<span class="title">f_ra</span>;</span></span><br><span class="line"></span><br><span class="line">	u64			f_version;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">	<span class="type">void</span>			*f_security;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">/* needed for tty driver, and maybe others */</span></span><br><span class="line">	<span class="type">void</span>			*private_data;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_EPOLL</span></span><br><span class="line">	<span class="comment">/* Used by fs/eventpoll.c to link all the hooks to this file */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">f_ep_links</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">f_tfile_llink</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* #ifdef CONFIG_EPOLL */</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>	*<span class="title">f_mapping</span>;</span></span><br><span class="line">	<span class="type">errseq_t</span>		f_wb_err;</span><br><span class="line">} __randomize_layout</span><br><span class="line">  __attribute__((aligned(<span class="number">4</span>)));	<span class="comment">/* lest something weird decides that 2 is OK */</span></span><br></pre></td></tr></tbody></table></figure>
<p>每个 file 都与一个 inode 对应</p>
<h4 id="目录项-dentry">目录项 <code>dentry</code></h4>
<p><code>dentry</code> 与 <code>file</code>
类似，底层设备上并不会存储，该结构体也是内核抽象出来的，针对目录文件进行特殊的管理</p>
<p>目录项相对于文件具有更高的热度，同时为了加速打开文件时的路径解析，内核中还实现了目录项缓存
<code>dcache</code> 用于缓存 <code>dentry</code></p>
<p>其定义在 <code>include/linux/dcache.h</code> 中</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> {</span></span><br><span class="line">	<span class="comment">/* RCU lookup touched fields */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> d_flags;		<span class="comment">/* protected by d_lock */</span></span><br><span class="line">	<span class="type">seqcount_t</span> d_seq;		<span class="comment">/* per dentry seqlock */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_bl_node</span> <span class="title">d_hash</span>;</span>	<span class="comment">/* lookup hash list */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">d_parent</span>;</span>	<span class="comment">/* parent directory */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">qstr</span> <span class="title">d_name</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">d_inode</span>;</span>		<span class="comment">/* Where the name belongs to - NULL is</span></span><br><span class="line"><span class="comment">					 * negative */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> d_iname[DNAME_INLINE_LEN];	<span class="comment">/* small names */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Ref lookup also touches following */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">lockref</span> <span class="title">d_lockref</span>;</span>	<span class="comment">/* per-dentry lock and refcount */</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dentry_operations</span> *<span class="title">d_op</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">d_sb</span>;</span>	<span class="comment">/* The root of the dentry tree */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> d_time;		<span class="comment">/* used by d_revalidate */</span></span><br><span class="line">	<span class="type">void</span> *d_fsdata;			<span class="comment">/* fs-specific data */</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">union</span> {</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">d_lru</span>;</span>		<span class="comment">/* LRU list */</span></span><br><span class="line">		<span class="type">wait_queue_head_t</span> *d_wait;	<span class="comment">/* in-lookup ones only */</span></span><br><span class="line">	};</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">d_child</span>;</span>	<span class="comment">/* child of parent list */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">d_subdirs</span>;</span>	<span class="comment">/* our children */</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * d_alias and d_rcu can share memory</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> {</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">d_alias</span>;</span>	<span class="comment">/* inode alias list */</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">hlist_bl_node</span> <span class="title">d_in_lookup_hash</span>;</span>	<span class="comment">/* only for in-lookup ones */</span></span><br><span class="line">	 	<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">d_rcu</span>;</span></span><br><span class="line">	} d_u;</span><br><span class="line">} __randomize_layout;</span><br></pre></td></tr></tbody></table></figure>
<p>因为目录也是文件，所以每个 <code>dentry</code> 也会与一个
<code>inode</code> 对应</p>
<h4 id="页缓存-address_space">页缓存 <code>address_space</code></h4>
<p>在 <code>inode</code> 结构体中可以看见一个类型为
<code>address_space</code> 结构体指针的 <code>i_mapping</code>
字段，其实它就是 page cache 的核心结构体</p>
<p>其定义也在 <code>include/linux/fs.h</code> 中</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct address_space - Contents of a cacheable, mappable object.</span></span><br><span class="line"><span class="comment"> * @host: Owner, either the inode or the block_device.</span></span><br><span class="line"><span class="comment"> * @i_pages: Cached pages.</span></span><br><span class="line"><span class="comment"> * @gfp_mask: Memory allocation flags to use for allocating pages.</span></span><br><span class="line"><span class="comment"> * @i_mmap_writable: Number of VM_SHARED mappings.</span></span><br><span class="line"><span class="comment"> * @nr_thps: Number of THPs in the pagecache (non-shmem only).</span></span><br><span class="line"><span class="comment"> * @i_mmap: Tree of private and shared mappings.</span></span><br><span class="line"><span class="comment"> * @i_mmap_rwsem: Protects @i_mmap and @i_mmap_writable.</span></span><br><span class="line"><span class="comment"> * @nrpages: Number of page entries, protected by the i_pages lock.</span></span><br><span class="line"><span class="comment"> * @nrexceptional: Shadow or DAX entries, protected by the i_pages lock.</span></span><br><span class="line"><span class="comment"> * @writeback_index: Writeback starts here.</span></span><br><span class="line"><span class="comment"> * @a_ops: Methods.</span></span><br><span class="line"><span class="comment"> * @flags: Error bits and flags (AS_*).</span></span><br><span class="line"><span class="comment"> * @wb_err: The most recent error which has occurred.</span></span><br><span class="line"><span class="comment"> * @private_lock: For use by the owner of the address_space.</span></span><br><span class="line"><span class="comment"> * @private_list: For use by the owner of the address_space.</span></span><br><span class="line"><span class="comment"> * @private_data: For use by the owner of the address_space.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> {</span></span><br><span class="line">	<span class="comment">// 指向文件 inode</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span>		*<span class="title">host</span>;</span></span><br><span class="line">	<span class="comment">// 当前文件缓存的所有 page</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">xarray</span>		<span class="title">i_pages</span>;</span></span><br><span class="line">	<span class="type">gfp_t</span>			gfp_mask;</span><br><span class="line">	<span class="type">atomic_t</span>		i_mmap_writable;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_READ_ONLY_THP_FOR_FS</span></span><br><span class="line">	<span class="comment">/* number of thp, only for non-shmem files */</span></span><br><span class="line">	<span class="type">atomic_t</span>		nr_thps;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root_cached</span>	<span class="title">i_mmap</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span>	<span class="title">i_mmap_rwsem</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		nrpages;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		nrexceptional;</span><br><span class="line">	<span class="type">pgoff_t</span>			writeback_index;</span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">address_space_operations</span> *<span class="title">a_ops</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		flags;</span><br><span class="line">	<span class="type">errseq_t</span>		wb_err;</span><br><span class="line">	<span class="type">spinlock_t</span>		private_lock;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">private_list</span>;</span></span><br><span class="line">	<span class="type">void</span>			*private_data;</span><br><span class="line">} __attribute__((aligned(<span class="keyword">sizeof</span>(<span class="type">long</span>)))) __randomize_layout;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * On most architectures that alignment is already the case; but</span></span><br><span class="line"><span class="comment">	 * must be enforced here for CRIS, to let the least significant bit</span></span><br><span class="line"><span class="comment">	 * of struct page's "mapping" pointer be used for PAGE_MAPPING_ANON.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request_queue</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block_device</span> {</span></span><br><span class="line">	<span class="type">dev_t</span>			bd_dev;  <span class="comment">/* not a kdev_t - it's a search key */</span></span><br><span class="line">	<span class="type">int</span>			bd_openers;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *		<span class="title">bd_inode</span>;</span>	<span class="comment">/* will die */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *	<span class="title">bd_super</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex</span>		<span class="title">bd_mutex</span>;</span>	<span class="comment">/* open/close mutex */</span></span><br><span class="line">	<span class="type">void</span> *			bd_claiming;</span><br><span class="line">	<span class="type">void</span> *			bd_holder;</span><br><span class="line">	<span class="type">int</span>			bd_holders;</span><br><span class="line">	<span class="type">bool</span>			bd_write_holder;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SYSFS</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">bd_holder_disks</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">block_device</span> *	<span class="title">bd_contains</span>;</span></span><br><span class="line">	<span class="type">unsigned</span>		bd_block_size;</span><br><span class="line">	u8			bd_partno;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hd_struct</span> *	<span class="title">bd_part</span>;</span></span><br><span class="line">	<span class="comment">/* number of times partitions within this device have been opened. */</span></span><br><span class="line">	<span class="type">unsigned</span>		bd_part_count;</span><br><span class="line">	<span class="type">int</span>			bd_invalidated;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">gendisk</span> *	<span class="title">bd_disk</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">request_queue</span> *  <span class="title">bd_queue</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">backing_dev_info</span> *<span class="title">bd_bdi</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">bd_list</span>;</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Private data.  You must have bd_claim'ed the block_device</span></span><br><span class="line"><span class="comment">	 * to use this.  <span class="doctag">NOTE:</span>  bd_claim allows an owner to claim</span></span><br><span class="line"><span class="comment">	 * the same device multiple times, the owner must take special</span></span><br><span class="line"><span class="comment">	 * care to not mess up bd_private for that case.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		bd_private;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* The counter of freeze processes */</span></span><br><span class="line">	<span class="type">int</span>			bd_fsfreeze_count;</span><br><span class="line">	<span class="comment">/* Mutex for freeze */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex</span>		<span class="title">bd_fsfreeze_mutex</span>;</span></span><br><span class="line">} __randomize_layout;</span><br></pre></td></tr></tbody></table></figure>
<p>每一个 <code>address_space</code> 与一个 <code>inode</code>
对应，同时 <code>file</code> 中的 <code>f_mapping</code>
字段通常由该文件的 <code>inode</code> 中 <code>i_mapping</code>
赋值，也就是说每个文件都会有独自的 <code>file</code>、<code>inode</code>
以及 <code>address_space</code> 结构体</p>
<p><code>address_space</code> 结构体 <code>struct xarray i_pages</code>
就是该文件的 page cache
中缓存的所有物理页。它是通过基数树这一结构进行管理的，而
<code>xarray</code> 只是在基数树上进行了一层封装</p>
<h3 id="常用函数">常用函数</h3>
<p>通常 <code>address_space</code> 上会挂载一个
<code>address_space_operations</code> 结构，用于自定义对 page cache
中的页面操作的函数</p>
<p><code>address_space_operations</code> 结构定义也在
<code>include/linux/fs.h</code> 中</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space_operations</span> {</span></span><br><span class="line">	<span class="type">int</span> (*writepage)(<span class="keyword">struct</span> page *page, <span class="keyword">struct</span> writeback_control *wbc);</span><br><span class="line">	<span class="type">int</span> (*readpage)(<span class="keyword">struct</span> file *, <span class="keyword">struct</span> page *);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Write back some dirty pages from this mapping. */</span></span><br><span class="line">	<span class="type">int</span> (*writepages)(<span class="keyword">struct</span> address_space *, <span class="keyword">struct</span> writeback_control *);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Set a page dirty.  Return true if this dirtied it */</span></span><br><span class="line">	<span class="type">int</span> (*set_page_dirty)(<span class="keyword">struct</span> page *page);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Reads in the requested pages. Unlike -&gt;readpage(), this is</span></span><br><span class="line"><span class="comment">	 * PURELY used for read-ahead!.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">int</span> (*readpages)(<span class="keyword">struct</span> file *filp, <span class="keyword">struct</span> address_space *mapping,</span><br><span class="line">			<span class="keyword">struct</span> list_head *pages, <span class="type">unsigned</span> nr_pages);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> (*write_begin)(<span class="keyword">struct</span> file *, <span class="keyword">struct</span> address_space *mapping,</span><br><span class="line">				<span class="type">loff_t</span> pos, <span class="type">unsigned</span> len, <span class="type">unsigned</span> flags,</span><br><span class="line">				<span class="keyword">struct</span> page **pagep, <span class="type">void</span> **fsdata);</span><br><span class="line">	<span class="type">int</span> (*write_end)(<span class="keyword">struct</span> file *, <span class="keyword">struct</span> address_space *mapping,</span><br><span class="line">				<span class="type">loff_t</span> pos, <span class="type">unsigned</span> len, <span class="type">unsigned</span> copied,</span><br><span class="line">				<span class="keyword">struct</span> page *page, <span class="type">void</span> *fsdata);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Unfortunately this kludge is needed for FIBMAP. Don't use it */</span></span><br><span class="line">	<span class="type">sector_t</span> (*bmap)(<span class="keyword">struct</span> address_space *, <span class="type">sector_t</span>);</span><br><span class="line">	<span class="type">void</span> (*invalidatepage) (<span class="keyword">struct</span> page *, <span class="type">unsigned</span> <span class="type">int</span>, <span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line">	<span class="type">int</span> (*releasepage) (<span class="keyword">struct</span> page *, <span class="type">gfp_t</span>);</span><br><span class="line">	<span class="type">void</span> (*freepage)(<span class="keyword">struct</span> page *);</span><br><span class="line">	<span class="type">ssize_t</span> (*direct_IO)(<span class="keyword">struct</span> kiocb *, <span class="keyword">struct</span> iov_iter *iter);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * migrate the contents of a page to the specified target. If</span></span><br><span class="line"><span class="comment">	 * migrate_mode is MIGRATE_ASYNC, it must not block.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">int</span> (*migratepage) (<span class="keyword">struct</span> address_space *,</span><br><span class="line">			<span class="keyword">struct</span> page *, <span class="keyword">struct</span> page *, <span class="keyword">enum</span> migrate_mode);</span><br><span class="line">	<span class="type">bool</span> (*isolate_page)(<span class="keyword">struct</span> page *, <span class="type">isolate_mode_t</span>);</span><br><span class="line">	<span class="type">void</span> (*putback_page)(<span class="keyword">struct</span> page *);</span><br><span class="line">	<span class="type">int</span> (*launder_page) (<span class="keyword">struct</span> page *);</span><br><span class="line">	<span class="type">int</span> (*is_partially_uptodate) (<span class="keyword">struct</span> page *, <span class="type">unsigned</span> <span class="type">long</span>,</span><br><span class="line">					<span class="type">unsigned</span> <span class="type">long</span>);</span><br><span class="line">	<span class="type">void</span> (*is_dirty_writeback) (<span class="keyword">struct</span> page *, <span class="type">bool</span> *, <span class="type">bool</span> *);</span><br><span class="line">	<span class="type">int</span> (*error_remove_page)(<span class="keyword">struct</span> address_space *, <span class="keyword">struct</span> page *);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* swapfile support */</span></span><br><span class="line">	<span class="type">int</span> (*swap_activate)(<span class="keyword">struct</span> swap_info_struct *sis, <span class="keyword">struct</span> file *file,</span><br><span class="line">				<span class="type">sector_t</span> *span);</span><br><span class="line">	<span class="type">void</span> (*swap_deactivate)(<span class="keyword">struct</span> file *file);</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>这里简要介绍一下其中通用的部分常用函数</p>
<h4 id="从底层填充">从底层填充</h4>
<p>当打开一个文件后，page cache
不会立即缓存这个文件的所有数据页，而是随着对文件的读写来逐渐填充的</p>
<p><code>readpage</code> 和 <code>readpages</code>
就是将底层存储设备上的一个或者多个页的数据读到 page cache 中</p>
<h4 id="写入修改">写入修改</h4>
<p>page cache 的写入较为复杂，主要分为三个阶段：</p>
<ol type="1">
<li><code>write_begin</code>
主要负责查找、或者分配新的物理页，并将其锁定，有时还需要先从底层读取最新的数据页</li>
<li><code>writepage</code> 或者 <code>writepages</code>
就是负责对这些物理页的实际写入过程</li>
<li><code>write_end</code> 主要负责解锁这些物理页，并且更新
<code>inode</code> 中的元数据信息，例如 <code>i_size</code></li>
</ol>
<h4 id="其他">其他</h4>
<p><code>direct_IO</code> 则是负责不经过 page cache 的直接 IO 的实现</p>
<p>需要注意的是，当需要读的数据在 page cache
中缓存的和底层存储数据不一致时，也就是 <code>page</code> 为
<code>dirty</code> 状态时，通常需要调用
<code>filemap_write_and_wait</code> 或者
<code>filemap_write_and_wait_range</code>
先将这部分脏数据写到底层设备之后，才能执行 direct read</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGhvbWFzLWtyZW5uLmNvbS9lbi93aWtpL0xpbnV4X1N0b3JhZ2VfU3RhY2tfRGlhZ3JhbQ==">【Thomas-Krenn-Wiki】Linux
Storage Stack Diagram<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1UzNWZS9hcnRpY2xlL2RldGFpbHMvODIzMjI2Mzc=">【CSDN】浅墨:
聊聊 Linux IO (中) —— Linux 内核中的 IO 栈<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9jLWRldmVsb3BwZW1lbnQtZHVyYWJsZS5vcmcvZmlsZS9Qcm9qZXRzLWluZm9ybWF0aXF1ZXMvY291cnMtJi1tYW51ZWxzLWluZm9ybWF0aXF1ZXMvTGludXgvTGludXglMjBLZXJuZWwlMjBEZXZlbG9wbWVudCwlMjAzcmQlMjBFZGl0aW9uLnBkZg==">【LKD】Linux
Kernel Development (3rd Edition)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9rZXJuZWwudGFvYmFvLm9yZy8yMDE4LzA1L1RoZS1YQXJyYXktZGF0YS1zdHJ1Y3R1cmUv">【阿里云技术博客】The
Xarray Data Structure<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzI1NDg1Ni8=">【LWN】Some VFS address
space operations changes<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGluaGFvc3R1ZHkvcC8xMDE5NjkxNS5odG1s">【博客园】Page
Cache 与 Page 回写<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>存储</category>
        <category>IO</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>kernel</tag>
        <tag>buffer IO</tag>
        <tag>page cache</tag>
        <tag>writeback</tag>
      </tags>
  </entry>
  <entry>
    <title>美化 Shell 之 Windows/Linux PowerShell 篇</title>
    <url>/posts/8ad4716e.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p><code>PowerShell</code> 是 Windows 最新的 <code>Shell</code>，而且在
GitHub 上开源并且提供了跨平台支持（虽然估计没哪个 <code>Linux</code>
用户会选择 <code>PowerShell</code></p>
<p>为了美化 <code>PowerShell</code>，个人选择了
<code>Oh My Posh</code>。<code>Oh My Posh</code>
是一个开源的主体的框架，支持
<code>PowerShell</code>、<code>CMD</code>、<code>Zsh</code>、<code>Bash</code>、<code>Fish</code>
等多种 <code>Shell</code></p>
<p>本文主要记录自己的 <code>Oh My Posh</code> 安装以及配置流程
<span id="more"></span></p>
<h2 id="安装最新的-powershell">安装最新的 <code>PowerShell</code></h2>
<p>Windows 默认安装的 <code>PowerShell</code> 版本太旧，所以先通过
<code>winget</code> 安装最新的版本</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># winget search Microsoft.PowerShell</span></span><br><span class="line">winget install <span class="literal">--id</span> Microsoft.Powershell <span class="literal">--source</span> winget</span><br></pre></td></tr></tbody></table></figure>
<h2 id="安装-oh-my-posh">安装 <code>Oh My Posh</code></h2>
<p>通过 <code>winget</code> 一键安装 <code>Oh My Posh</code> 即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">winget install JanDeDobbeleer.OhMyPosh -s winget</span><br></pre></td></tr></tbody></table></figure>
<h2 id="安装-nerd-字体">安装 Nerd 字体</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubmVyZGZvbnRzLmNvbS8=">Nerd 字体<i class="fa fa-external-link-alt"></i></span>
其实只是在原本的开源字体上增加了一些图标（包括 PowerLine
所需的符号），而 <code>Oh My Posh</code> 中大多数主体都需要 Nerd
字体</p>
<p>直接在 <span class="exturl" data-url="aHR0cHM6Ly93d3cubmVyZGZvbnRzLmNvbS9mb250LWRvd25sb2Fkcw==">官网<i class="fa fa-external-link-alt"></i></span>
或者 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J5YW5vYXNpcy9uZXJkLWZvbnRzL3JlbGVhc2Vz">GitHub
的 Release<i class="fa fa-external-link-alt"></i></span> 中下载自己常用字体的压缩包，解压后直接打开 ttf
文件安装即可</p>
<p>个人习惯用 <code>Cascadia Code</code>、<code>FiraCode</code></p>
<p>字体的启用与 <code>Shell</code> 的运行程序相关，需要在 VSCode 或者
Windows Terminal 应用中单独配置，这里不做介绍</p>
<h2 id="启用-oh-my-posh">启用 <code>Oh My Posh</code></h2>
<p>启用 <code>Oh My Posh</code> 需要修改配置文件，通过 notepad
直接打开配置文件</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>如果打开报错，则需要首先创建配置文件</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">New-Item</span> <span class="literal">-Path</span> <span class="variable">$PROFILE</span> <span class="literal">-Type</span> File <span class="literal">-Force</span></span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<p>在配置文件中添加以下内容，以后启动 <code>PowerShell</code>
就会自动启用 <code>Oh My Posh</code> 了</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">oh</span><span class="literal">-my-posh</span> init pwsh | <span class="built_in">Invoke-Expression</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="选择主题">选择主题</h2>
<p><code>Oh My Posh</code>
支持非常丰富的主题，而且只需一行命令就可以直接在 <code>Shell</code>
预览</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">Get-PoshThemes</span></span><br></pre></td></tr></tbody></table></figure>
<p>个人选择了 <code>powerlevel10k_rainbow</code>
主题，修改主题需要修改之前的配置文件，将之前内容进行修改即可，配置完成后需要重启终端～</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">oh</span><span class="literal">-my-posh</span> init pwsh <span class="literal">--config</span> <span class="string">"<span class="variable">$env:POSH_THEMES_PATH</span>/powerlevel10k_rainbow.omp.json"</span> | <span class="built_in">Invoke-Expression</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9vaG15cG9zaC5kZXYv">【ohmyposh】Oh My Posh 官网<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbkRlRG9iYmVsZWVyL29oLW15LXBvc2g=">【GitHub】Oh
My Posh 仓库<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL3Bvd2Vyc2hlbGwvc2NyaXB0aW5nL2luc3RhbGwvaW5zdGFsbGluZy1wb3dlcnNoZWxsLW9uLXdpbmRvd3M/dmlldz1wb3dlcnNoZWxsLTcuMw==">【Microsoft】Installing
PowerShell on Windows<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vaG15cG9zaC5kZXYvZG9jcy9pbnN0YWxsYXRpb24vd2luZG93cw==">【ohmyposh】Installation-Windows<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vaG15cG9zaC5kZXYvZG9jcy9pbnN0YWxsYXRpb24vZm9udHM=">【ohmyposh】Fonts<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vaG15cG9zaC5kZXYvZG9jcy9pbnN0YWxsYXRpb24vcHJvbXB0">【ohmyposh】Prompt<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>PowerShell</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>美化 Shell 之 Linux Zsh 篇</title>
    <url>/posts/f2cdf8a6.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p><code>Z shell（Zsh）</code>是一款可用作互动式登入的 shell 及指令码编写的命令直译器。
<code>Zsh</code> 对 Linux 默认的
<code>Bourne shell（sh）</code>做出了大量改进，同时加入了
<code>Bash</code>、<code>ksh</code> 及 <code>tcsh</code> 的某些功能。
并且自 2019 年起，macOS 的预设 <code>Shell</code> 已从 <code>Bash</code>
改为 <code>Zsh</code></p>
<p>为了美化以及快速配置 <code>Zsh</code>，<code>Oh My Zsh</code>
应运而生。 <code>Oh My Zsh</code>
是一个开源的、社区驱动的框架，支持各种插件以及主题，在管理
<code>Zsh</code> 配置提供了很大的便利</p>
<p>本文主要记录自己的 <code>Oh My Zsh</code> 安装以及配置流程
<span id="more"></span></p>
<h2 id="安装-zsh">安装 <code>Zsh</code></h2>
<p>如果没有安装 <code>Zsh</code> 则需要手动安装一下，以 Ubuntu
为例：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br></pre></td></tr></tbody></table></figure>
<p>配置 Zsh 为默认 Shell</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="安装-oh-my-zsh">安装 <code>Oh My Zsh</code></h2>
<p>通过 <code>curl</code> 或者 <code>wget</code> 下载安装脚本一键安装
<code>Oh My Zsh</code> 即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># curl</span></span><br><span class="line">sh -c <span class="string">"<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span><br><span class="line"><span class="comment"># wget</span></span><br><span class="line">sh -c <span class="string">"<span class="subst">$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<p>类似于 <code>bash</code> 的配置文件 <code>~/.bashrc</code>
命名规则类似，<code>Zsh</code> 的配置文件是
<code>~/.zshrc</code>，后续配置只需对该配置文件进行小小的修改即可</p>
<h2 id="主题配置">主题配置</h2>
<p><code>Oh My Zsh</code> 支持非常丰富的主题，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29obXl6c2gvb2hteXpzaC93aWtpL1RoZW1lcw==">官方<i class="fa fa-external-link-alt"></i></span>
给出了内置的所有主题的预览图</p>
<p>部分主题需要额外 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bvd2VybGluZS9mb250cw==">PL
字体<i class="fa fa-external-link-alt"></i></span> 以及 <span class="exturl" data-url="aHR0cHM6Ly93d3cubmVyZGZvbnRzLmNvbS8=">Nerd 字体<i class="fa fa-external-link-alt"></i></span>
支持，参见 <a href="/posts/8ad4716e.html#安装%20Nerd%20字体">安装 Nerd
字体</a></p>
<p>由于在 <a href="/posts/8ad4716e.html"><code>Oh My Posh</code></a>
中用习惯了 <code>powerlevel10k</code>，并且 <code>powerlevel10k</code>
也支持 <code>Oh My Zsh</code>，于是后来又额外安装了
<code>powerlevel10k</code> 主题</p>
<p>安装流程也很方便，直接从 GitHub 拉取仓库，然后修改配置文件即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">${ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom}</span>/themes/powerlevel10k</span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">"powerlevel10k/powerlevel10k"</span></span><br></pre></td></tr></tbody></table></figure>
<p>之后重启终端后，<code>powerlevel10k</code>
会进入引导流程，可以自行微调风格</p>
<h2 id="插件安装">插件安装</h2>
<p><code>Oh My Zsh</code> 默认会开启 <code>git</code>
插件，除此之外个人还额外安装了 <code>zsh-autosuggestions</code> 以及
<code>zsh-syntax-highlighting</code> 插件</p>
<h3 id="zsh-autosuggestions"><code>zsh-autosuggestions</code></h3>
<p><code>zsh-autosuggestions</code> 开启后，<code>Zsh</code>
会根据历史记录和完成情况在您键入时建议命令，也就是根据历史记录快速补全命令，非常的好用！！！</p>
<p>安装起来也非常简单，直接 <code>git clone</code> 即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-autosuggestions</span><br><span class="line"><span class="comment"># git clone git@github.com:zsh-users/zsh-autosuggestions.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</span></span><br></pre></td></tr></tbody></table></figure>
<p>之后修改配置文件，在 <code>plugins</code> 中加入
<code>zsh-autosuggestions</code> 即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">plugins=(git zsh-autosuggestions)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="zsh-syntax-highlighting"><code>zsh-syntax-highlighting</code></h3>
<p><code>zsh-syntax-highlighting</code>
开启后，在输入命令时就有了语法高亮，提升整体颜值的同时，还能辅助检查命令是否打错，安装过程类似</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># git clone git@github.com:zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</span></span><br></pre></td></tr></tbody></table></figure>
<p>之后修改配置文件，在 <code>plugins</code> 中加入
<code>zsh-syntax-highlighting</code> 即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWhrL1pfc2hlbGw=">【维基百科】Z
shell<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vaG15ei5zaC8=">【ohmyz】Oh My Zsh 官网<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29obXl6c2gvb2hteXpzaA==">【GitHub】Oh My Zsh
仓库<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29obXl6c2gvb2hteXpzaC93aWtpL0luc3RhbGxpbmctWlNI">【GitHub】Installing
ZSH<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29obXl6c2gvb2hteXpzaC93aWtpL1RoZW1lcw==">【GitHub】Themes<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtYXV0b3N1Z2dlc3Rpb25z">【GitHub】zsh-autosuggestions<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtc3ludGF4LWhpZ2hsaWdodGluZw==">【GitHub】zsh-syntax-highlighting<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MjUwMTE3NQ==">【Zhihu】oh-my-zsh：让终端飞<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbWthdHYvcG93ZXJsZXZlbDEwayNpbnN0YWxsYXRpb24=">【GitHub】Powerlevel10k<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>page cache 回写机制</title>
    <url>/posts/646202b9.html</url>
    <content><![CDATA[<p>当前内容基于 Linux Kernel <span class="exturl" data-url="aHR0cHM6Ly9naXQua2VybmVsLm9yZy9wdWIvc2NtL2xpbnV4L2tlcm5lbC9naXQvc3RhYmxlL2xpbnV4LmdpdC90YWcvP2g9djUuNC4xMjE=">v5.4.121<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="writeback-回写">writeback 回写</h2>
<p>在 <a href="/posts/9ba60726">page cache 简介</a> 有过介绍</p>
<p>buffer IO 通过 page cache
进行缓存，减少对底层存储设备的直接读写，同时能够提高整体性能</p>
<p>写入到 page cache
的数据不会立刻写入后端设备，而是标记为 “脏”，并被加入到脏页链表，后续由内核中的回写进程周期性的将脏页写回到底层存储设备</p>
<p>下面主要分析 page cache 回写机制的策略和实现 <span id="more"></span></p>
<h2 id="相关结构体">相关结构体</h2>
<h3 id="底层设备信息">底层设备信息</h3>
<p>在 <code>include/linux/backing-dev-defs.h</code> 中定义了
<code>backing_dev_info</code> 结构体，主要用与记录底层的设备信息</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">backing_dev_info</span> {</span></span><br><span class="line">	u64 id;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node</span>;</span> <span class="comment">/* keyed by -&gt;id */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">bdi_list</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> ra_pages;	<span class="comment">/* max readahead in PAGE_SIZE units */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> io_pages;	<span class="comment">/* max allowed IO size */</span></span><br><span class="line">	congested_fn *congested_fn; <span class="comment">/* Function pointer if device is md/dm */</span></span><br><span class="line">	<span class="type">void</span> *congested_data;	<span class="comment">/* Pointer to aux data for congested func */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通常为 "block"</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">kref</span> <span class="title">refcnt</span>;</span>	<span class="comment">/* Reference counter for the structure */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> capabilities; <span class="comment">/* Device capabilities */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> min_ratio;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> max_ratio, max_prop_frac;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Sum of avg_write_bw of wbs with dirty inodes.  &gt; 0 if there are</span></span><br><span class="line"><span class="comment">	 * any dirty wbs, which is depended upon by bdi_has_dirty().</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">atomic_long_t</span> tot_write_bandwidth;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">bdi_writeback</span> <span class="title">wb</span>;</span>  <span class="comment">/* the root writeback info for this bdi */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">wb_list</span>;</span> <span class="comment">/* list of all wbs */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CGROUP_WRITEBACK</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">radix_tree_root</span> <span class="title">cgwb_tree</span>;</span> <span class="comment">/* radix tree of active cgroup wbs */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">cgwb_congested_tree</span>;</span> <span class="comment">/* their congested states */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">cgwb_release_mutex</span>;</span>  <span class="comment">/* protect shutdown of wb structs */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> <span class="title">wb_switch_rwsem</span>;</span> <span class="comment">/* no cgwb switch while syncing */</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">bdi_writeback_congested</span> *<span class="title">wb_congested</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="type">wait_queue_head_t</span> wb_waitq;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// bdi_class 设备</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">	<span class="comment">// 主设备号:次设备号</span></span><br><span class="line">	<span class="type">char</span> dev_name[<span class="number">64</span>];</span><br><span class="line">	<span class="comment">// 实际的底层设备</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">owner</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">timer_list</span> <span class="title">laptop_mode_wb_timer</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_FS</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">debug_dir</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<h4 id="初始化">初始化</h4>
<p>该结构体只会由 <code>mm/backing-dev.c</code> 中的
<code>bdi_alloc_node</code> 函数来申请内存空间并调用
<code>bdi_init</code> 初始化</p>
<h4 id="部分字段说明">部分字段说明</h4>
<ol type="1">
<li><p><code>name</code> 字段</p>
<figure>
<img data-src="/posts/646202b9/bdi_name.png" alt="name 字段">
<figcaption aria-hidden="true">name 字段</figcaption>
</figure>
<p>在 <code>block/blk-core.c</code> 中 <code>blk_alloc_queue_node</code>
会调用 <code>bdi_alloc_node</code> 来初始化该结构体，其中
<code>name</code> 字段赋值为 <code>"block"</code></p></li>
<li><p><code>dev</code> 字段</p>
<p>在 <code>mm/backing-dev.c</code> 的 <code>bdi_register_va</code>
会调用 <code>device_create</code> 创建一个 <code>bdi_class</code>
类型的设备，并赋值给 <code>dev</code> 字段</p></li>
<li><p><code>dev_name</code> 字段</p>
<p>在 <code>mm/backing-dev.c</code> 的 <code>bdi_register_va</code>
还会对 <code>dev_name</code> 进行赋值</p>
<figure>
<img data-src="/posts/646202b9/bdi_dev_name.png" alt="dev_name 字段">
<figcaption aria-hidden="true">dev_name 字段</figcaption>
</figure>
<p>根据调用栈溯源可以发现，<code>mm/backing-dev.c</code> 的
<code>bdi_register_owner</code> 将 <code>fmt</code> 和 <code>args</code>
传递到
<code>bdi_register_va</code>，最终会将主设备号和次设备号拼接组合后进行赋值</p></li>
<li><p><code>owner</code> 字段</p>
<p>在 <code>mm/backing-dev.c</code> 的 <code>bdi_register_owner</code>
还会对 <code>owner</code> 进行赋值</p>
<figure>
<img data-src="/posts/646202b9/bdi_owner.png" alt="owner 字段">
<figcaption aria-hidden="true">owner 字段</figcaption>
</figure>
<p>实际赋值的为 <code>disk</code> 对应的 <code>dev</code>，通过
<code>disk_to_dev</code> 宏转换得到</p></li>
</ol>
<h3 id="设备回写管理">设备回写管理</h3>
<p>在 <code>include/linux/backing-dev-defs.h</code> 中定义了
<code>bdi_writeback</code> 结构体，用于管理一个块设备的回写，同时支持
<code>cgroup</code> 进行限制</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Each wb (bdi_writeback) can perform writeback operations, is measured</span></span><br><span class="line"><span class="comment"> * and throttled, independently.  Without cgroup writeback, each bdi</span></span><br><span class="line"><span class="comment"> * (bdi_writeback) is served by its embedded bdi-&gt;wb.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * On the default hierarchy, blkcg implicitly enables memcg.  This allows</span></span><br><span class="line"><span class="comment"> * using memcg's page ownership for attributing writeback IOs, and every</span></span><br><span class="line"><span class="comment"> * memcg - blkcg combination can be served by its own wb by assigning a</span></span><br><span class="line"><span class="comment"> * dedicated wb to each memcg, which enables isolation across different</span></span><br><span class="line"><span class="comment"> * cgroups and propagation of IO back pressure down from the IO layer upto</span></span><br><span class="line"><span class="comment"> * the tasks which are generating the dirty pages to be written back.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A cgroup wb is indexed on its bdi by the ID of the associated memcg,</span></span><br><span class="line"><span class="comment"> * refcounted with the number of inodes attached to it, and pins the memcg</span></span><br><span class="line"><span class="comment"> * and the corresponding blkcg.  As the corresponding blkcg for a memcg may</span></span><br><span class="line"><span class="comment"> * change as blkcg is disabled and enabled higher up in the hierarchy, a wb</span></span><br><span class="line"><span class="comment"> * is tested for blkcg after lookup and removed from index on mismatch so</span></span><br><span class="line"><span class="comment"> * that a new wb for the combination can be created.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bdi_writeback</span> {</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">backing_dev_info</span> *<span class="title">bdi</span>;</span>	<span class="comment">/* our parent bdi */</span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> state;		<span class="comment">/* Always use atomic bitops on this */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> last_old_flush;	<span class="comment">/* last old data flush */</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">b_dirty</span>;</span>	<span class="comment">/* dirty inodes */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">b_io</span>;</span>		<span class="comment">/* parked for writeback */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">b_more_io</span>;</span>	<span class="comment">/* parked for more writeback */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">b_dirty_time</span>;</span>	<span class="comment">/* time stamps are dirty */</span></span><br><span class="line">	<span class="type">spinlock_t</span> list_lock;		<span class="comment">/* protects the b_* lists */</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">percpu_counter</span> <span class="title">stat</span>[<span class="title">NR_WB_STAT_ITEMS</span>];</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">bdi_writeback_congested</span> *<span class="title">congested</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> bw_time_stamp;	<span class="comment">/* last time write bw is updated */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> dirtied_stamp;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> written_stamp;	<span class="comment">/* pages written at bw_time_stamp */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> write_bandwidth;	<span class="comment">/* the estimated write bandwidth */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> avg_write_bandwidth; <span class="comment">/* further smoothed write bw, &gt; 0 */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * The base dirty throttle rate, re-calculated on every 200ms.</span></span><br><span class="line"><span class="comment">	 * All the bdi tasks' dirty rate will be curbed under it.</span></span><br><span class="line"><span class="comment">	 * @dirty_ratelimit tracks the estimated @balanced_dirty_ratelimit</span></span><br><span class="line"><span class="comment">	 * in small steps and is much more smooth/stable than the latter.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> dirty_ratelimit;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> balanced_dirty_ratelimit;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fprop_local_percpu</span> <span class="title">completions</span>;</span></span><br><span class="line">	<span class="type">int</span> dirty_exceeded;</span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">wb_reason</span> <span class="title">start_all_reason</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="type">spinlock_t</span> work_lock;		<span class="comment">/* protects work_list &amp; dwork scheduling */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">work_list</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">delayed_work</span> <span class="title">dwork</span>;</span>	<span class="comment">/* work item used for writeback */</span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> dirty_sleep;	<span class="comment">/* last wait */</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">bdi_node</span>;</span>	<span class="comment">/* anchored at bdi-&gt;wb_list */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CGROUP_WRITEBACK</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">percpu_ref</span> <span class="title">refcnt</span>;</span>	<span class="comment">/* used only for !root wb's */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fprop_local_percpu</span> <span class="title">memcg_completions</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">cgroup_subsys_state</span> *<span class="title">memcg_css</span>;</span> <span class="comment">/* the associated memcg */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">cgroup_subsys_state</span> *<span class="title">blkcg_css</span>;</span> <span class="comment">/* and blkcg */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">memcg_node</span>;</span>	<span class="comment">/* anchored at memcg-&gt;cgwb_list */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">blkcg_node</span>;</span>	<span class="comment">/* anchored at blkcg-&gt;cgwb_list */</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">union</span> {</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">release_work</span>;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span></span><br><span class="line">	};</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<h4 id="初始化-1">初始化</h4>
<p>该结构体由 <code>mm/backing-dev.c</code> 中的 <code>wb_init</code>
函数初始化</p>
<pre class="mermaid">graph TD
bdi_init --&gt; cgwb_bdi_init --&gt; wb_init</pre>
<h4 id="部分字段说明-1">部分字段说明</h4>
<ol type="1">
<li><p><code>b_dirty</code> 字段</p>
<p>暂存所有的脏 inode 的链表</p></li>
<li><p><code>b_io</code> 字段</p>
<p>暂存即将回写的 inode 的链表</p></li>
<li><p><code>b_more_io</code> 字段</p>
<p>暂存由于一次回写数量限制原因导致的等待下次回写的 inode 链表</p></li>
<li><p><code>b_dirty_time</code> 字段</p>
<p>暂存仅仅是时间戳更新而被至脏的 inode 的链表</p></li>
<li><p><code>list_lock</code> 字段</p>
<p>为了保护上述 4 个 <code>b_*</code> 列表的自旋锁</p></li>
<li><p><code>dwork</code> 字段</p>
<p>用于 page cache 回写机制的 <code>work</code> 关键结构体</p></li>
<li><p><code>work_list</code> 字段</p>
<p>暂存所有需要回写的任务的链表</p></li>
<li><p><code>work_lock</code> 字段</p>
<p>为了保护 <code>work_list</code> 以及 <code>dwork</code>
调度的自旋锁</p></li>
</ol>
<h3 id="回写任务">回写任务</h3>
<p>在 <code>fs/fs-writeback.c</code> 中定义了
<code>wb_writeback_work</code>
结构体，用于描述一次回写任务的相关参数</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Passed into wb_writeback(), essentially a subset of writeback_control</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wb_writeback_work</span> {</span></span><br><span class="line">	<span class="comment">// 本次回写的页数限制</span></span><br><span class="line">	<span class="type">long</span> nr_pages;</span><br><span class="line">	<span class="comment">// 回写的文件系统的超级块</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">sb</span>;</span></span><br><span class="line">	<span class="comment">// 回写的模式</span></span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">writeback_sync_modes</span> <span class="title">sync_mode</span>;</span></span><br><span class="line">	<span class="comment">// tag-and-write 机制标记</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> tagged_writepages:<span class="number">1</span>;</span><br><span class="line">	<span class="comment">// 定期回写标记</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> for_kupdate:<span class="number">1</span>;</span><br><span class="line">	<span class="comment">// 继续上次循环回写标记</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> range_cyclic:<span class="number">1</span>;</span><br><span class="line">	<span class="comment">// 阈值回写标记</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> for_background:<span class="number">1</span>;</span><br><span class="line">	<span class="comment">// sync 系统调用标记</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> for_sync:<span class="number">1</span>;	<span class="comment">/* sync(2) WB_SYNC_ALL writeback */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> auto_free:<span class="number">1</span>;	<span class="comment">/* free on completion */</span></span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">wb_reason</span> <span class="title">reason</span>;</span>		<span class="comment">/* why was writeback initiated? */</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span>		<span class="comment">/* pending work list */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">wb_completion</span> *<span class="title">done</span>;</span>	<span class="comment">/* set if the caller waits */</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>后续通过 <code>include/linux/writeback.h</code> 中的
<code>writeback_control</code> 结构体封装，传递给底层的
<code>writepages</code> 函数</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A control structure which tells the writeback code what to do.  These are</span></span><br><span class="line"><span class="comment"> * always on the stack, and hence need no locking.  They are always initialised</span></span><br><span class="line"><span class="comment"> * in a manner such that unspecified fields are set to zero.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">writeback_control</span> {</span></span><br><span class="line">	<span class="type">long</span> nr_to_write;		<span class="comment">/* Write this many pages, and decrement</span></span><br><span class="line"><span class="comment">					   this for each page written */</span></span><br><span class="line">	<span class="type">long</span> pages_skipped;		<span class="comment">/* Pages which were not written */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * For a_ops-&gt;writepages(): if start or end are non-zero then this is</span></span><br><span class="line"><span class="comment">	 * a hint that the filesystem need only write out the pages inside that</span></span><br><span class="line"><span class="comment">	 * byterange.  The byte at `end' is included in the writeout request.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">loff_t</span> range_start;</span><br><span class="line">	<span class="type">loff_t</span> range_end;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">writeback_sync_modes</span> <span class="title">sync_mode</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> for_kupdate:<span class="number">1</span>;		<span class="comment">/* A kupdate writeback */</span></span><br><span class="line">	<span class="type">unsigned</span> for_background:<span class="number">1</span>;	<span class="comment">/* A background writeback */</span></span><br><span class="line">	<span class="type">unsigned</span> tagged_writepages:<span class="number">1</span>;	<span class="comment">/* tag-and-write to avoid livelock */</span></span><br><span class="line">	<span class="type">unsigned</span> for_reclaim:<span class="number">1</span>;		<span class="comment">/* Invoked from the page allocator */</span></span><br><span class="line">	<span class="type">unsigned</span> range_cyclic:<span class="number">1</span>;	<span class="comment">/* range_start is cyclic */</span></span><br><span class="line">	<span class="type">unsigned</span> for_sync:<span class="number">1</span>;		<span class="comment">/* sync(2) WB_SYNC_ALL writeback */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * When writeback IOs are bounced through async layers, only the</span></span><br><span class="line"><span class="comment">	 * initial synchronous phase should be accounted towards inode</span></span><br><span class="line"><span class="comment">	 * cgroup ownership arbitration to avoid confusion.  Later stages</span></span><br><span class="line"><span class="comment">	 * can set the following flag to disable the accounting.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> no_cgroup_owner:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> punt_to_cgroup:<span class="number">1</span>;	<span class="comment">/* cgrp punting, see __REQ_CGROUP_PUNT */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CGROUP_WRITEBACK</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">bdi_writeback</span> *<span class="title">wb</span>;</span>	<span class="comment">/* wb this writeback is issued under */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span>;</span>		<span class="comment">/* inode being written out */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* foreign inode detection, see wbc_detach_inode() */</span></span><br><span class="line">	<span class="type">int</span> wb_id;			<span class="comment">/* current wb id */</span></span><br><span class="line">	<span class="type">int</span> wb_lcand_id;		<span class="comment">/* last foreign candidate wb id */</span></span><br><span class="line">	<span class="type">int</span> wb_tcand_id;		<span class="comment">/* this foreign candidate wb id */</span></span><br><span class="line">	<span class="type">size_t</span> wb_bytes;		<span class="comment">/* bytes written by current wb */</span></span><br><span class="line">	<span class="type">size_t</span> wb_lcand_bytes;		<span class="comment">/* bytes written by last candidate */</span></span><br><span class="line">	<span class="type">size_t</span> wb_tcand_bytes;		<span class="comment">/* bytes written by this candidate */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<h4 id="部分字段说明-2">部分字段说明</h4>
<ol type="1">
<li><p><code>sync_mode</code> 字段</p>
<p><code>WB_SYNC_NONE</code>：绝大部分回写任务的配置，不会等待回写真正落盘，下发写命令后就返回</p>
<p><code>WB_SYNC_ALL</code>：<code>sync</code>
系统调用时配置，必须等待回调函数执行完成，写的数据真正落盘之后才会返回</p></li>
<li><p><code>tagged_writepages</code> 字段</p>
<p>值为 1 表示开启 <code>tag-and-write</code>
机制用于避免活锁。该机制详情参考 <a href="#tag-and-write">后续小节</a></p></li>
<li><p><code>for_kupdate</code> 字段</p>
<p>值为 1
表示当前任务是定期回写任务，用于回写已经至脏超过指定时间（内核中当前配置为
30s）的脏页。定期回写详情参考 <a href="#定期回写">后续小节</a></p></li>
<li><p><code>range_cyclic</code> 字段</p>
<p>值为 1 表示当前任务的回写范围为整个
<code>inode</code>，并且从上次完成的位置作为起始位置进行循环回写。值为 0
则根据 <code>struct writeback_control wbc</code> 的
<code>range_start</code> 以及 <code>range_end</code>
作为回写的范围。<code>range_cyclic</code> 的详情参考 <a href="#range_cyclic">后续小节</a></p></li>
<li><p><code>for_background</code> 字段</p>
<p>值为 1
表示当前任务是阈值回写任务，当脏页比例超过阈值后才会触发。阈值回写详情参考
<a href="#阈值回写">后续小节</a></p></li>
<li><p><code>for_sync</code> 字段</p>
<p>值为 1 表示当前任务是阈值回写任务 <code>sync</code>
系统调用手动触发的回写任务。<code>sync</code> 系统调用详情参考 <a href="#sync">后续小节</a></p></li>
</ol>
<h2 id="回写线程">回写线程</h2>
<p>前面说过 <code>bdi_writeback</code> 结构体中
<code>struct delayed_work dwork</code> 就是关键的负责 page cache
回写工作的结构体</p>
<h3 id="初始化-2">初始化</h3>
<p><code>wb_init</code> 函数会对 <code>wb-&gt;dwork</code>
赋值，注册实际的工作函数 <code>wb_workfn</code></p>
<p>由于这是个
<code>delayed_work</code>，注册的工作函数不会立即执行，需要后续利用
<code>mod_delayed_work</code> 来修改 <code>delayed_work</code>
内置的定时器时间来唤醒</p>
<figure>
<img data-src="/posts/646202b9/wb_init.png" alt="wb_init 调用图">
<figcaption aria-hidden="true">wb_init 调用图</figcaption>
</figure>
<p>(P.S. 图片中函数开头为 <code>cg</code> 代表和 <code>cgroup</code>
相关，同一层级多个同名函数和宏定义的编译控制有关)</p>
<p>根据函数调用图，大致分析可知，当设备申请 <code>queue</code>
时会初始化 <code>backing_dev_info</code> 结构体和
<code>bdi_writeback</code> 结构体，以及初始化回写线程</p>
<h3 id="立即唤醒">立即唤醒</h3>
<p>虽然 <code>dwork</code> 是个
<code>delayed_work</code>，但是我们可以在调用
<code>mod_delayed_work</code> 将延时设置为 0，来立即唤醒回写线程</p>
<figure>
<img data-src="/posts/646202b9/dwork_callers.png" alt="dwork 调用图">
<figcaption aria-hidden="true">dwork 调用图</figcaption>
</figure>
<h4 id="wb_wakeup"><code>wb_wakeup</code></h4>
<p><code>wb_wakeup</code> 就是修改延时为 0，直接唤醒回写线程</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// fs/fs-writeback.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wb_wakeup</span><span class="params">(<span class="keyword">struct</span> bdi_writeback *wb)</span></span><br><span class="line">{</span><br><span class="line">	spin_lock_bh(&amp;wb-&gt;work_lock);</span><br><span class="line">	<span class="keyword">if</span> (test_bit(WB_registered, &amp;wb-&gt;state))</span><br><span class="line">		mod_delayed_work(bdi_wq, &amp;wb-&gt;dwork, <span class="number">0</span>);</span><br><span class="line">	spin_unlock_bh(&amp;wb-&gt;work_lock);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="wb_queue_work"><code>wb_queue_work</code></h4>
<p><code>wb_queue_work</code>
将一个回写任务插入到队列尾部，然后修改延时为 0，立即唤醒回写线程</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// fs/fs-writeback.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wb_queue_work</span><span class="params">(<span class="keyword">struct</span> bdi_writeback *wb,</span></span><br><span class="line"><span class="params">			  <span class="keyword">struct</span> wb_writeback_work *work)</span></span><br><span class="line">{</span><br><span class="line">	trace_writeback_queue(wb, work);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (work-&gt;done)</span><br><span class="line">		<span class="type">atomic_inc</span>(&amp;work-&gt;done-&gt;cnt);</span><br><span class="line"></span><br><span class="line">	spin_lock_bh(&amp;wb-&gt;work_lock);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (test_bit(WB_registered, &amp;wb-&gt;state)) {</span><br><span class="line">		list_add_tail(&amp;work-&gt;<span class="built_in">list</span>, &amp;wb-&gt;work_list);</span><br><span class="line">		mod_delayed_work(bdi_wq, &amp;wb-&gt;dwork, <span class="number">0</span>);</span><br><span class="line">	} <span class="keyword">else</span></span><br><span class="line">		finish_writeback_work(wb, work);</span><br><span class="line"></span><br><span class="line">	spin_unlock_bh(&amp;wb-&gt;work_lock);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="定时唤醒">定时唤醒</h3>
<p>定时唤醒主要是由 <code>wb_wakeup_delayed</code>
来实现的，而时间间隔在 <code>mm/page-writeback.c</code> 进行了定义</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// mm/page-writeback.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The interval between `kupdate'-style writebacks</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> dirty_writeback_interval = <span class="number">5</span> * <span class="number">100</span>; <span class="comment">/* centiseconds */</span></span><br><span class="line"></span><br><span class="line">EXPORT_SYMBOL_GPL(dirty_writeback_interval);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// mm/backing-dev.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This function is used when the first inode for this wb is marked dirty. It</span></span><br><span class="line"><span class="comment"> * wakes-up the corresponding bdi thread which should then take care of the</span></span><br><span class="line"><span class="comment"> * periodic background write-out of dirty inodes. Since the write-out would</span></span><br><span class="line"><span class="comment"> * starts only 'dirty_writeback_interval' centisecs from now anyway, we just</span></span><br><span class="line"><span class="comment"> * set up a timer which wakes the bdi thread up later.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note, we wouldn't bother setting up the timer, but this function is on the</span></span><br><span class="line"><span class="comment"> * fast-path (used by '__mark_inode_dirty()'), so we save few context switches</span></span><br><span class="line"><span class="comment"> * by delaying the wake-up.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * We have to be careful not to postpone flush work if it is scheduled for</span></span><br><span class="line"><span class="comment"> * earlier. Thus we use queue_delayed_work().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wb_wakeup_delayed</span><span class="params">(<span class="keyword">struct</span> bdi_writeback *wb)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> timeout;</span><br><span class="line"></span><br><span class="line">	timeout = msecs_to_jiffies(dirty_writeback_interval * <span class="number">10</span>);</span><br><span class="line">	spin_lock_bh(&amp;wb-&gt;work_lock);</span><br><span class="line">	<span class="keyword">if</span> (test_bit(WB_registered, &amp;wb-&gt;state))</span><br><span class="line">		queue_delayed_work(bdi_wq, &amp;wb-&gt;dwork, timeout);</span><br><span class="line">	spin_unlock_bh(&amp;wb-&gt;work_lock);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>wb_wakeup_delayed</code> 使用 5s 作为时间间隔，当调用
<code>wb_wakeup_delayed</code> 后，回写线程会在 5s 后被唤醒</p>
<figure>
<img data-src="/posts/646202b9/wb_wakeup_delayed.png" alt="wb_wakeup_delayed 调用图">
<figcaption aria-hidden="true">wb_wakeup_delayed 调用图</figcaption>
</figure>
<p>定时唤醒只会在两种情形下被调用：</p>
<ul>
<li><code>__mark_inode_dirty</code>：当给一个 <code>inode</code>
标记为脏时，如果脏的不仅仅是时间戳，而且当前的 <code>b_dirty</code>
链表是空的，也就是说第一次将脏页挂在 <code>b_dirty</code>
链表时，开启定时唤醒</li>
<li><code>wb_workfn</code>：当回写线程处理完 <code>work_list</code>
上的所有任务后，如果仍有脏 <code>inode</code> 在
<code>b_{dirty|io|more_io}</code> 上时，开启定时唤醒</li>
</ul>
<p>简单的讲，就是只要存在脏 <code>inode</code> 在
<code>b_{dirty|io|more_io}</code> 上时，内核的回写线程每 5s
内肯定会被唤醒一次</p>
<h3 id="释放销毁">释放销毁</h3>
<figure>
<img data-src="/posts/646202b9/release_bdi.png" alt="release_bdi 调用图">
<figcaption aria-hidden="true">release_bdi 调用图</figcaption>
</figure>
<p>当需要对整个 <code>backing_dev_info</code>
结构释放时，也会立即唤醒内核回写线程，并且会下刷现有的所有工作</p>
<pre class="mermaid">graph TD
release_bdi --&gt; bdi_unregister --&gt; wb_shutdown
release_bdi ---&gt; wb_exit</pre>
<h2 id="细节分析">细节分析</h2>
<h3 id="tag-and-write"><code>tag-and-write</code></h3>
<p>该机制会在 <code>write_pages</code>
时先快速对下刷范围内的脏页进行标记，后续只对标记过的脏页进行下刷</p>
<p>首先回写任务的参数会通过 <code>fs/fs-writeback.c</code> 的
<code>writeback_sb_inodes</code> 函数传递给
<code>struct writeback_control wbc</code></p>
<p>后续在 <code>mm/page-writeback.c</code> 中
<code>write_cache_pages</code> 就会根据 <code>wbc</code> 的
<code>tagged_writepages</code> 字段进行判断，配置不同的
<code>tag</code>，以及是否需要快速遍历脏页并标记</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * write_cache_pages - walk the list of dirty pages of the given address space and write all of them.</span></span><br><span class="line"><span class="comment"> * @mapping: address space structure to write</span></span><br><span class="line"><span class="comment"> * @wbc: subtract the number of written pages from *@wbc-&gt;nr_to_write</span></span><br><span class="line"><span class="comment"> * @writepage: function called for each page</span></span><br><span class="line"><span class="comment"> * @data: data passed to writepage function</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If a page is already under I/O, write_cache_pages() skips it, even</span></span><br><span class="line"><span class="comment"> * if it's dirty.  This is desirable behaviour for memory-cleaning writeback,</span></span><br><span class="line"><span class="comment"> * but it is INCORRECT for data-integrity system calls such as fsync().  fsync()</span></span><br><span class="line"><span class="comment"> * and msync() need to guarantee that all the data which was dirty at the time</span></span><br><span class="line"><span class="comment"> * the call was made get new I/O started against them.  If wbc-&gt;sync_mode is</span></span><br><span class="line"><span class="comment"> * WB_SYNC_ALL then we were called for data integrity and we must wait for</span></span><br><span class="line"><span class="comment"> * existing IO to complete.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * To avoid livelocks (when other process dirties new pages), we first tag</span></span><br><span class="line"><span class="comment"> * pages which should be written back with TOWRITE tag and only then start</span></span><br><span class="line"><span class="comment"> * writing them. For data-integrity sync we have to be careful so that we do</span></span><br><span class="line"><span class="comment"> * not miss some pages (e.g., because some other process has cleared TOWRITE</span></span><br><span class="line"><span class="comment"> * tag we set). The rule we follow is that TOWRITE tag can be cleared only</span></span><br><span class="line"><span class="comment"> * by the process clearing the DIRTY tag (and submitting the page for IO).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * To avoid deadlocks between range_cyclic writeback and callers that hold</span></span><br><span class="line"><span class="comment"> * pages in PageWriteback to aggregate IO until write_cache_pages() returns,</span></span><br><span class="line"><span class="comment"> * we do not loop back to the start of the file. Doing so causes a page</span></span><br><span class="line"><span class="comment"> * lock/page writeback access order inversion - we should only ever lock</span></span><br><span class="line"><span class="comment"> * multiple pages in ascending page-&gt;index order, and looping back to the start</span></span><br><span class="line"><span class="comment"> * of the file violates that rule and causes deadlocks.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Return: %0 on success, negative error code otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">write_cache_pages</span><span class="params">(<span class="keyword">struct</span> address_space *mapping,</span></span><br><span class="line"><span class="params">		      <span class="keyword">struct</span> writeback_control *wbc, <span class="type">writepage_t</span> writepage,</span></span><br><span class="line"><span class="params">		      <span class="type">void</span> *data)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> done = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> error;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pagevec</span> <span class="title">pvec</span>;</span></span><br><span class="line">	<span class="type">int</span> nr_pages;</span><br><span class="line">	<span class="type">pgoff_t</span> <span class="title function_">uninitialized_var</span><span class="params">(writeback_index)</span>;</span><br><span class="line">	<span class="type">pgoff_t</span> index;</span><br><span class="line">	<span class="type">pgoff_t</span> end;		<span class="comment">/* Inclusive */</span></span><br><span class="line">	<span class="type">pgoff_t</span> done_index;</span><br><span class="line">	<span class="type">int</span> range_whole = <span class="number">0</span>;</span><br><span class="line">	<span class="type">xa_mark_t</span> tag;</span><br><span class="line"></span><br><span class="line">	pagevec_init(&amp;pvec);</span><br><span class="line">	<span class="keyword">if</span> (wbc-&gt;range_cyclic) {</span><br><span class="line">		writeback_index = mapping-&gt;writeback_index; <span class="comment">/* prev offset */</span></span><br><span class="line">		index = writeback_index;</span><br><span class="line">		end = <span class="number">-1</span>;</span><br><span class="line">	} <span class="keyword">else</span> {</span><br><span class="line">		index = wbc-&gt;range_start &gt;&gt; PAGE_SHIFT;</span><br><span class="line">		end = wbc-&gt;range_end &gt;&gt; PAGE_SHIFT;</span><br><span class="line">		<span class="keyword">if</span> (wbc-&gt;range_start == <span class="number">0</span> &amp;&amp; wbc-&gt;range_end == LLONG_MAX)</span><br><span class="line">			range_whole = <span class="number">1</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span> (wbc-&gt;sync_mode == WB_SYNC_ALL || wbc-&gt;tagged_writepages)</span><br><span class="line">		tag = PAGECACHE_TAG_TOWRITE;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		tag = PAGECACHE_TAG_DIRTY;</span><br><span class="line">	<span class="keyword">if</span> (wbc-&gt;sync_mode == WB_SYNC_ALL || wbc-&gt;tagged_writepages)</span><br><span class="line">		tag_pages_for_writeback(mapping, index, end);</span><br><span class="line">	done_index = index;</span><br><span class="line">	<span class="keyword">while</span> (!done &amp;&amp; (index &lt;= end)) {</span><br><span class="line">		<span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">		nr_pages = pagevec_lookup_range_tag(&amp;pvec, mapping, &amp;index, end,</span><br><span class="line">				tag);</span><br><span class="line">		<span class="keyword">if</span> (nr_pages == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nr_pages; i++) {</span><br><span class="line">			<span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">page</span> =</span> pvec.pages[i];</span><br><span class="line"></span><br><span class="line">			done_index = page-&gt;index;</span><br><span class="line"></span><br><span class="line">			lock_page(page);</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * Page truncated or invalidated. We can freely skip it</span></span><br><span class="line"><span class="comment">			 * then, even for data integrity operations: the page</span></span><br><span class="line"><span class="comment">			 * has disappeared concurrently, so there could be no</span></span><br><span class="line"><span class="comment">			 * real expectation of this data interity operation</span></span><br><span class="line"><span class="comment">			 * even if there is now a new, dirty page at the same</span></span><br><span class="line"><span class="comment">			 * pagecache address.</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="keyword">if</span> (unlikely(page-&gt;mapping != mapping)) {</span><br><span class="line">continue_unlock:</span><br><span class="line">				unlock_page(page);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			}</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (!PageDirty(page)) {</span><br><span class="line">				<span class="comment">/* someone wrote it for us */</span></span><br><span class="line">				<span class="keyword">goto</span> continue_unlock;</span><br><span class="line">			}</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (PageWriteback(page)) {</span><br><span class="line">				<span class="keyword">if</span> (wbc-&gt;sync_mode != WB_SYNC_NONE)</span><br><span class="line">					wait_on_page_writeback(page);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="keyword">goto</span> continue_unlock;</span><br><span class="line">			}</span><br><span class="line"></span><br><span class="line">			BUG_ON(PageWriteback(page));</span><br><span class="line">			<span class="keyword">if</span> (!clear_page_dirty_for_io(page))</span><br><span class="line">				<span class="keyword">goto</span> continue_unlock;</span><br><span class="line"></span><br><span class="line">			trace_wbc_writepage(wbc, inode_to_bdi(mapping-&gt;host));</span><br><span class="line">			error = (*writepage)(page, wbc, data);</span><br><span class="line">			<span class="keyword">if</span> (unlikely(error)) {</span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">				 * Handle errors according to the type of</span></span><br><span class="line"><span class="comment">				 * writeback. There's no need to continue for</span></span><br><span class="line"><span class="comment">				 * background writeback. Just push done_index</span></span><br><span class="line"><span class="comment">				 * past this page so media errors won't choke</span></span><br><span class="line"><span class="comment">				 * writeout for the entire file. For integrity</span></span><br><span class="line"><span class="comment">				 * writeback, we must process the entire dirty</span></span><br><span class="line"><span class="comment">				 * set regardless of errors because the fs may</span></span><br><span class="line"><span class="comment">				 * still have state to clear for each page. In</span></span><br><span class="line"><span class="comment">				 * that case we continue processing and return</span></span><br><span class="line"><span class="comment">				 * the first error.</span></span><br><span class="line"><span class="comment">				 */</span></span><br><span class="line">				<span class="keyword">if</span> (error == AOP_WRITEPAGE_ACTIVATE) {</span><br><span class="line">					unlock_page(page);</span><br><span class="line">					error = <span class="number">0</span>;</span><br><span class="line">				} <span class="keyword">else</span> <span class="keyword">if</span> (wbc-&gt;sync_mode != WB_SYNC_ALL) {</span><br><span class="line">					ret = error;</span><br><span class="line">					done_index = page-&gt;index + <span class="number">1</span>;</span><br><span class="line">					done = <span class="number">1</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">if</span> (!ret)</span><br><span class="line">					ret = error;</span><br><span class="line">			}</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * We stop writing back only if we are not doing</span></span><br><span class="line"><span class="comment">			 * integrity sync. In case of integrity sync we have to</span></span><br><span class="line"><span class="comment">			 * keep going until we have written all the pages</span></span><br><span class="line"><span class="comment">			 * we tagged for writeback prior to entering this loop.</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="keyword">if</span> (--wbc-&gt;nr_to_write &lt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">			    wbc-&gt;sync_mode == WB_SYNC_NONE) {</span><br><span class="line">				done = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		pagevec_release(&amp;pvec);</span><br><span class="line">		cond_resched();</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * If we hit the last page and there is more work to be done: wrap</span></span><br><span class="line"><span class="comment">	 * back the index back to the start of the file for the next</span></span><br><span class="line"><span class="comment">	 * time we are called.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (wbc-&gt;range_cyclic &amp;&amp; !done)</span><br><span class="line">		done_index = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (wbc-&gt;range_cyclic || (range_whole &amp;&amp; wbc-&gt;nr_to_write &gt; <span class="number">0</span>))</span><br><span class="line">		mapping-&gt;writeback_index = done_index;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line">EXPORT_SYMBOL(write_cache_pages);</span><br></pre></td></tr></tbody></table></figure>
<p>在 <code>fs/fs-writeback.c</code> 中
<code>writeback_chunk_size</code> 里面的注释也对这个流程进行了描述</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">writeback_chunk_size</span><span class="params">(<span class="keyword">struct</span> bdi_writeback *wb,</span></span><br><span class="line"><span class="params">				 <span class="keyword">struct</span> wb_writeback_work *work)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">long</span> pages;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * WB_SYNC_ALL mode does livelock avoidance by syncing dirty</span></span><br><span class="line"><span class="comment">	 * inodes/pages in one big loop. Setting wbc.nr_to_write=LONG_MAX</span></span><br><span class="line"><span class="comment">	 * here avoids calling into writeback_inodes_wb() more than once.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * The intended call sequence for WB_SYNC_ALL writeback is:</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 *      wb_writeback()</span></span><br><span class="line"><span class="comment">	 *          writeback_sb_inodes()       &lt;== called only once</span></span><br><span class="line"><span class="comment">	 *              write_cache_pages()     &lt;== called once for each inode</span></span><br><span class="line"><span class="comment">	 *                   (quickly) tag currently dirty pages</span></span><br><span class="line"><span class="comment">	 *                   (maybe slowly) sync all tagged pages</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (work-&gt;sync_mode == WB_SYNC_ALL || work-&gt;tagged_writepages)</span><br><span class="line">		pages = LONG_MAX;</span><br><span class="line">	<span class="keyword">else</span> {</span><br><span class="line">		pages = min(wb-&gt;avg_write_bandwidth / <span class="number">2</span>,</span><br><span class="line">			    global_wb_domain.dirty_limit / DIRTY_SCOPE);</span><br><span class="line">		pages = min(pages, work-&gt;nr_pages);</span><br><span class="line">		pages = round_down(pages + MIN_WRITEBACK_PAGES,</span><br><span class="line">				   MIN_WRITEBACK_PAGES);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pages;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="range_cyclic"><code>range_cyclic</code></h3>
<p><code>range_cyclic</code> 早在内核的 v2.6.18-rc1
版本就已经实现，可以参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RvcnZhbGRzL2xpbnV4L2NvbW1pdC8xMTFlYmI2ZTZmN2JkN2RlNmQ3MjJjNTg0OGU5NTYyMWY0MzcwMGQ5">111ebb6<i class="fa fa-external-link-alt"></i></span>
的提交信息辅助理解</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[PATCH] writeback: fix range handling</span><br><span class="line">When a writeback_control's `start' and `end' fields are used to</span><br><span class="line">indicate a one-byte-range starting at file offset zero, the required</span><br><span class="line">values of .start=0,.end=0 mean that the -&gt;writepages() implementation</span><br><span class="line">has no way of telling that it is being asked to perform a range</span><br><span class="line">request.  Because we're currently overloading (start == 0 &amp;&amp; end == 0)</span><br><span class="line">to mean "this is not a write-a-range request".</span><br><span class="line"></span><br><span class="line">To make all this sane, the patch changes range of writeback_control.</span><br><span class="line"></span><br><span class="line">So caller does: If it is calling -&gt;writepages() to write pages, it</span><br><span class="line">sets range (range_start/end or range_cyclic) always.</span><br><span class="line"></span><br><span class="line">And if range_cyclic is true, -&gt;writepages() thinks the range is</span><br><span class="line">cyclic, otherwise it just uses range_start and range_end.</span><br><span class="line"></span><br><span class="line">This patch does,</span><br><span class="line"></span><br><span class="line">    - Add LLONG_MAX, LLONG_MIN, ULLONG_MAX to include/linux/kernel.h</span><br><span class="line">      -1 is usually ok for range_end (type is long long). But, if someone did,</span><br><span class="line"></span><br><span class="line">		range_end += val;		range_end is "val - 1"</span><br><span class="line">		u64val = range_end &gt;&gt; bits;	u64val is "~(0ULL)"</span><br><span class="line"></span><br><span class="line">      or something, they are wrong. So, this adds LLONG_MAX to avoid nasty</span><br><span class="line">      things, and uses LLONG_MAX for range_end.</span><br><span class="line"></span><br><span class="line">    - All callers of -&gt;writepages() sets range_start/end or range_cyclic.</span><br><span class="line"></span><br><span class="line">    - Fix updates of -&gt;writeback_index. It seems already bit strange.</span><br><span class="line">      If it starts at 0 and ended by check of nr_to_write, this last</span><br><span class="line">      index may reduce chance to scan end of file.  So, this updates</span><br><span class="line">      -&gt;writeback_index only if range_cyclic is true or whole-file is</span><br><span class="line">      scanned.</span><br><span class="line"></span><br><span class="line">Signed-off-by: OGAWA Hirofumi &lt;hirofumi@mail.parknet.co.jp&gt;</span><br><span class="line">Cc: Nathan Scott &lt;nathans@sgi.com&gt;</span><br><span class="line">Cc: Anton Altaparmakov &lt;aia21@cantab.net&gt;</span><br><span class="line">Cc: Steven French &lt;sfrench@us.ibm.com&gt;</span><br><span class="line">Cc: "Vladimir V. Saveliev" &lt;vs@namesys.com&gt;</span><br><span class="line">Signed-off-by: Andrew Morton &lt;akpm@osdl.org&gt;</span><br><span class="line">Signed-off-by: Linus Torvalds &lt;torvalds@osdl.org&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>range_cyclic</code> 和 <code>range_start/end</code> 互斥</p>
<ul>
<li>当开启 <code>range_cyclic</code> 将无视 <code>range_start/end</code>
的值</li>
<li>否则底层 <code>writepages</code> 函数则使用
<code>range_start/end</code> 作为写的范围 </li>
</ul>
<pre class="mermaid">graph TD
do_writepages --&gt; writepages("mapping-&gt;a_ops-&gt;writepages()")
do_writepages --&gt; generic_writepages --&gt; write_cache_pages</pre>
<p>结合实际代码，在 <code>mm/page-writeback.c</code> 的
<code>write_cache_pages</code> 函数中有以下片段</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (wbc-&gt;range_cyclic) {</span><br><span class="line">	writeback_index = mapping-&gt;writeback_index; <span class="comment">/* prev offset */</span></span><br><span class="line">	index = writeback_index;</span><br><span class="line">	end = <span class="number">-1</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">	index = wbc-&gt;range_start &gt;&gt; PAGE_SHIFT;</span><br><span class="line">	end = wbc-&gt;range_end &gt;&gt; PAGE_SHIFT;</span><br><span class="line">	<span class="keyword">if</span> (wbc-&gt;range_start == <span class="number">0</span> &amp;&amp; wbc-&gt;range_end == LLONG_MAX)</span><br><span class="line">		range_whole = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处省略部分代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we hit the last page and there is more work to be done: wrap</span></span><br><span class="line"><span class="comment"> * back the index back to the start of the file for the next</span></span><br><span class="line"><span class="comment"> * time we are called.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (wbc-&gt;range_cyclic &amp;&amp; !done)</span><br><span class="line">	done_index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (wbc-&gt;range_cyclic || (range_whole &amp;&amp; wbc-&gt;nr_to_write &gt; <span class="number">0</span>))</span><br><span class="line">	mapping-&gt;writeback_index = done_index;</span><br></pre></td></tr></tbody></table></figure>
<p><code>range_cyclic</code> 开启后会使用
<code>mapping-&gt;writeback_index</code>
作为本次回写的起始地址，并会在完成本次回写流程（回写页数限制或者到达文件末尾）后更新
<code>mapping-&gt;writeback_index</code></p>
<h3 id="定期回写">定期回写</h3>
<p>定期回写的任务声明在 <code>fs/fs-writeback.c</code> 的
<code>wb_check_old_data_flush</code> 函数中，而这个函数则是被
<code>wb_workfn</code> 调用</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">wb_check_old_data_flush</span><span class="params">(<span class="keyword">struct</span> bdi_writeback *wb)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> expired;</span><br><span class="line">	<span class="type">long</span> nr_pages;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * When set to zero, disable periodic writeback</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (!dirty_writeback_interval)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	expired = wb-&gt;last_old_flush +</span><br><span class="line">			msecs_to_jiffies(dirty_writeback_interval * <span class="number">10</span>);</span><br><span class="line">	<span class="keyword">if</span> (time_before(jiffies, expired))</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	wb-&gt;last_old_flush = jiffies;</span><br><span class="line">	nr_pages = get_nr_dirty_pages();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (nr_pages) {</span><br><span class="line">		<span class="comment">// 定期回写</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">wb_writeback_work</span> <span class="title">work</span> =</span> {</span><br><span class="line">			.nr_pages	= nr_pages,</span><br><span class="line">			.sync_mode	= WB_SYNC_NONE,</span><br><span class="line">			.for_kupdate	= <span class="number">1</span>,</span><br><span class="line">			.range_cyclic	= <span class="number">1</span>,</span><br><span class="line">			.reason		= WB_REASON_PERIODIC,</span><br><span class="line">		};</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> wb_writeback(wb, &amp;work);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<pre class="mermaid">graph TD
wb_wakeup -.-&gt; wb_workfn --&gt;|通常情况| wb_do_writeback --&gt; wb_check_old_data_flush</pre>
<p>首先要保证当前时间在上次定期回写的 5s
（和定期唤醒的时间间隔一致）后，并且当前存在脏页，才会生成一次定期回写的任务，也就是说每
5s 内最多触发一次定期回写</p>
<p>生成的回写任务交给 <code>fs/fs-writeback.c</code> 的
<code>wb_writeback</code> 函数处理</p>
<p>并且定期回写属于一种后台回写，优先级较低，只有在
<code>wb-&gt;work_list</code> 为空时才会执行</p>
<p><code>wb_writeback</code> 执行定期回写时只会选择在至脏时间在当前时间
30s 之前的 <code>inode</code> 的所有脏页进行回写</p>
<h3 id="阈值回写">阈值回写</h3>
<p>针对脏页率内核中有两个阈值，10% 和 20%</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// mm/page-writeback.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Start background writeback (via writeback threads) at this percentage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> dirty_background_ratio = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The generator of dirty data starts writeback at this percentage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> vm_dirty_ratio = <span class="number">20</span>;</span><br></pre></td></tr></tbody></table></figure>
<ol type="1">
<li><p>bg_thresh 后台阈值</p>
<p>当脏页率达到 10% 时会以后台的方式进行回写</p>
<pre class="mermaid">   graph TD
 generic_perform_write --&gt; balance_dirty_pages_ratelimited --&gt; balance_dirty_pages --&gt; wb_start_background_writeback --&gt; wb_wakeup
 wb_wakeup -.-&gt; wb_workfn --&gt;|通常情况| wb_do_writeback --&gt;|wb_over_bg_thresh| wb_check_background_flush</pre>
<p>当用户 <code>write</code> 调用使用 <code>generic_perform_write</code>
来写 page cache 时，会调用 <code>balance_dirty_pages_ratelimited</code>
来检查脏页率，当脏页率超过 10% 就会调用 <code>balance_dirty_pages</code>
来唤醒 <code>wb_workfn</code> 来进行下刷脏页，此时并不会阻塞当前的
<code>write</code> 过程</p></li>
<li><p> thresh 前台阈值</p>
<p>而当脏页率达到 20%
之后则会触发前台回写，此时的函数调用和逻辑和上面基本一致，不同点在于当脏页率超过
20% 后会在 <code>balance_dirty_pages</code>
的循环中无法跳出，因此线程会阻塞，直到脏页率降低至 20%
以下，跳出循环，启用后台回写</p></li>
</ol>
<h2 id="手动触发回写">手动触发回写</h2>
<h3 id="sync"><code>sync</code></h3>
<p><code>sync</code> 系统调用会同步所有的 page cache</p>
<p>在 <code>bash</code> 上直接输入 <code>sync</code> 命令就会触发
<code>sync</code> 系统调用</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// fs/sync.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Sync everything. We start by waking flusher threads so that most of</span></span><br><span class="line"><span class="comment"> * writeback runs on all devices in parallel. Then we sync all inodes reliably</span></span><br><span class="line"><span class="comment"> * which effectively also waits for all flusher threads to finish doing</span></span><br><span class="line"><span class="comment"> * writeback. At this point all data is on disk so metadata should be stable</span></span><br><span class="line"><span class="comment"> * and we tell filesystems to sync their metadata via -&gt;sync_fs() calls.</span></span><br><span class="line"><span class="comment"> * Finally, we writeout all block devices because some filesystems (e.g. ext2)</span></span><br><span class="line"><span class="comment"> * just write metadata (such as inodes or bitmaps) to block device page cache</span></span><br><span class="line"><span class="comment"> * and do not sync it on their own in -&gt;sync_fs().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ksys_sync</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> nowait = <span class="number">0</span>, wait = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 唤醒所有 bdi 的回写线程</span></span><br><span class="line">	wakeup_flusher_threads(WB_REASON_SYNC);</span><br><span class="line">	<span class="comment">// 下发所有 inode 的回写任务</span></span><br><span class="line">	iterate_supers(sync_inodes_one_sb, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">// 调用 sync_fs() 同步文件系统的元数据</span></span><br><span class="line">	iterate_supers(sync_fs_one_sb, &amp;nowait);</span><br><span class="line">	iterate_supers(sync_fs_one_sb, &amp;wait);</span><br><span class="line">	<span class="comment">// 回写块设备的 page cache</span></span><br><span class="line">	iterate_bdevs(fdatawrite_one_bdev, <span class="literal">NULL</span>);</span><br><span class="line">	iterate_bdevs(fdatawait_one_bdev, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (unlikely(laptop_mode))</span><br><span class="line">		laptop_sync_completion();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">SYSCALL_DEFINE0(sync)</span><br><span class="line">{</span><br><span class="line">	ksys_sync();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>首先，唤醒所有设备的回写线程线程，这样大部分的回写在所有设备上并行运行</li>
<li>并立刻生成一个下刷设备上所有 inode 的回写任务，并等待完成</li>
<li>然后文件系统通过注册的 <code>sync_fs()</code>
调用来同步他们的元数据</li>
<li>最后，回写所有的块设备的 page cache
<ul>
<li>因为有些文件系统（例如 <code>ext2</code>）会将元数据（如
<code>inodes</code> 或 <code>bitmaps</code>）写入块设备 page
cache，而不是在 <code>sync_fs()</code> 中自行同步</li>
</ul></li>
</ul>
<h3 id="fsync-和-fdatasync"><code>fsync</code> 和
<code>fdatasync</code></h3>
<p><code>fsync</code> 和 <code>fdatasync</code>
系统调用则可以更加细粒度的下刷脏页，他们的下刷对象是一个文件</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// fs/sync.c</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * vfs_fsync_range - helper to sync a range of data &amp; metadata to disk</span></span><br><span class="line"><span class="comment"> * @file:		file to sync</span></span><br><span class="line"><span class="comment"> * @start:		offset in bytes of the beginning of data range to sync</span></span><br><span class="line"><span class="comment"> * @end:		offset in bytes of the end of data range (inclusive)</span></span><br><span class="line"><span class="comment"> * @datasync:		perform only datasync</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Write back data in range @start..@end and metadata for @file to disk.  If</span></span><br><span class="line"><span class="comment"> * @datasync is set only metadata needed to access modified file data is</span></span><br><span class="line"><span class="comment"> * written.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">vfs_fsync_range</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">loff_t</span> start, <span class="type">loff_t</span> end, <span class="type">int</span> datasync)</span></span><br><span class="line">{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span> =</span> file-&gt;f_mapping-&gt;host;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!file-&gt;f_op-&gt;fsync)</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line">	<span class="keyword">if</span> (!datasync &amp;&amp; (inode-&gt;i_state &amp; I_DIRTY_TIME))</span><br><span class="line">		mark_inode_dirty_sync(inode);</span><br><span class="line">	<span class="keyword">return</span> file-&gt;f_op-&gt;fsync(file, start, end, datasync);</span><br><span class="line">}</span><br><span class="line">EXPORT_SYMBOL(vfs_fsync_range);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * vfs_fsync - perform a fsync or fdatasync on a file</span></span><br><span class="line"><span class="comment"> * @file:		file to sync</span></span><br><span class="line"><span class="comment"> * @datasync:		only perform a fdatasync operation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Write back data and metadata for @file to disk.  If @datasync is</span></span><br><span class="line"><span class="comment"> * set only metadata needed to access modified file data is written.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">vfs_fsync</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">int</span> datasync)</span></span><br><span class="line">{</span><br><span class="line">	<span class="keyword">return</span> vfs_fsync_range(file, <span class="number">0</span>, LLONG_MAX, datasync);</span><br><span class="line">}</span><br><span class="line">EXPORT_SYMBOL(vfs_fsync);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">do_fsync</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> fd, <span class="type">int</span> datasync)</span></span><br><span class="line">{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span> =</span> fdget(fd);</span><br><span class="line">	<span class="type">int</span> ret = -EBADF;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (f.file) {</span><br><span class="line">		ret = vfs_fsync(f.file, datasync);</span><br><span class="line">		fdput(f);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">SYSCALL_DEFINE1(fsync, <span class="type">unsigned</span> <span class="type">int</span>, fd)</span><br><span class="line">{</span><br><span class="line">	<span class="keyword">return</span> do_fsync(fd, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">SYSCALL_DEFINE1(fdatasync, <span class="type">unsigned</span> <span class="type">int</span>, fd)</span><br><span class="line">{</span><br><span class="line">	<span class="keyword">return</span> do_fsync(fd, <span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>fsync</code> 和 <code>fdatasync</code> 会调用文件系统注册的
<code>f_op-&gt;fsync()</code>
函数进行脏页的下刷。很多文件系统会使用或者参考通用的
<code>generic_file_fsync</code> 来实现，这里针对
<code>__generic_file_fsync</code> 进行分析</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// fs/libfs.c</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * __generic_file_fsync - generic fsync implementation for simple filesystems</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @file:	file to synchronize</span></span><br><span class="line"><span class="comment"> * @start:	start offset in bytes</span></span><br><span class="line"><span class="comment"> * @end:	end offset in bytes (inclusive)</span></span><br><span class="line"><span class="comment"> * @datasync:	only synchronize essential metadata if true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This is a generic implementation of the fsync method for simple</span></span><br><span class="line"><span class="comment"> * filesystems which track all non-inode metadata in the buffers list</span></span><br><span class="line"><span class="comment"> * hanging off the address_space structure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> __generic_file_fsync(<span class="keyword">struct</span> file *file, <span class="type">loff_t</span> start, <span class="type">loff_t</span> end,</span><br><span class="line">				 <span class="type">int</span> datasync)</span><br><span class="line">{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span> =</span> file-&gt;f_mapping-&gt;host;</span><br><span class="line">	<span class="type">int</span> err;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">	err = file_write_and_wait_range(file, start, end);</span><br><span class="line">	<span class="keyword">if</span> (err)</span><br><span class="line">		<span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">	inode_lock(inode);</span><br><span class="line">	ret = sync_mapping_buffers(inode-&gt;i_mapping);</span><br><span class="line">	<span class="keyword">if</span> (!(inode-&gt;i_state &amp; I_DIRTY_ALL))</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	<span class="keyword">if</span> (datasync &amp;&amp; !(inode-&gt;i_state &amp; I_DIRTY_DATASYNC))</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">	err = sync_inode_metadata(inode, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">		ret = err;</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">	inode_unlock(inode);</span><br><span class="line">	<span class="comment">/* check and advance again to catch errors after syncing out buffers */</span></span><br><span class="line">	err = file_check_and_advance_wb_err(file);</span><br><span class="line">	<span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">		ret = err;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line">EXPORT_SYMBOL(__generic_file_fsync);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * generic_file_fsync - generic fsync implementation for simple filesystems</span></span><br><span class="line"><span class="comment"> *			with flush</span></span><br><span class="line"><span class="comment"> * @file:	file to synchronize</span></span><br><span class="line"><span class="comment"> * @start:	start offset in bytes</span></span><br><span class="line"><span class="comment"> * @end:	end offset in bytes (inclusive)</span></span><br><span class="line"><span class="comment"> * @datasync:	only synchronize essential metadata if true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">generic_file_fsync</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">loff_t</span> start, <span class="type">loff_t</span> end,</span></span><br><span class="line"><span class="params">		       <span class="type">int</span> datasync)</span></span><br><span class="line">{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span> =</span> file-&gt;f_mapping-&gt;host;</span><br><span class="line">	<span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">	err = __generic_file_fsync(file, start, end, datasync);</span><br><span class="line">	<span class="keyword">if</span> (err)</span><br><span class="line">		<span class="keyword">return</span> err;</span><br><span class="line">	<span class="keyword">return</span> blkdev_issue_flush(inode-&gt;i_sb-&gt;s_bdev, GFP_KERNEL, <span class="literal">NULL</span>);</span><br><span class="line">}</span><br><span class="line">EXPORT_SYMBOL(generic_file_fsync);</span><br></pre></td></tr></tbody></table></figure>
<p>无论 <code>fsync</code> 还是 <code>fdatasync</code> 都会调用
<code>file_write_and_wait_range</code> 下刷 page cache 中的脏页。而在
indoe 本身元数据只是时间戳是脏时，<code>fdatasync</code> 就会跳过
<code>sync_inode_metadata</code>，不将元数据一起下刷到底层设备上；<code>fsync</code>
则不会跳过元数据的下刷。</p>
<p>因此 <code>fsync</code> 至少需要两次 IO 写操作，开销比
<code>fdatasync</code> 更大</p>
<h3 id="open-时带有-o_sync"><code>open</code> 时带有
<code>O_SYNC</code></h3>
<p>如果在打开一个文件时带了 <code>O_SYNC</code> 标记，则会在写入 page
cache 后，再次调用 <code>vfs_fsync_range</code>
将数据下刷到底层设备上</p>
<pre class="mermaid">graph LR
write系统调用 --&gt; ksys_write --&gt; vfs_write --&gt; __vfs_write --&gt;|ext4,f2fs等文件系统| new_sync_write</pre>
<p>在 <code>ext4</code>、<code>f2fs</code> 等文件系统 <code>write</code>
系统调用会使用 <code>new_sync_write</code> 来调用实际文件系统注册的
<code>read_iter</code> 函数</p>
<p>而 <code>new_sync_write</code> 调用先调用 <code>iocb_flags</code>
将用户配置的 <code>O_SYNC</code> 进行解析，为 <code>struct kiocb</code>
的 <code>ki_flags</code> 字段生成标记</p>
<pre class="mermaid">graph TD
new_sync_write --&gt; init_sync_kiocb --&gt; iocb_flags
new_sync_write --&gt; iov_iter_init
new_sync_write --&gt; call_write_iter</pre>
<p>和之前一样，大多数文件系统会直接使用或者参考通用的
<code>generic_file_write_iter</code> 来实现 <code>read_iter</code>
函数，这里针对 <code>generic_file_write_iter</code> 进行分析</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// mm/filemap.c</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * generic_file_write_iter - write data to a file</span></span><br><span class="line"><span class="comment"> * @iocb:	IO state structure</span></span><br><span class="line"><span class="comment"> * @from:	iov_iter with data to write</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This is a wrapper around __generic_file_write_iter() to be used by most</span></span><br><span class="line"><span class="comment"> * filesystems. It takes care of syncing the file in case of O_SYNC file</span></span><br><span class="line"><span class="comment"> * and acquires i_mutex as needed.</span></span><br><span class="line"><span class="comment"> * Return:</span></span><br><span class="line"><span class="comment"> * * negative error code if no data has been written at all of</span></span><br><span class="line"><span class="comment"> *   vfs_fsync_range() failed for a synchronous write</span></span><br><span class="line"><span class="comment"> * * number of bytes written, even for truncated writes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">generic_file_write_iter</span><span class="params">(<span class="keyword">struct</span> kiocb *iocb, <span class="keyword">struct</span> iov_iter *from)</span></span><br><span class="line">{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span> =</span> iocb-&gt;ki_filp;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span> =</span> file-&gt;f_mapping-&gt;host;</span><br><span class="line">	<span class="type">ssize_t</span> ret;</span><br><span class="line"></span><br><span class="line">	inode_lock(inode);</span><br><span class="line">	ret = generic_write_checks(iocb, from);</span><br><span class="line">	<span class="keyword">if</span> (ret &gt; <span class="number">0</span>)</span><br><span class="line">		ret = __generic_file_write_iter(iocb, from);</span><br><span class="line">	inode_unlock(inode);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ret &gt; <span class="number">0</span>)</span><br><span class="line">		ret = generic_write_sync(iocb, ret);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line">EXPORT_SYMBOL(generic_file_write_iter);</span><br></pre></td></tr></tbody></table></figure>
<p>在 <code>__generic_file_write_iter</code>
完成之后，实际的数据已经被写入 page cache，之后会调用
<code>generic_write_sync</code> 会将刚刚写入 page cache 的数据通过
<code>vfs_fsync_range</code> 下刷到底层设备上</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// include/linux/fs.h</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Sync the bytes written if this was a synchronous write.  Expect ki_pos</span></span><br><span class="line"><span class="comment"> * to already be updated for the write, and will return either the amount</span></span><br><span class="line"><span class="comment"> * of bytes passed in, or an error if syncing the file failed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">ssize_t</span> <span class="title function_">generic_write_sync</span><span class="params">(<span class="keyword">struct</span> kiocb *iocb, <span class="type">ssize_t</span> count)</span></span><br><span class="line">{</span><br><span class="line">	<span class="keyword">if</span> (iocb-&gt;ki_flags &amp; IOCB_DSYNC) {</span><br><span class="line">		<span class="type">int</span> ret = vfs_fsync_range(iocb-&gt;ki_filp,</span><br><span class="line">				iocb-&gt;ki_pos - count, iocb-&gt;ki_pos - <span class="number">1</span>,</span><br><span class="line">				(iocb-&gt;ki_flags &amp; IOCB_SYNC) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (ret)</span><br><span class="line">			<span class="keyword">return</span> ret;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phc29uYWN0aW9ucy9hcnRpY2xlL2RldGFpbHMvMTE3MjkyMjMz">【CSDN】VFS
基础学习笔记 - 7. page cache 回写<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE2NDk0MDAvYXJ0aWNsZS9kZXRhaWxzLzk2NTA1NjAw">【CSDN】VFS
源码分析 - Page Cache Writeback 脏页回写机制<i class="fa fa-external-link-alt"></i></span></li>
<li>以及在评论区的某位不愿透露姓名的 dalao 的笔记</li>
</ul>
]]></content>
      <categories>
        <category>存储</category>
        <category>IO</category>
      </categories>
      <tags>
        <tag>kernel</tag>
        <tag>buffer IO</tag>
        <tag>page cache</tag>
        <tag>writeback</tag>
      </tags>
  </entry>
  <entry>
    <title>rm -r 与 rmdir 区别</title>
    <url>/posts/935ae1f0.html</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>今天学弟在使用 NVMe-over-TCP 时发现无法卸载 <code>nvmet</code>
驱动，显示使用中</p>
<p>在一起探讨和测试中发现最终的原因竟然在于 <code>rm -r</code> 和
<code>rmdir</code> 这两个命令上 <span id="more"></span></p>
<h2 id="二者区别">二者区别</h2>
<table>
<colgroup>
<col style="width: 9%">
<col style="width: 59%">
<col style="width: 30%">
</colgroup>
<thead>
<tr class="header">
<th>命令</th>
<th>主要系统调用</th>
<th>操作对象</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>rmdir</code></td>
<td><code>rmdir</code></td>
<td>仅目录</td>
</tr>
<tr class="even">
<td><code>rm -r</code></td>
<td><code>openat</code>, <code>getdents64</code>, <code>close</code>,
<code>unlinkat</code></td>
<td>目录，以及目录所有文件</td>
</tr>
</tbody>
</table>
<h3 id="rmdir"><code>rmdir</code></h3>
<p><code>rmdir</code> 直接调用 <code>rmdir</code>
来删除目录，如果目录非空，则会删除失败</p>
<h3 id="rm--r"><code>rm -r</code></h3>
<ol type="1">
<li>会先用 <code>openat</code> 打开目录，通过 <code>getdents64</code>
获取目录中的内容，然后 <code>close</code> 目录</li>
<li>再第二次加上 <code>O_CLOEXEC</code> 标记 <code>openat</code>
打开目录，表明当前目录即将删除，再次通过 <code>getdents64</code>
获取目录中的内容，然后 <code>close</code> 目录</li>
<li>然后依次通过 <code>unlinkat</code> 删除目录中的内容</li>
<li>最后通过 <code>unlinkat</code> 删除目录</li>
</ol>
<h3 id="rm--rf"><code>rm -rf</code></h3>
<p>但是如果使用的是 <code>rm -rf</code>，并且在第 3
步删除目录内文件失败时，则会跳过第 4
步，也就是说不会再对目录做任何操作</p>
<h2 id="测试过程">测试过程</h2>
<h3 id="配置环境">配置环境</h3>
<p>首先建立一个非空目录，并且给目录中的文件配置权限，禁止删除文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">dir</span></span><br><span class="line"><span class="built_in">touch</span> <span class="built_in">dir</span>/file</span><br><span class="line">sudo chattr +i <span class="built_in">dir</span>/file</span><br></pre></td></tr></tbody></table></figure>
<p>此时目录树如下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ tree <span class="built_in">dir</span></span><br><span class="line"><span class="built_in">dir</span></span><br><span class="line">└── file</span><br><span class="line"></span><br><span class="line">0 directories, 1 file</span><br></pre></td></tr></tbody></table></figure>
<h3 id="rmdir-1"><code>rmdir</code></h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ strace -o <span class="built_in">rmdir</span> <span class="built_in">rmdir</span> <span class="built_in">dir</span>/</span><br><span class="line"><span class="built_in">rmdir</span>: failed to remove <span class="string">'dir/'</span>: Directory not empty</span><br></pre></td></tr></tbody></table></figure>
<p><code>strace</code> 抓到的内容如下，主要内容在第 37 行</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">execve("/usr/bin/rmdir", ["rmdir", "dir/"], 0x7ffe38ddae38 /* 26 vars */) = 0</span><br><span class="line">brk(NULL)                               = 0x561e92b83000</span><br><span class="line">arch_prctl(0x3001 /* ARCH_??? */, 0x7fff06684960) = -1 EINVAL (Invalid argument)</span><br><span class="line">access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=46019, ...}) = 0</span><br><span class="line">mmap(NULL, 46019, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f51af80c000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\360q\2\0\0\0\0\0"..., 832) = 832</span><br><span class="line">pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784</span><br><span class="line">pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32</span><br><span class="line">pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X&gt;\263"..., 68, 880) = 68</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0755, st_size=2029224, ...}) = 0</span><br><span class="line">mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f51af80a000</span><br><span class="line">pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784</span><br><span class="line">pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32</span><br><span class="line">pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X&gt;\263"..., 68, 880) = 68</span><br><span class="line">mmap(NULL, 2036952, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f51af618000</span><br><span class="line">mprotect(0x7f51af63d000, 1847296, PROT_NONE) = 0</span><br><span class="line">mmap(0x7f51af63d000, 1540096, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x25000) = 0x7f51af63d000</span><br><span class="line">mmap(0x7f51af7b5000, 303104, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x19d000) = 0x7f51af7b5000</span><br><span class="line">mmap(0x7f51af800000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e7000) = 0x7f51af800000</span><br><span class="line">mmap(0x7f51af806000, 13528, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f51af806000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">arch_prctl(ARCH_SET_FS, 0x7f51af80b580) = 0</span><br><span class="line">mprotect(0x7f51af800000, 12288, PROT_READ) = 0</span><br><span class="line">mprotect(0x561e91688000, 4096, PROT_READ) = 0</span><br><span class="line">mprotect(0x7f51af845000, 4096, PROT_READ) = 0</span><br><span class="line">munmap(0x7f51af80c000, 46019)           = 0</span><br><span class="line">brk(NULL)                               = 0x561e92b83000</span><br><span class="line">brk(0x561e92ba4000)                     = 0x561e92ba4000</span><br><span class="line">openat(AT_FDCWD, "/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=3035952, ...}) = 0</span><br><span class="line">mmap(NULL, 3035952, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f51af332000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">rmdir("dir/")                           = -1 ENOTEMPTY (Directory not empty)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/locale.alias", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=2996, ...}) = 0</span><br><span class="line">read(3, "# Locale name alias data base.\n#"..., 4096) = 2996</span><br><span class="line">read(3, "", 4096)                       = 0</span><br><span class="line">close(3)                                = 0</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">write(2, "rmdir: ", 7)                  = 7</span><br><span class="line">write(2, "failed to remove 'dir/'", 23) = 23</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">write(2, ": Directory not empty", 21)   = 21</span><br><span class="line">write(2, "\n", 1)                       = 1</span><br><span class="line">close(1)                                = 0</span><br><span class="line">close(2)                                = 0</span><br><span class="line">exit_group(1)                           = ?</span><br><span class="line">+++ exited with 1 +++</span><br></pre></td></tr></tbody></table></figure>
<h3 id="rm--r-1"><code>rm -r</code></h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ strace -o rm_r_fail.strace <span class="built_in">rm</span> -r <span class="built_in">dir</span>/</span><br><span class="line"><span class="built_in">rm</span>: cannot remove <span class="string">'dir/file'</span>: Operation not permitted</span><br><span class="line"><span class="built_in">rm</span>: cannot remove <span class="string">'dir/'</span>: Directory not empty</span><br></pre></td></tr></tbody></table></figure>
<p><code>strace</code> 抓到的内容如下，主要内容在第 39-59 以及 94-96
行</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">execve("/usr/bin/rm", ["rm", "-r", "dir/"], 0x7ffc2c0fb640 /* 26 vars */) = 0</span><br><span class="line">brk(NULL)                               = 0x56082871e000</span><br><span class="line">arch_prctl(0x3001 /* ARCH_??? */, 0x7ffd0d910cf0) = -1 EINVAL (Invalid argument)</span><br><span class="line">access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=46019, ...}) = 0</span><br><span class="line">mmap(NULL, 46019, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f65c441d000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\360q\2\0\0\0\0\0"..., 832) = 832</span><br><span class="line">pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784</span><br><span class="line">pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32</span><br><span class="line">pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X&gt;\263"..., 68, 880) = 68</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0755, st_size=2029224, ...}) = 0</span><br><span class="line">mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f65c441b000</span><br><span class="line">pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784</span><br><span class="line">pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32</span><br><span class="line">pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X&gt;\263"..., 68, 880) = 68</span><br><span class="line">mmap(NULL, 2036952, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f65c4229000</span><br><span class="line">mprotect(0x7f65c424e000, 1847296, PROT_NONE) = 0</span><br><span class="line">mmap(0x7f65c424e000, 1540096, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x25000) = 0x7f65c424e000</span><br><span class="line">mmap(0x7f65c43c6000, 303104, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x19d000) = 0x7f65c43c6000</span><br><span class="line">mmap(0x7f65c4411000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e7000) = 0x7f65c4411000</span><br><span class="line">mmap(0x7f65c4417000, 13528, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f65c4417000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">arch_prctl(ARCH_SET_FS, 0x7f65c441c580) = 0</span><br><span class="line">mprotect(0x7f65c4411000, 12288, PROT_READ) = 0</span><br><span class="line">mprotect(0x560827bb0000, 4096, PROT_READ) = 0</span><br><span class="line">mprotect(0x7f65c4456000, 4096, PROT_READ) = 0</span><br><span class="line">munmap(0x7f65c441d000, 46019)           = 0</span><br><span class="line">brk(NULL)                               = 0x56082871e000</span><br><span class="line">brk(0x56082873f000)                     = 0x56082873f000</span><br><span class="line">openat(AT_FDCWD, "/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=3035952, ...}) = 0</span><br><span class="line">mmap(NULL, 3035952, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f65c3f43000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">ioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0</span><br><span class="line">lstat("/", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0</span><br><span class="line">newfstatat(AT_FDCWD, "dir/", {st_mode=S_IFDIR|0775, st_size=4096, ...}, AT_SYMLINK_NOFOLLOW) = 0</span><br><span class="line">openat(AT_FDCWD, "dir/", O_RDONLY|O_NOCTTY|O_NONBLOCK|O_NOFOLLOW|O_DIRECTORY) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFDIR|0775, st_size=4096, ...}) = 0</span><br><span class="line">fcntl(3, F_GETFL)                       = 0x38800 (flags O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_NOFOLLOW|O_DIRECTORY)</span><br><span class="line">fcntl(3, F_SETFD, FD_CLOEXEC)           = 0</span><br><span class="line">getdents64(3, /* 3 entries */, 32768)   = 72</span><br><span class="line">close(3)                                = 0</span><br><span class="line">geteuid()                               = 1000</span><br><span class="line">newfstatat(AT_FDCWD, "dir/", {st_mode=S_IFDIR|0775, st_size=4096, ...}, AT_SYMLINK_NOFOLLOW) = 0</span><br><span class="line">faccessat(AT_FDCWD, "dir/", W_OK)       = 0</span><br><span class="line">openat(AT_FDCWD, "dir/", O_RDONLY|O_NOCTTY|O_NONBLOCK|O_NOFOLLOW|O_CLOEXEC|O_DIRECTORY) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFDIR|0775, st_size=4096, ...}) = 0</span><br><span class="line">fcntl(3, F_GETFL)                       = 0x38800 (flags O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_NOFOLLOW|O_DIRECTORY)</span><br><span class="line">fcntl(3, F_SETFD, FD_CLOEXEC)           = 0</span><br><span class="line">fstatfs(3, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=20510566, f_bfree=15993067, f_bavail=14940434, f_files=5242880, f_ffree=5074130, f_fsid={val=[3258576323, 2412010735]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0</span><br><span class="line">fcntl(3, F_DUPFD_CLOEXEC, 3)            = 4</span><br><span class="line">getdents64(3, /* 3 entries */, 32768)   = 72</span><br><span class="line">getdents64(3, /* 0 entries */, 32768)   = 0</span><br><span class="line">close(3)                                = 0</span><br><span class="line">newfstatat(4, "file", {st_mode=S_IFREG|0664, st_size=0, ...}, AT_SYMLINK_NOFOLLOW) = 0</span><br><span class="line">faccessat(4, "file", W_OK)              = -1 EPERM (Operation not permitted)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/locale.alias", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=2996, ...}) = 0</span><br><span class="line">read(3, "# Locale name alias data base.\n#"..., 4096) = 2996</span><br><span class="line">read(3, "", 4096)                       = 0</span><br><span class="line">close(3)                                = 0</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">write(2, "rm: ", 4)                     = 4</span><br><span class="line">write(2, "cannot remove 'dir/file'", 24) = 24</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">write(2, ": Operation not permitted", 25) = 25</span><br><span class="line">write(2, "\n", 1)                       = 1</span><br><span class="line">close(4)                                = 0</span><br><span class="line">newfstatat(AT_FDCWD, "dir/", {st_mode=S_IFDIR|0775, st_size=4096, ...}, AT_SYMLINK_NOFOLLOW) = 0</span><br><span class="line">faccessat(AT_FDCWD, "dir/", W_OK)       = 0</span><br><span class="line">unlinkat(AT_FDCWD, "dir/", AT_REMOVEDIR) = -1 ENOTEMPTY (Directory not empty)</span><br><span class="line">write(2, "rm: ", 4)                     = 4</span><br><span class="line">write(2, "cannot remove 'dir/'", 20)    = 20</span><br><span class="line">write(2, ": Directory not empty", 21)   = 21</span><br><span class="line">write(2, "\n", 1)                       = 1</span><br><span class="line">lseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)</span><br><span class="line">close(0)                                = 0</span><br><span class="line">close(1)                                = 0</span><br><span class="line">close(2)                                = 0</span><br><span class="line">exit_group(1)                           = ?</span><br><span class="line">+++ exited with 1 +++</span><br></pre></td></tr></tbody></table></figure>
<h3 id="rm--rf-1"><code>rm -rf</code></h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ strace -o rm_fail.strace <span class="built_in">rm</span> -rf <span class="built_in">dir</span>/</span><br><span class="line"><span class="built_in">rm</span>: cannot remove <span class="string">'dir/file'</span>: Operation not permitted</span><br></pre></td></tr></tbody></table></figure>
<p><code>strace</code> 抓到的内容如下，主要内容在第 39-55 行</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">execve("/usr/bin/rm", ["rm", "-rf", "dir/"], 0x7fff7bc99c20 /* 26 vars */) = 0</span><br><span class="line">brk(NULL)                               = 0x5566570fe000</span><br><span class="line">arch_prctl(0x3001 /* ARCH_??? */, 0x7ffde2720670) = -1 EINVAL (Invalid argument)</span><br><span class="line">access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=46019, ...}) = 0</span><br><span class="line">mmap(NULL, 46019, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcb89d87000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\360q\2\0\0\0\0\0"..., 832) = 832</span><br><span class="line">pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784</span><br><span class="line">pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32</span><br><span class="line">pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X&gt;\263"..., 68, 880) = 68</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0755, st_size=2029224, ...}) = 0</span><br><span class="line">mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcb89d85000</span><br><span class="line">pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784</span><br><span class="line">pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32</span><br><span class="line">pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X&gt;\263"..., 68, 880) = 68</span><br><span class="line">mmap(NULL, 2036952, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcb89b93000</span><br><span class="line">mprotect(0x7fcb89bb8000, 1847296, PROT_NONE) = 0</span><br><span class="line">mmap(0x7fcb89bb8000, 1540096, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x25000) = 0x7fcb89bb8000</span><br><span class="line">mmap(0x7fcb89d30000, 303104, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x19d000) = 0x7fcb89d30000</span><br><span class="line">mmap(0x7fcb89d7b000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e7000) = 0x7fcb89d7b000</span><br><span class="line">mmap(0x7fcb89d81000, 13528, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fcb89d81000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">arch_prctl(ARCH_SET_FS, 0x7fcb89d86580) = 0</span><br><span class="line">mprotect(0x7fcb89d7b000, 12288, PROT_READ) = 0</span><br><span class="line">mprotect(0x5566566dd000, 4096, PROT_READ) = 0</span><br><span class="line">mprotect(0x7fcb89dc0000, 4096, PROT_READ) = 0</span><br><span class="line">munmap(0x7fcb89d87000, 46019)           = 0</span><br><span class="line">brk(NULL)                               = 0x5566570fe000</span><br><span class="line">brk(0x55665711f000)                     = 0x55665711f000</span><br><span class="line">openat(AT_FDCWD, "/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=3035952, ...}) = 0</span><br><span class="line">mmap(NULL, 3035952, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcb898ad000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">ioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0</span><br><span class="line">lstat("/", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0</span><br><span class="line">newfstatat(AT_FDCWD, "dir/", {st_mode=S_IFDIR|0775, st_size=4096, ...}, AT_SYMLINK_NOFOLLOW) = 0</span><br><span class="line">openat(AT_FDCWD, "dir/", O_RDONLY|O_NOCTTY|O_NONBLOCK|O_NOFOLLOW|O_DIRECTORY) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFDIR|0775, st_size=4096, ...}) = 0</span><br><span class="line">fcntl(3, F_GETFL)                       = 0x38800 (flags O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_NOFOLLOW|O_DIRECTORY)</span><br><span class="line">fcntl(3, F_SETFD, FD_CLOEXEC)           = 0</span><br><span class="line">getdents64(3, /* 3 entries */, 32768)   = 72</span><br><span class="line">close(3)                                = 0</span><br><span class="line">openat(AT_FDCWD, "dir/", O_RDONLY|O_NOCTTY|O_NONBLOCK|O_NOFOLLOW|O_CLOEXEC|O_DIRECTORY) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFDIR|0775, st_size=4096, ...}) = 0</span><br><span class="line">fcntl(3, F_GETFL)                       = 0x38800 (flags O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_NOFOLLOW|O_DIRECTORY)</span><br><span class="line">fcntl(3, F_SETFD, FD_CLOEXEC)           = 0</span><br><span class="line">fstatfs(3, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=20510566, f_bfree=15993067, f_bavail=14940434, f_files=5242880, f_ffree=5074130, f_fsid={val=[3258576323, 2412010735]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0</span><br><span class="line">fcntl(3, F_DUPFD_CLOEXEC, 3)            = 4</span><br><span class="line">getdents64(3, /* 3 entries */, 32768)   = 72</span><br><span class="line">getdents64(3, /* 0 entries */, 32768)   = 0</span><br><span class="line">close(3)                                = 0</span><br><span class="line">unlinkat(4, "file", 0)                  = -1 EPERM (Operation not permitted)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/locale.alias", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=2996, ...}) = 0</span><br><span class="line">read(3, "# Locale name alias data base.\n#"..., 4096) = 2996</span><br><span class="line">read(3, "", 4096)                       = 0</span><br><span class="line">close(3)                                = 0</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">write(2, "rm: ", 4)                     = 4</span><br><span class="line">write(2, "cannot remove 'dir/file'", 24) = 24</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/usr/share/locale-langpack/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT (No such file or directory)</span><br><span class="line">write(2, ": Operation not permitted", 25) = 25</span><br><span class="line">write(2, "\n", 1)                       = 1</span><br><span class="line">close(4)                                = 0</span><br><span class="line">lseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)</span><br><span class="line">close(0)                                = 0</span><br><span class="line">close(1)                                = 0</span><br><span class="line">close(2)                                = 0</span><br><span class="line">exit_group(1)                           = ?</span><br><span class="line">+++ exited with 1 +++</span><br></pre></td></tr></tbody></table></figure>
<p>最后取消文件的权限，看一下 <code>rm -rf</code> 成功时的系统调用</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo chattr -i <span class="built_in">dir</span>/file</span><br><span class="line">strace -o rm_rf_succ.strace <span class="built_in">rm</span> -rf <span class="built_in">dir</span>/</span><br></pre></td></tr></tbody></table></figure>
<p><code>strace</code> 抓到的内容如下，主要内容在第 39-57 行</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">execve("/usr/bin/rm", ["rm", "-rf", "dir/"], 0x7ffee56569a0 /* 26 vars */) = 0</span><br><span class="line">brk(NULL)                               = 0x55cc9fc1d000</span><br><span class="line">arch_prctl(0x3001 /* ARCH_??? */, 0x7ffec41c6210) = -1 EINVAL (Invalid argument)</span><br><span class="line">access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=46019, ...}) = 0</span><br><span class="line">mmap(NULL, 46019, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f771df9d000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\360q\2\0\0\0\0\0"..., 832) = 832</span><br><span class="line">pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784</span><br><span class="line">pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32</span><br><span class="line">pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X&gt;\263"..., 68, 880) = 68</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0755, st_size=2029224, ...}) = 0</span><br><span class="line">mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f771df9b000</span><br><span class="line">pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784</span><br><span class="line">pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32</span><br><span class="line">pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X&gt;\263"..., 68, 880) = 68</span><br><span class="line">mmap(NULL, 2036952, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f771dda9000</span><br><span class="line">mprotect(0x7f771ddce000, 1847296, PROT_NONE) = 0</span><br><span class="line">mmap(0x7f771ddce000, 1540096, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x25000) = 0x7f771ddce000</span><br><span class="line">mmap(0x7f771df46000, 303104, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x19d000) = 0x7f771df46000</span><br><span class="line">mmap(0x7f771df91000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e7000) = 0x7f771df91000</span><br><span class="line">mmap(0x7f771df97000, 13528, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f771df97000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">arch_prctl(ARCH_SET_FS, 0x7f771df9c580) = 0</span><br><span class="line">mprotect(0x7f771df91000, 12288, PROT_READ) = 0</span><br><span class="line">mprotect(0x55cc9ec06000, 4096, PROT_READ) = 0</span><br><span class="line">mprotect(0x7f771dfd6000, 4096, PROT_READ) = 0</span><br><span class="line">munmap(0x7f771df9d000, 46019)           = 0</span><br><span class="line">brk(NULL)                               = 0x55cc9fc1d000</span><br><span class="line">brk(0x55cc9fc3e000)                     = 0x55cc9fc3e000</span><br><span class="line">openat(AT_FDCWD, "/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=3035952, ...}) = 0</span><br><span class="line">mmap(NULL, 3035952, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f771dac3000</span><br><span class="line">close(3)                                = 0</span><br><span class="line">ioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0</span><br><span class="line">lstat("/", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0</span><br><span class="line">newfstatat(AT_FDCWD, "dir/", {st_mode=S_IFDIR|0775, st_size=4096, ...}, AT_SYMLINK_NOFOLLOW) = 0</span><br><span class="line">openat(AT_FDCWD, "dir/", O_RDONLY|O_NOCTTY|O_NONBLOCK|O_NOFOLLOW|O_DIRECTORY) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFDIR|0775, st_size=4096, ...}) = 0</span><br><span class="line">fcntl(3, F_GETFL)                       = 0x38800 (flags O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_NOFOLLOW|O_DIRECTORY)</span><br><span class="line">fcntl(3, F_SETFD, FD_CLOEXEC)           = 0</span><br><span class="line">getdents64(3, /* 3 entries */, 32768)   = 72</span><br><span class="line">close(3)                                = 0</span><br><span class="line">openat(AT_FDCWD, "dir/", O_RDONLY|O_NOCTTY|O_NONBLOCK|O_NOFOLLOW|O_CLOEXEC|O_DIRECTORY) = 3</span><br><span class="line">fstat(3, {st_mode=S_IFDIR|0775, st_size=4096, ...}) = 0</span><br><span class="line">fcntl(3, F_GETFL)                       = 0x38800 (flags O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_NOFOLLOW|O_DIRECTORY)</span><br><span class="line">fcntl(3, F_SETFD, FD_CLOEXEC)           = 0</span><br><span class="line">fstatfs(3, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=20510566, f_bfree=15993064, f_bavail=14940431, f_files=5242880, f_ffree=5074129, f_fsid={val=[3258576323, 2412010735]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0</span><br><span class="line">fcntl(3, F_DUPFD_CLOEXEC, 3)            = 4</span><br><span class="line">getdents64(3, /* 3 entries */, 32768)   = 72</span><br><span class="line">getdents64(3, /* 0 entries */, 32768)   = 0</span><br><span class="line">close(3)                                = 0</span><br><span class="line">unlinkat(4, "file", 0)                  = 0</span><br><span class="line">close(4)                                = 0</span><br><span class="line">unlinkat(AT_FDCWD, "dir/", AT_REMOVEDIR) = 0</span><br><span class="line">lseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)</span><br><span class="line">close(0)                                = 0</span><br><span class="line">close(1)                                = 0</span><br><span class="line">close(2)                                = 0</span><br><span class="line">exit_group(0)                           = ?</span><br><span class="line">+++ exited with 0 +++</span><br></pre></td></tr></tbody></table></figure>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb21tdW5pdHkubWVsbGFub3guY29tL3MvYXJ0aWNsZS9ob3d0by1jb25maWd1cmUtbnZtZS1vdmVyLWZhYnJpY3M=">【mellanox
社区】HowTo Configure NVMe over Fabrics<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVuLnRlY2gycmVhbC5jb20vaW5mb19kZXRhaWxfcGFnZT9pZD0xODQ0MQ==">【硬见】NVMe-oF
不只是 RDMA，还有 TCP<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVkYW5jaW5nL2FydGljbGUvZGV0YWlscy8xMDM4MzUwODU=">【CSDN】Linux
防止文件和目录被意外删除或修改<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMi9vcGVuLjIuaHRtbA==">【man】open<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8xNTA5NjAvd2h5LWFyZS1ybWRpci1hbmQtdW5saW5rLXR3by1zZXBhcmF0ZS1zeXN0ZW0tY2FsbHM=">【stackexchange】Why
are rmdir and unlink two separate system calls?<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>strace</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWrt 手动编译 ipk</title>
    <url>/posts/96a1807.html</url>
    <content><![CDATA[<h2 id="ipk-文件"><code>.ipk</code> 文件</h2>
<p><code>.ipk</code> 文件是可以通过 OpenWrt 的包管理软件
<code>opkg</code> 直接安装，好比 <code>.deb</code> 文件与
<code>apt</code>
的关系。虽然官方的软件仓库已经很丰富了，但是有时仍然需要从源码编译一些第三方的软件使用，例如锐捷认证等</p>
<p>但是由于路由器平台通常与常用的服务器或者个人 PC
的处理器架构不同，并且路由器的处理器本身性能较弱，几乎不可能直接在路由器上进行编译生成
<code>.ipk</code> 文件，因此需要交叉编译来实现 <span id="more"></span></p>
<p>而官方的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW53cnQvb3BlbndydA==">OpenWrt<i class="fa fa-external-link-alt"></i></span>
仓库就提供了一个方便使用的交叉编译环境</p>
<h2 id="编译准备">编译准备</h2>
<p>以 Debian / Ubuntu 为例，参考 <span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLWRldmVsb3Blci90b29sY2hhaW4vaW5zdGFsbC1idWlsZHN5c3RlbQ==">官网给出的要求<i class="fa fa-external-link-alt"></i></span>，可以通过下面命令来进行安装依赖包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential ccache ecj fastjar file g++ gawk \</span><br><span class="line">gettext git java-propose-classpath libelf-dev libncurses5-dev \</span><br><span class="line">libncursesw5-dev libssl-dev python python2.7-dev python3 unzip wget \</span><br><span class="line">python3-distutils python3-setuptools python3-dev rsync subversion \</span><br><span class="line">swig time xsltproc zlib1g-dev</span><br></pre></td></tr></tbody></table></figure>
<p>安装 / 更新好这些依赖之后，就可以通过 <code>git</code> 拉取 OpenWrt
仓库了</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://git.openwrt.org/openwrt/openwrt.git</span><br></pre></td></tr></tbody></table></figure>
<p>通常由于仓库较大以及网速问题，可能会需要很久，其实可以通过
<code>--depth</code>
来限制拉取的仓库深度，或者通过镜像站来加速拉取，当然也可以两者同时采用</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://git.openwrt.org/openwrt/openwrt.git --depth=1</span><br><span class="line"><span class="comment"># cnpmjs.org 已经不能使用，请自行寻找其他镜像站</span></span><br><span class="line"><span class="comment"># git clone https://git.openwrt.org.cnpmjs.org/openwrt/openwrt.git</span></span><br><span class="line"><span class="comment"># git clone https://git.openwrt.org.cnpmjs.org/openwrt/openwrt.git --depth=1</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="编译-.ipk-文件">编译 <code>.ipk</code> 文件</h2>
<h3 id="更新-feeds">更新 feeds</h3>
<p>进入 openwrt 仓库后，首先需要更新软件包列表
<code>feeds</code>，它是在 OpenWrt
中共用位置的包的集合。运行以下命令即可更新内置软件包列表并链接到编译工具中：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> openwrt/</span><br><span class="line">./scripts/feeds update</span><br><span class="line">./scripts/feeds install</span><br></pre></td></tr></tbody></table></figure>
<h3 id="配置平台">配置平台</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></tbody></table></figure>
<p>通常使用图形化菜单界面来进行配置编译选项，依次配置处理器架构、具体的处理器型号以及设备</p>
<p>以小米 mini 路由器为例，应该将他们配置成如下图所示</p>
<figure>
<img data-src="/posts/96a1807/Target-Config.png" alt="平台配置">
<figcaption aria-hidden="true">平台配置</figcaption>
</figure>
<h3 id="获取交叉编译链">获取交叉编译链</h3>
<p>这一步就是获取对应设备交叉编译所需的编译链</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">make tools/install V=s -j$(grep processor /proc/cpuinfo | <span class="built_in">wc</span> -l)</span><br><span class="line">make toolchain/install V=s -j$(grep processor /proc/cpuinfo | <span class="built_in">wc</span> -l)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>V=s</code> 可以显示 <code>make</code>
过程中的所有输出，方便定位当前是否卡在了某一步骤上</li>
<li><code>-j$(grep processor /proc/cpuinfo | wc -l)</code>
则是根据机器的 CPU 数量来进行多线程编译</li>
</ul>
<h3 id="添加需要编译的第三方软件包">添加需要编译的第三方软件包</h3>
<p>可以先搜索有没有已经配置好的含有 <code>Makefile</code>
的仓库，有了适配过的 <code>Makefile</code>
文件就可以很方便的来编译源码生成 <code>.ipk</code> 文件了</p>
<p>以 <code>minieap</code> 为例，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JvcmluZ0NhdC9taW5pZWFwLW9wZW53cnQ=">github<i class="fa fa-external-link-alt"></i></span>
上有已经完成的仓库，依次可以直接拉取来编译</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/BoringCat/minieap-openwrt.git package/minieap</span><br></pre></td></tr></tbody></table></figure>
<p>在拉取完成仓库后，就可以再次配置编译选项，将需要编译成
<code>.ipk</code> 的功能配置成模块编译，也就是标记成 <code>M</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></tbody></table></figure>
<p>对于 <code>minieap</code> 来说，在 <code>Network</code>
找到对应选项并配置成 <code>M</code> 即可，如下图</p>
<figure>
<img data-src="/posts/96a1807/MiniEAP-Config.png" alt="MiniEAP 配置">
<figcaption aria-hidden="true">MiniEAP 配置</figcaption>
</figure>
<p>配置完成后就可以进行编译了，编译命令也很简单，以 <code>minieap</code>
为例如下所示</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">make package/minieap/compile V=s -j$(grep processor /proc/cpuinfo | <span class="built_in">wc</span> -l)</span><br></pre></td></tr></tbody></table></figure>
<p>编译完成后，<code>.ipk</code> 文件会生成在
<code>./bin/packages/&lt;YourArchitecture&gt;/base</code>
目录下，将其拷贝到路由器上就可以通过 <code>opkg</code>
进行安装使用了</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLWRldmVsb3Blci90b29sY2hhaW4vaW5zdGFsbC1idWlsZHN5c3RlbQ==">【OpenWrt】编译系统准备<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0LW5jdHUuZ2l0Ym9vay5pby9wcm9qZWN0L29wZW53cnQtY29tcGlsZS1lbnYvb3BlbndydC1zZGstYW5kLWlway1mb3JtYXQ=">【Gitbook】建立编译环境<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW53cnQvb3BlbndydA==">【GitHub】OpenWrt<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0t5bGVSaWNhcmRvL01lbnRvSFVTVC1PcGVuV3J0LWlwaw==">【GitHub】MentoHUST-OpenWrt-ipk<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JvcmluZ0NhdC9taW5pZWFwLW9wZW53cnQ=">【GitHub】minieap-openwrt<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>交叉编译</tag>
        <tag>ipk</tag>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>Breed 介绍、刷入和使用</title>
    <url>/posts/53d6c2d9.html</url>
    <content><![CDATA[<h2 id="介绍">介绍</h2>
<p>Breed 是国内个人 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hhY2twYXNjYWw=">hackpascal<i class="fa fa-external-link-alt"></i></span> 开发的闭源
Bootloader，也被称为 “不死鸟”</p>
<p>因为有些官方升级固件自带 bootloader，如果从官方固件升级，会导致现有
bootloader 被覆盖。而当 Breed
更新固件时，它会自动删除固件附带的引导加载程序，因此可以防止 Breed
被覆盖 <span id="more"></span></p>
<p>Breed 拥有以下特性：</p>
<ul>
<li>实时刷机进度，进度条能准确反映刷机进度</li>
<li> Web 页面快速响应</li>
<li>最大固件备份速度，依 Flash 而定，一般能达到 1MB/s</li>
<li> 免按复位键进入 Web 刷机模式</li>
<li> Telnet 功能，免 TTL 进入 Breed 命令控制台</li>
<li>复位键定义测试功能</li>
<li>固件启动失败自动进入 Web 刷机模式</li>
<li>可自定义位置和大小的环境变量块</li>
</ul>
<p>由于是闭源，无法进行二次开发，所有支持的设备均由 hackpascal
一人完成。在 2020-10-09 后已经停止版本更新，但 <span class="exturl" data-url="aHR0cHM6Ly9icmVlZC5oYWNrcGFzY2FsLm5ldC8=">官网<i class="fa fa-external-link-alt"></i></span> 目前仍然开放所有的 Breed
下载</p>
<h3 id="文件说明">文件说明</h3>
<p>下表为 Breed 的文件对应的设备介绍，发布在 <span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC0xNjE5MDYtMS0xLmh0bWw=">恩山论坛<i class="fa fa-external-link-alt"></i></span>
上，在此处做一个备份</p>
<table>
<colgroup>
<col style="width: 26%">
<col style="width: 73%">
</colgroup>
<thead>
<tr class="header">
<th>文件名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> BreedEnter.exe</td>
<td>Breed 启动中断工具，实现免按复位键进入 Web 刷机模式</td>
</tr>
<tr class="even">
<td> md5sum.txt</td>
<td> 当前版本所有 Breed 文件的 MD5 值，用于校验文件的完整性</td>
</tr>
<tr class="odd">
<td> breed-mt7620-reset1.bin</td>
<td>MT7620A / MT7620N 全通用，波特率 57600，复位键 GPIO#1</td>
</tr>
<tr class="even">
<td>breed-mt7620-reset2.bin</td>
<td>MT7620A / MT7620N 全通用，波特率 57600，复位键 GPIO#2</td>
</tr>
<tr class="odd">
<td>breed-mt7620-reset11.bin</td>
<td>MT7620A / MT7620N 全通用，波特率 57600，复位键 GPIO#11</td>
</tr>
<tr class="even">
<td>breed-mt7620-reset12.bin</td>
<td>MT7620A / MT7620N 全通用，波特率 57600，复位键 GPIO#12</td>
</tr>
<tr class="odd">
<td>breed-mt7620-reset13.bin</td>
<td>MT7620A / MT7620N 全通用，波特率 57600，复位键 GPIO#13</td>
</tr>
<tr class="even">
<td>breed-mt7620-reset26.bin</td>
<td>MT7620A / MT7620N 全通用，波特率 57600，复位键 GPIO#26</td>
</tr>
<tr class="odd">
<td>breed-mt7620-reset30.bin</td>
<td>MT7620A / MT7620N 全通用，波特率 57600，复位键 GPIO#30</td>
</tr>
<tr class="even">
<td>breed-mt7620-rt-n14u.bin</td>
<td>MT7620A / MT7620N 全通用，波特率 57600，复位键 GPIO#1，WPS 键
GPIO#2</td>
</tr>
<tr class="odd">
<td>breed-mt7620-whr-1166dhp.bin</td>
<td>MT7620A / MT7620N 全通用，波特率 57600，复位键 GPIO#52，AOSS 键
GPIO#53</td>
</tr>
<tr class="even">
<td>breed-mt7620-lenovo-y1.bin</td>
<td> 联想 Y1 (newifi mini) 专用，波特率 115200，复位键 GPIO#11</td>
</tr>
<tr class="odd">
<td>breed-mt7620-lenovo-y1s.bin</td>
<td> 联想 Y1S (newifi) 专用，千兆口可用，波特率 115200，复位键
GPIO#11</td>
</tr>
<tr class="even">
<td>breed-mt7620-zte-q7.bin</td>
<td> 中兴 ZTE Q7 专用，波特率 57600，复位键 GPIO#26</td>
</tr>
<tr class="odd">
<td>breed-mt7620-youku-yk1.bin</td>
<td> 优酷路由宝专用，波特率 57600，复位键 GPIO#1</td>
</tr>
<tr class="even">
<td>breed-mt7620-xiaomi-mini.bin</td>
<td> 小米 Mini 专用，波特率 115200，复位键 GPIO#30</td>
</tr>
<tr class="odd">
<td>breed-mt7620-fir302m.bin</td>
<td> 斐讯 FIR300M/302M 专用，波特率 57600，复位键 GPIO#2</td>
</tr>
<tr class="even">
<td>breed-mt7620-phicomm-psg1208.bin</td>
<td> 斐讯 PSG1208 (K1)/ PSG1218 (K2) 专用，波特率 57600，复位键
GPIO#1</td>
</tr>
<tr class="odd">
<td>breed-mt7620-hiwifi-hc5761.bin</td>
<td> 极路由 极壹 S (HC5661)/ 极贰 (HC5761) 专用，波特率 115200，复位键
GPIO#12</td>
</tr>
<tr class="even">
<td>breed-mt7620-hiwifi-hc5861.bin</td>
<td> 极路由 极叁 (HC5861) 专用，千兆 LAN 可用，波特率 115200，复位键
GPIO#12</td>
</tr>
<tr class="odd">
<td>breed-mt7620-oye-0001.bin</td>
<td> 哦耶 Oye-0001 专用，波特率 115200，复位键 GPIO#1</td>
</tr>
<tr class="even">
<td>breed-mt7620-airmobi-iplay2.bin</td>
<td>AirMobi iPlay2 专用，波特率 57600，复位键 GPIO#26</td>
</tr>
<tr class="odd">
<td>breed-mt7621-newifi-d1.bin</td>
<td> 联想 Newifi D1 专用，DDR3 内存适用，默认 256MB DDR AC
时序参数，波特率 115200，复位键 GPIO#15，WPS 键 GPIO#18</td>
</tr>
<tr class="even">
<td>breed-mt7621-newifi-d2.bin</td>
<td> 联想 Newifi D2 专用，DDR3 内存适用，默认 512MB DDR AC
时序参数，波特率 115200，复位键 GPIO#3，WPS 键 GPIO#7</td>
</tr>
<tr class="odd">
<td>breed-mt7621-xunlei-timeplug.bin</td>
<td> 迅雷时光机 (时光云) 专用，DDR3 内存适用，默认 256MB DDR AC
时序参数，波特率 115200，复位键 GPIO#4</td>
</tr>
<tr class="even">
<td>breed-mt7621-youku-l2.bin</td>
<td> 优酷路由宝 YK-L2 专用，DDR3 内存适用，默认 256MB DDR AC
时序参数，波特率 115200，复位键 GPIO#18，WPS 键 GPIO#17</td>
</tr>
<tr class="odd">
<td>breed-mt7621-phicomm-k2p.bin</td>
<td> 斐讯 K2P 专用，DDR3 内存适用，默认 512MB DDR AC 时序参数，波特率
57600，复位键 GPIO#3</td>
</tr>
<tr class="even">
<td>breed-mt7621-pbr-m1.bin</td>
<td>PandoraBox PBR-M1 专用，DDR3 内存适用，默认 512MB DDR AC
时序参数，波特率 115200，复位键 GPIO#18</td>
</tr>
<tr class="odd">
<td>breed-mt7621-totolink-a3004ns.bin</td>
<td>TOTOLINK A3004NS 专用，DDR3 内存适用，默认 256MB DDR AC
时序参数，波特率 57600，复位键 GPIO#4，WPS 键 GPIO#3</td>
</tr>
<tr class="even">
<td>breed-mt7621-xiaomi-r3g.bin</td>
<td> 小米路由器 3G 专用，NAND 启动，DDR3 内存适用，默认 256MB DDR AC
时序参数，波特率 115200，复位键 GPIO#18</td>
</tr>
<tr class="odd">
<td>breed-mt7621-creativebox-v1.bin</td>
<td>CreativeBox v1 专用，DDR3 内存适用，默认 512MB DDR AC
时序参数，波特率 115200，复位键 GPIO#18</td>
</tr>
<tr class="even">
<td>breed-mt7621-hiwifi-hc5962.bin</td>
<td> 极路由 4/HC5962/B70 专用，NAND 启动，DDR3 内存适用，默认 256MB DDR AC
时序参数，波特率 115200，复位键 GPIO#18</td>
</tr>
<tr class="odd">
<td>breed-mt7621-r6220.bin</td>
<td>Netgear R6220 专用，NAND 启动，DDR2 内存适用，固定 128MB DDR AC
时序参数，波特率 57600，复位键 GPIO#14，WPS 键 GPIO#7，RFKILL 键
GPIO#8</td>
</tr>
<tr class="even">
<td>breed-mt7621-wndr3700v5.bin</td>
<td>Netgear WNDR3700 v5 专用，DDR2 内存适用，固定 128MB DDR AC
时序参数，波特率 57600，复位键 GPIO#14，WPS 键 GPIO#7，RFKILL 键
GPIO#8</td>
</tr>
<tr class="odd">
<td>breed-mt7621-gehua-ghl-r-001.bin</td>
<td> 歌华 GHL-R-001 专用，DDR3 内存适用，默认 512MB DDR AC
时序参数，波特率 57600，复位键 GPIO#18</td>
</tr>
<tr class="even">
<td>breed-mt7621-jd-cloud-1.bin</td>
<td> 京东云路由宝 RE-SP-01B 专用，DDR3 内存适用，默认 512MB DDR AC
时序参数，波特率 115200，复位键 GPIO#18</td>
</tr>
<tr class="odd">
<td>breed-mt7628-hiwifi-hc5661a.bin</td>
<td> 极路由 极壹 S (HC5661A) 专用，波特率 115200，复位键 GPIO#38</td>
</tr>
<tr class="even">
<td>breed-mt7628-oye-0006.bin</td>
<td> 哦耶 OYE-0006 专用，波特率 115200，复位键 GPIO#38</td>
</tr>
<tr class="odd">
<td>breed-mt7688-reset38.bin</td>
<td>MT7628AN/KN 全通用，波特率 57600，复位键 GPIO#38</td>
</tr>
<tr class="even">
<td>breed-mt7688-wrtnode2r.bin</td>
<td>MT7628AN/KN 全通用，波特率 115200，复位键 GPIO#5</td>
</tr>
<tr class="odd">
<td>breed-rt3050-buffalo-wcr-hp-gn.bin (不再更新)</td>
<td>Buffalo WCR-HP-GN 专用，SPI 启动，波特率 57600，复位键 GPIO#10，WPS
键 GPIO#0</td>
</tr>
<tr class="even">
<td>breed-rt3050-di-524m-b1.bin (不再更新)</td>
<td>D-LINK DI-624M B1 专用，SPI 启动，波特率 57600，复位键 GPIO#10</td>
</tr>
<tr class="odd">
<td>breed-rt305x-nor-reset0.bin (不再更新)</td>
<td>RT305X 通用，NOR 启动，波特率 57600，复位键 GPIO#0</td>
</tr>
<tr class="even">
<td>breed-rt305x-nor-reset10.bin (不再更新)</td>
<td>RT305X 通用，NOR 启动，波特率 57600，复位键 GPIO#10</td>
</tr>
<tr class="odd">
<td>breed-rt3052-dir-605-b1.bin (不再更新)</td>
<td>D-LINK DIR-605 B1 专用，NOR 启动，波特率 57600，复位键 GPIO#10，WPS
键 GPIO#0</td>
</tr>
<tr class="even">
<td>breed-rt3052-hg255d.bin (不再更新)</td>
<td> 华为 HG255D 专用，NOR 启动，波特率 115200，复位键 GPIO#4，WPS 键
GPIO#10</td>
</tr>
<tr class="odd">
<td>breed-rt5350-airmobi-iplay.bin (不再更新)</td>
<td>AirMobi iPlay 专用，波特率 57600，复位键 GPIO#12</td>
</tr>
<tr class="even">
<td>breed-rt5350-hame-a5.bin (不再更新)</td>
<td> 华美 A5 专用，波特率 57600，复位键 GPIO#0</td>
</tr>
<tr class="odd">
<td>breed-rt5350-zm-10.bin (不再更新)</td>
<td> 中沃 ZM-10 专用，波特率 57600，复位键 GPIO#10</td>
</tr>
<tr class="even">
<td>breed-ar7161-dir-825-b1.bin (不再更新)</td>
<td>D-LINK DIR-825 B1 专用，波特率 115200，复位键 GPIO#3，WPS 键
GPIO#8</td>
</tr>
<tr class="odd">
<td>breed-ar724x.bin (不再更新)</td>
<td>AR724X 通用，百兆有线，波特率 115200，复位键 GPIO#11，QSS 键
GPIO#12</td>
</tr>
<tr class="even">
<td>breed-ar724x-reset11.bin (不再更新)</td>
<td>AR724X 通用，百兆有线，波特率 115200，复位键 GPIO#11</td>
</tr>
<tr class="odd">
<td>breed-ar724x-reset12.bin (不再更新)</td>
<td>AR724X 通用，百兆有线，波特率 115200，复位键 GPIO#12</td>
</tr>
<tr class="even">
<td>breed-ar7240-wnr1000v2.bin (不再更新)</td>
<td>Netgear WNR1000 v2 专用，百兆有线，波特率 115200</td>
</tr>
<tr class="odd">
<td>breed-ar7242-wr2543nd.bin (不再更新)</td>
<td>TP-LINK WR2543ND 专用，波特率 115200，复位键 GPIO#11，QSS 键
GPIO#12</td>
</tr>
<tr class="even">
<td>breed-ar7242-aruba-ap93.bin (不再更新)</td>
<td>Aruba-AP93 专用，千兆有线，波特率 115200，复位键 GPIO#11，WPS 键
GPIO#12</td>
</tr>
<tr class="odd">
<td>breed-ar913x.bin (不再更新)</td>
<td>AR913X 通用，百兆有线，波特率 115200，复位键 GPIO#7，WPS 键
GPIO#3</td>
</tr>
<tr class="even">
<td>breed-ar9132-wr1043ndv1.bin (不再更新)</td>
<td>TP-LINK WR1043ND v1 专用，波特率 115200，复位键 GPIO#7，WPS 键
GPIO#3</td>
</tr>
<tr class="odd">
<td>breed-ar9331.bin (不再更新)</td>
<td>AR9331 通用，波特率 115200，复位键 GPIO#11</td>
</tr>
<tr class="even">
<td>breed-ar9331-mr12u.bin (不再更新)</td>
<td>TP-LINK MR12U 专用，波特率 115200，复位键 GPIO#11</td>
</tr>
<tr class="odd">
<td>breed-ar9331-pisen.bin (不再更新)</td>
<td> 品胜云路由 (云座易充 WMM003N / 无线音乐路由 WPR001N) 专用，波特率
115200，复位键 GPIO#12</td>
</tr>
<tr class="even">
<td>breed-ar9331-wr710n.bin (不再更新)</td>
<td>TP-LINK WR710N/WR720N v3 专用，波特率 115200，复位键 GPIO#11</td>
</tr>
<tr class="odd">
<td>breed-ar9331-hiwifi-hc6361.bin (不再更新)</td>
<td> 极路由 极壹 (HC6361) 专用，仅支持 TP 类固件，波特率 115200，复位键
GPIO#11</td>
</tr>
<tr class="even">
<td>breed-ar9341.bin (不再更新)</td>
<td>AR9341 通用，波特率 115200，复位键 GPIO#17</td>
</tr>
<tr class="odd">
<td>breed-ar9341-wnr2000v4.bin (不再更新)</td>
<td>Netgear WNR2000 v4 专用，波特率 115200，复位键 GPIO#4</td>
</tr>
<tr class="even">
<td>breed-ar9341-pisen-wmp002n.bin (不再更新)</td>
<td> 品胜云追剧 WMP002N 专用，波特率 115200，复位键 GPIO#17</td>
</tr>
<tr class="odd">
<td>breed-ar9341-wr800n.bin (不再更新)</td>
<td>TP-LINK WR800N 专用，波特率 115200，复位键 GPIO#18</td>
</tr>
<tr class="even">
<td>breed-ar9342-wr1041nv2.bin (不再更新)</td>
<td>TP-LINK WR1042N v2 专用，波特率 115200，复位键 GPIO#14</td>
</tr>
<tr class="odd">
<td>breed-ar9342-huawei-ws322.bin (不再更新)</td>
<td> 华为 WS322 专用，波特率 115200，复位键 GPIO#0，WPS 键 GPIO#16</td>
</tr>
<tr class="even">
<td>breed-ar9344.bin (不再更新)</td>
<td>AR9344 百兆版，通用，波特率 115200，复位键 GPIO#16</td>
</tr>
<tr class="odd">
<td>breed-ar9344-ar8327n.bin (不再更新)</td>
<td>AR9344 + AR8327N 千兆版，通用，波特率 115200，复位键 GPIO#16</td>
</tr>
<tr class="even">
<td>breed-ar9344-wdr3320v2.bin (不再更新)</td>
<td>TP-LINK WDR3320 v2 专用，波特率 115200，复位键 GPIO#16</td>
</tr>
<tr class="odd">
<td>breed-ar9344-wr941nv6.bin (不再更新)</td>
<td>TP-LINK WR941N v6 专用，波特率 115200，复位键 GPIO#12</td>
</tr>
<tr class="even">
<td>breed-ar9344-mw4530r.bin (不再更新)</td>
<td> 水星 MW4530R 专用，波特率 115200，复位键 GPIO#17，QSS 键
GPIO#16</td>
</tr>
<tr class="odd">
<td>breed-ar9344-wndr4300-spi.bin (不再更新)</td>
<td>Netgear WNDR4300/WNDR3700 v4 专用，SPI 启动，波特率 115200，复位键
GPIO#21，QSS 键 GPIO#12</td>
</tr>
<tr class="even">
<td>breed-ar9344-wndr4300-spi-recovery.bin (不再更新)</td>
<td>Netgear WNDR4300/WNDR3700 v4 专用，SPI 启动，仅用于恢复目的，波特率
115200，复位键 GPIO#21，QSS 键 GPIO#12</td>
</tr>
<tr class="odd">
<td>breed-ar9344-belair20e11.bin (不再更新)</td>
<td>BelAir20E-11 专用，波特率 115200，复位键 GPIO#17，WPS 键
GPIO#12</td>
</tr>
<tr class="even">
<td>breed-ar9344-sgr-w500-n85b-v2.bin</td>
<td> 国人通信 GRENTECH SGR-W500-N85b v2 专用，波特率 115200，支持
RTL8211E，复位键 GPIO#3</td>
</tr>
<tr class="odd">
<td>breed-qca953x.bin</td>
<td>QCA9531/QCA9533，通用，波特率 115200，复位键 GPIO#12</td>
</tr>
<tr class="even">
<td>breed-qca953x-letv-lba-047-ch.bin</td>
<td> 乐视路由专用，波特率 115200，复位键 GPIO#17</td>
</tr>
<tr class="odd">
<td>breed-qca9558-wr941nv7.bin</td>
<td>TP-LINK WR941N v7 专用，波特率 115200，复位键 GPIO#17</td>
</tr>
<tr class="even">
<td>breed-qca9558-ar8236.bin</td>
<td>QCA9558 + AR8236 百兆版，通用，波特率 115200，复位键 GPIO#16</td>
</tr>
<tr class="odd">
<td>breed-qca9558-ar8327n.bin</td>
<td>QCA9558 + AR8327N 千兆版，通用，波特率 115200，复位键 GPIO#16</td>
</tr>
<tr class="even">
<td>breed-qca9558-wr2041nv2.bin</td>
<td>TP-LINK WR2041N v2 专用，波特率 115200，复位键 GPIO#17</td>
</tr>
<tr class="odd">
<td>breed-qca9558-wr1043ndv2.bin</td>
<td>TP-LINK WR1043ND v2 专用，波特率 115200，复位键 GPIO#16</td>
</tr>
<tr class="even">
<td>breed-qca9558-dw33d.bin</td>
<td> 大麦 DW33D 专用，波特率 115200，复位键 GPIO#17</td>
</tr>
<tr class="odd">
<td>breed-qca956x-uart_rx18_tx20-reset1.bin</td>
<td>QCA956X 通用，百兆 / 千兆自适应，波特率 115200，UART RX GPIO#18，TX
GPIO#20，复位键 GPIO#1</td>
</tr>
<tr class="even">
<td>breed-qca956x-uart_rx18_tx20-reset2.bin</td>
<td>QCA956X 通用，百兆 / 千兆自适应，波特率 115200，UART RX GPIO#18，TX
GPIO#20，复位键 GPIO#2</td>
</tr>
<tr class="odd">
<td>breed-qca956x-uart_rx18_tx22-reset1.bin</td>
<td>QCA956X 通用，百兆 / 千兆自适应，波特率 115200，UART RX GPIO#18，TX
GPIO#22，复位键 GPIO#1</td>
</tr>
<tr class="even">
<td>breed-qca956x-uart_rx18_tx22-reset2.bin</td>
<td>QCA956X 通用，百兆 / 千兆自适应，波特率 115200，UART RX GPIO#18，TX
GPIO#22，复位键 GPIO#2</td>
</tr>
<tr class="odd">
<td>breed-qca956x-uart_rx19_tx20-reset1.bin</td>
<td>QCA956X 通用，百兆 / 千兆自适应，波特率 115200，UART RX GPIO#19，TX
GPIO#20，复位键 GPIO#1</td>
</tr>
<tr class="even">
<td>breed-qca956x-uart_rx19_tx20-reset2.bin</td>
<td>QCA956X 通用，百兆 / 千兆自适应，波特率 115200，UART RX GPIO#19，TX
GPIO#20，复位键 GPIO#2</td>
</tr>
<tr class="odd">
<td>breed-qca956x-uart_rx19_tx20-reset1.bin</td>
<td>QCA956X 通用，百兆 / 千兆自适应，波特率 115200，UART RX GPIO#19，TX
GPIO#22，复位键 GPIO#1</td>
</tr>
<tr class="even">
<td>breed-qca956x-uart_rx19_tx22-reset2.bin</td>
<td>QCA956X 通用，百兆 / 千兆自适应，波特率 115200，UART RX GPIO#19，TX
GPIO#22，复位键 GPIO#2</td>
</tr>
<tr class="odd">
<td>breed-qca956x-uart_rx20_tx22-reset1.bin</td>
<td>QCA956X 通用，百兆 / 千兆自适应，波特率 115200，UART RX GPIO#20，TX
GPIO#22，复位键 GPIO#1</td>
</tr>
<tr class="even">
<td>breed-qca956x-uart_rx20_tx22-reset2.bin</td>
<td>QCA956X 通用，百兆 / 千兆自适应，波特率 115200，UART RX GPIO#20，TX
GPIO#22，复位键 GPIO#2</td>
</tr>
<tr class="odd">
<td>breed-qca956x-reset2.bin</td>
<td>QCA956X 百兆版，通用，波特率 115200，复位键 GPIO#2</td>
</tr>
<tr class="even">
<td>breed-qca9561-wdr6500v2.bin (不再更新)</td>
<td>TP-LINK WDR6500 v2 专用，波特率 115200，复位键 GPIO#1</td>
</tr>
<tr class="odd">
<td>breed-qca9563-wndr4500v3.bin</td>
<td>Netgear WNDR4500 v3 专用，波特率 115200，复位键 GPIO#2，WPS 键
GPIO#1</td>
</tr>
<tr class="even">
<td>breed-qca9563-phicomm-k2t.bin</td>
<td> 斐讯 K2T 专用，波特率 115200，复位键 GPIO#2</td>
</tr>
<tr class="odd">
<td>breed-qca9563-rosinson-wr818.bin</td>
<td>ROSINSON WR818 专用，波特率 115200，复位键 GPIO#2</td>
</tr>
<tr class="even">
<td>breed-qca9563-jhr-848q.bin</td>
<td>JHR-848Q 专用，波特率 115200，复位键 GPIO#2</td>
</tr>
<tr class="odd">
<td>breed-qca9563-dir-859-a.bin</td>
<td>D-Link DIR-859 A1/A2 专用，波特率 115200，复位键 GPIO#2</td>
</tr>
<tr class="even">
<td>breed-tp9343.bin</td>
<td>TP9343，通用，波特率 115200，复位键 GPIO#1，WPS 键 GPIO#1</td>
</tr>
</tbody>
</table>
<p>注：专用版能够点亮所有 LED</p>
<p>以下是可以支持自定义复位键 GPIO 的特别版</p>
<table>
<colgroup>
<col style="width: 27%">
<col style="width: 72%">
</colgroup>
<thead>
<tr class="header">
<th>文件名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> breed-ar7161-blank.bin (不再更新)</td>
<td>AR7161 专用，支持 AR8035 IP1001 MV88E1116 BCM5481 千兆 PHY</td>
</tr>
<tr class="even">
<td>breed-ar913x-blank.bin (不再更新)</td>
<td>AR913X 专用，仅支持 88E6060 百兆交换机</td>
</tr>
<tr class="odd">
<td> breed-ar724x-blank.bin (不再更新)</td>
<td>AR724X 专用，支持内置百兆交换机和 AR8021 千兆 PHY</td>
</tr>
<tr class="even">
<td>breed-ar9331-blank.bin (不再更新)</td>
<td>AR9331 专用，仅支持内置百兆交换机</td>
</tr>
<tr class="odd">
<td> breed-ar934x-blank.bin (不再更新)</td>
<td>AR934X 专用，支持内置百兆交换机和 AR8327 (N) 千兆交换机、AR8035
RTL8211E 千兆 PHY、RTL8201 百兆 PHY</td>
</tr>
<tr class="even">
<td>breed-mt7620-blank.bin</td>
<td>MT7620 专用，仅支持内置百兆交换机</td>
</tr>
<tr class="odd">
<td> breed-mt76x8-blank.bin</td>
<td>MT7628/MT7688 专用，仅支持内置百兆交换机</td>
</tr>
<tr class="even">
<td> breed-rt305x-nor-blank.bin (不再更新)</td>
<td>RT305X 专用，从 NOR 闪存启动，仅支持内置百兆交换机</td>
</tr>
<tr class="odd">
<td> breed-rt305x-spi-blank.bin (不再更新)</td>
<td>RT305X 专用，从 SPI 闪存启动，仅支持内置百兆交换机</td>
</tr>
<tr class="even">
<td> breed-rt5350-blank.bin (不再更新)</td>
<td>RT5350 专用，仅支持内置百兆交换机</td>
</tr>
</tbody>
</table>
<h2 id="刷入-breed">刷入 Breed</h2>
<p>Breed 的刷入和固件刷入流程基本一致：</p>
<ol type="1">
<li>获取原厂固件的 SSH 登录权限（可能是通过原厂固件漏洞等方式）</li>
<li>在原厂固件上利用 <code>cat /proc/mtd</code> 获取 ROM 分区的布局</li>
<li> [可选] 备份原有的所有 ROM 分区数据，主要目的是为了恢复原厂固件</li>
<li>利用 <code>mtd</code> 等命令直接对 Bootloader 所在的 ROM
区域进行写入镜像</li>
<li>重启设备</li>
</ol>
<p>刷入 Breed 后，耐心等待设备重启，通常可以通过 192.168.1.1
这个地址来进入 Breed 的 Web 管理界面</p>
<figure>
<img data-src="/posts/53d6c2d9/Breed-WEB.png" alt="Breed 的 Web 管理界面">
<figcaption aria-hidden="true">Breed 的 Web 管理界面</figcaption>
</figure>
<h2 id="通过-breed-刷机">通过 Breed 刷机</h2>
<p>通过 Breed 刷机就很方便了，直接在 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL3VwZ3JhZGUuaHRtbA==">固件更新<i class="fa fa-external-link-alt"></i></span>
界面，勾选固件，并上传对应的固件，并勾选正确的闪存布局后，点击上传，等待设备重启即可</p>
<figure>
<img data-src="/posts/53d6c2d9/Breed-upgrade.png" alt="Breed 进行固件更新">
<figcaption aria-hidden="true">Breed 进行固件更新</figcaption>
</figure>
<h2 id="其他功能">其他功能</h2>
<p>除去 Web 界面刷机，Breed
还支持一些其他的功能，包括固件备份、超频等，更多的使用方式推荐参考网上的其他资料</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC0xNjE5MDYtMS0xLmh0bWw=">【恩山论坛】Breed<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC0xNTQ1NjEtMS0xLmh0bWw=">【恩山论坛】U-Boot
刷机<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC02OTA2MDUtMS0xLmh0bWw=">【恩山论坛】小米路由器
MINI 刷 Breed 及 Pandavan 教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC0yNTc0MjMtMS0xLmh0bWw=">【恩山论坛】小米路由器
3G 刷 Breed 及老毛子 Padavan 固件教程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>Breed</tag>
        <tag>BootLoader</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWrt 简介和安装</title>
    <url>/posts/8507aaa1.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<h3 id="来源">来源</h3>
<p>2002 年底 Linksys 公司推出 WRT-54G，采用了 Linux 取代了原来的 vXworks
系统。迫于 Linux 的开源协议要求，Linksys
开源了路由器的固件代码，后续逐渐发展成了 OpenWrt 这样一个项目
<span id="more"></span></p>
<h3 id="介绍">介绍</h3>
<p>OpenWrt 是一个针对嵌入式设备（通常是路由器或者软路由）的 Linux
操作系统项目，提供了具有软件包管理功能的完全可写的文件系统，因此拥有了完全定制的能力，可以榨干设备的全部性能</p>
<h2 id="安装">安装</h2>
<p>初次安装推荐在 <span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy90b2gvc3RhcnQ=">支持设备列表<i class="fa fa-external-link-alt"></i></span>
中找到对应设备所在的 <span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy90b2gvc3RhcnQ/ZGF0YXNydD0lNUVkZXZpY2UlMjBwYWdl">设备专属页面<i class="fa fa-external-link-alt"></i></span>，然后根据页面介绍进行安装</p>
<h3 id="一般安装流程">一般安装流程</h3>
<p>通常的安装步骤主要通过以下流程：</p>
<ol type="1">
<li>获取原厂固件的 SSH 登录权限（可能是通过原厂固件漏洞等方式）</li>
<li>在原厂固件上利用 <code>cat /proc/mtd</code> 获取 ROM 分区的布局</li>
<li> [可选] 备份原有的所有 ROM 分区数据</li>
<li>利用 <code>mtd</code> 等命令直接对相应的 ROM 区域进行写入镜像
<ul>
<li>[可选] bootloader 镜像（设备运行的情况下，个人更倾向于刷入 <a href="/posts/53d6c2d9.html">Breed</a>）</li>
<li>kernel 镜像</li>
<li> rootfs 镜像</li>
</ul></li>
<li>重启设备</li>
</ol>
<h3 id="固件搜索下载">固件搜索下载</h3>
<p>官网也对老手提供了快捷的 <span class="exturl" data-url="aHR0cHM6Ly9maXJtd2FyZS1zZWxlY3Rvci5vcGVud3J0Lm9yZy8=">固件搜索<i class="fa fa-external-link-alt"></i></span>
页面，能够更加快捷的找到 ROM 镜像的下载界面</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvT3BlbldydA==">【维基百科】OpenWrt<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy8=">【OpenWrt】官网<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy90b2gvc3RhcnQ=">【OpenWrt】支持设备列表<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9maXJtd2FyZS1zZWxlY3Rvci5vcGVud3J0Lm9yZy8=">【OpenWrt】固件搜索<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWrt 配置使用</title>
    <url>/posts/51140c4a.html</url>
    <content><![CDATA[<h2 id="web-界面">Web 界面</h2>
<p>一般 OpenWrt 安装好之后会已经默启用了 Web
管理界面（LuCI），默认地址是 <code>192.168.1.1</code>，默认账号是
<code>root</code>，无密码，直接点击登录即可进入 <span id="more"></span></p>
<h3 id="汉化">汉化</h3>
<p>默认界面是英文的，可以在 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9zeXN0ZW0vb3BrZw==">系统 - 软件<i class="fa fa-external-link-alt"></i></span>
中搜索中文包安装进行汉化</p>
<ul>
<li>点击 <code>UPDATE LIST...</code> 耐心等待软件包的更新</li>
<li>然后在 <code>Filter:</code> 下的输入框中输入
<code>luci-i18n-base-zh-cn</code>，在筛选出来的结果中点击
<code>INSTALL...</code>，安装勾上
<code>Overwrite files from other package(s)</code>，然后点击
<code>INSTALL</code>，耐心等待安装完成之后刷新网页（Ctrl+F5）可以看见大部分界面已经汉化了</li>
<li>同理安装 <code>luci-i18n-opkg-zh-cn</code> 包用于 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9zeXN0ZW0vb3BrZw==">系统 - 软件<i class="fa fa-external-link-alt"></i></span>
界面的汉化</li>
<li>同理安装 <code>luci-i18n-firewall-zh-cn</code> 包用于 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9uZXR3b3JrL2ZpcmV3YWxs">网络 - 防火墙<i class="fa fa-external-link-alt"></i></span>
界面的汉化 </li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install luci-i18n-base-zh-cn luci-i18n-opkg-zh-cn luci-i18n-firewall-zh-cn</span><br></pre></td></tr></tbody></table></figure>
<h3 id="root-密码">root 密码</h3>
<p>进入管理界面后进入 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9zeXN0ZW0vYWRtaW4vcGFzc3dvcmQ=">系统 - 管理 - 密码<i class="fa fa-external-link-alt"></i></span>
界面修改路由器密码，同时也是系统的 root 账号的密码</p>
<h3 id="ssh">ssh</h3>
<p>然后在 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9zeXN0ZW0vYWRtaW4vZHJvcGJlYXI=">系统 - 管理 - ssh<i class="fa fa-external-link-alt"></i></span>
可以配置 ssh 登录，参考配置如下</p>
<ul>
<li>接口：不指定 → 内网以及外网都可以 ssh 登录</li>
<li>端口：22 → ssh 默认端口，不做修改</li>
<li>密码验证：不勾选 → 推荐使用 ssh 登录</li>
<li>允许 root 用户凭密码登录：不勾选 → 推荐使用 ssh 登录</li>
<li>网关端口：根据需要勾选</li>
</ul>
<p>按照上面配置完成后将只能通过 ssh 密钥进行登录，所以还得在 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9zeXN0ZW0vYWRtaW4vc3Noa2V5cw==">系统 - 管理 - ssh 密钥<i class="fa fa-external-link-alt"></i></span>
添加设备的公钥</p>
<h3 id="升级-luci">升级 LuCI</h3>
<p>ssh 登入路由器后执行以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line">opkg update</span><br><span class="line"><span class="comment"># luci-compat 包有时可以帮助解决一些兼容性问题，推荐一同安装</span></span><br><span class="line">opkg install luci luci-base luci-compat</span><br></pre></td></tr></tbody></table></figure>
<h3 id="美化">美化</h3>
<p>原始的 <code>bootstrap</code>
主题个人不太喜欢，在空间足够的情况下我个人额外安装了
<code>material</code>，主题的切换在 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9zeXN0ZW0vc3lzdGVt">系统 - 系统 - 语言和界面<i class="fa fa-external-link-alt"></i></span>
中</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install luci-theme-material</span><br></pre></td></tr></tbody></table></figure>
<h2 id="锐捷认证">锐捷认证</h2>
<p>很多学校校园网通常采用锐捷认证，并且限制了用户账号的登陆数量，但是我们可以通过在路由器上进行锐捷认证来接入校园网，之后连接路由器的所有设备都会直接接入校园网而不需要认证了</p>
<h3 id="mentohust">MentoHUST</h3>
<p><span class="exturl" data-url="aHR0cDovL2J5aGguaHVzdC5lZHUuY24vY2dpLWJpbi9iYnNuZXd0Y29uP2JvYXJkPU5ldFJlc291cmNlJmZpbGU9TS4xMjMwNzc0MjgyLkE=">MentoHUST<i class="fa fa-external-link-alt"></i></span>
是华中科技大学的 <span class="exturl" data-url="aHR0cDovL2J5aGguaHVzdC5lZHUuY24vY2dpLWJpbi9iYnNxcnk/dXNlcmlkPUh1c3RNb29u">HustMoon<i class="fa fa-external-link-alt"></i></span>
最初在校内 BBS 白云黄鹤上发布的一款可以在 Linux
系统上进行锐捷认证的软件。不过 <span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vYXJjaGl2ZS9wL21lbnRvaHVzdC8=">原始项目<i class="fa fa-external-link-alt"></i></span>
已经归档，不在开发，GitHub 上有加入 v4 支持的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h5cmF0aGIvbWVudG9odXN0">新项目<i class="fa fa-external-link-alt"></i></span></p>
<p>而在 OpenWrt 可以通过 GitHub 上的两个项目手动编译 <code>.ipk</code>
文件，然后 <code>opkg install xxx.ipk</code> 进行安装即可</p>
<ul>
<li>通过 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0t5bGVSaWNhcmRvL01lbnRvSFVTVC1PcGVuV3J0LWlwaw==">MentoHUST-OpenWrt-ipk<i class="fa fa-external-link-alt"></i></span>
OpenWrt 项目可以生成 <code>mentohust</code> 的二进制文件</li>
<li>通过 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JvcmluZ0NhdC9sdWNpLWFwcC1tZW50b2h1c3Q=">OpenWrt/LEDE LuCI
for MentoHUST<i class="fa fa-external-link-alt"></i></span> 项目可以生成 MentoHUST 的 LuCI 控制界面</li>
</ul>
<p>手动编译 <code>ipk</code> 文件的过程可以参考 <a href="/posts/96a1807.html">这里</a></p>
<h3 id="minieap">MiniEAP</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VwZGF0ZWluZy9taW5pZWFw">MiniEAP<i class="fa fa-external-link-alt"></i></span>
是一个实现了标准 EAP-MD5-Challenge 算法的 EAP
客户端，支持通过插件来修改标准数据包以通过特殊服务端的认证。同时含有支持锐捷
v3 (v4) 算法的插件，可以用来进行锐捷认证</p>
<p>而在 OpenWrt 可以通过 GitHub 上的两个项目手动编译 <code>.ipk</code>
文件，然后 <code>opkg install xxx.ipk</code> 进行安装即可</p>
<ul>
<li>通过 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JvcmluZ0NhdC9taW5pZWFwLW9wZW53cnQ=">minieap-openwrt<i class="fa fa-external-link-alt"></i></span>
项目可以生成 <code>minieap</code> 的二进制文件</li>
<li> (可选) 通过 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JvcmluZ0NhdC9sdWNpLWFwcC1taW5pZWFw">OpenWrt/LEDE LuCI
for minieap<i class="fa fa-external-link-alt"></i></span> 项目可以生成 MiniEAP 的 LuCI 控制界面</li>
</ul>
<p>补充：如果想要掉线自动重新认证，在配置文件中不要配置
<code>no-auto-reauth</code>，参考该 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VwZGF0ZWluZy9taW5pZWFwL2lzc3Vlcy80Mw==">minieap@issue#43<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="防火墙">防火墙</h2>
<p>防火墙规则的详细配置可以参考 <span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvZmlyZXdhbGwvZmlyZXdhbGxfY29uZmlndXJhdGlvbiNydWxlcw==">官方的介绍<i class="fa fa-external-link-alt"></i></span>
以及部分 <span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy96aC1jbi9kb2MvdWNpL2ZpcmV3YWxsIyVFNCVCOCVCRSVFNCVCRSU4Qg==">例子<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="开放端口">开放端口</h3>
<p>以开放 80 端口，用于外网直接访问 Web 界面为例：</p>
<ol type="1">
<li><p>首先要在 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9uZXR3b3JrL2ZpcmV3YWxsL3J1bGVz">网络 - 防火墙 - 通信规则<i class="fa fa-external-link-alt"></i></span>
点击新增，进行如下配置</p>
<figure>
<img data-src="/posts/51140c4a/Allow-LuCI-WAN.png" alt="开放 80 端口">
<figcaption aria-hidden="true">开放 80 端口</figcaption>
</figure>
<ul>
<li>名称：可以随意设置</li>
<li>协议：根据需要进行选择即可</li>
<li>源区域：选择 WAN 表示是从外网进行访问</li>
<li>源地址以及源端口：主要用于限制来访的设备，可以根据需要进行配置</li>
<li>目标区域：选择 <code>设备</code> 代表这是一个入站的规则</li>
<li>目标地址：因为是访问设备，此时不需要配置</li>
<li>目标端口：Web 的默认端口是 80</li>
<li> 操作：开放端口，当然是选择接受</li>
</ul></li>
<li><p>然后在 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9zdGF0dXMvaXB0YWJsZXM=">状态 - 防火墙<i class="fa fa-external-link-alt"></i></span>
根据需要对 IPv4、IPv6 防火墙进行重启即可</p></li>
</ol>
<p>如果这时外网还是不能访问 LuCI 的 Web
界面，可以尝试路由器重启，确认路由器的 IP 是否能够 ping 通，以及确认 80
端口有没有被运营商封禁</p>
<h3 id="端口转发">端口转发</h3>
<p>以将 Windows 的远程连接的端口 3389 为例：</p>
<ol type="1">
<li><p>首先要在 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9uZXR3b3JrL2ZpcmV3YWxsL2ZvcndhcmRz">网络 - 防火墙 - 端口转发<i class="fa fa-external-link-alt"></i></span>
点击新增，进行如下配置</p>
<figure>
<img data-src="/posts/51140c4a/Win-Remote.png" alt="端口转发">
<figcaption aria-hidden="true">端口转发</figcaption>
</figure>
<ul>
<li>名称：可以随意设置</li>
<li>协议：根据需要进行选择即可</li>
<li>源区域：选择 WAN 表示是从外网进行访问</li>
<li>外部端口：这里配置成 13389</li>
<li> 目标区域：选择 <code>LAN</code></li>
<li>内部 IP 地址：配置成内网需要远程连接的主机</li>
<li>内部端口：远程连接的默认端口是 3389</li>
</ul></li>
<li><p> 然后在 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9zdGF0dXMvaXB0YWJsZXM=">状态 - 防火墙<i class="fa fa-external-link-alt"></i></span>
根据需要对 IPv4、IPv6 防火墙进行重启即可</p></li>
</ol>
<p>后续就可以通过访问路由器 <code>WAN_IP:13389</code> 来远程连接内网的
Windows 主机了</p>
<h2 id="ipv6">IPv6</h2>
<p>在校园网环境下发现 WAN 口默认能自动获取到 IPv6 地址（但是 /128
的地址），并且在路由器上测试也能正常访问 IPv6
网站，但是局域网内的设备不能正常访问 IPv6 网站，于是选择 NAT6
的方式来解决</p>
<p>参考 <span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvbmV0d29yay9pcHY2L2lwdjYubmF0Ng==">官网的
NAT6 文档<i class="fa fa-external-link-alt"></i></span>，需要在路由器内依次进行如下配置：</p>
<p>注：基于 OpenWrt 22.03.2 版本配置，版本不同配置可能有所不同！</p>
<ol type="1">
<li><p>安装 kmod-ipt-nat6 包</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Install packages</span></span><br><span class="line">opkg update</span><br><span class="line">opkg install kmod-ipt-nat6</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>配置 IPv6 ULA 前缀，使得内网设备默认使用 IPv6</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Using IPv6 by default</span></span><br><span class="line">NET_ULA=<span class="string">"<span class="subst">$(uci get network.globals.ula_prefix)</span>"</span></span><br><span class="line">uci <span class="built_in">set</span> network.globals.ula_prefix=<span class="string">"d<span class="variable">${NET_ULA:1}</span>"</span></span><br><span class="line"><span class="comment"># 默认 network.lan.ip6assign 配置可能有误，需要根据 ula_prefix 重新配置</span></span><br><span class="line">IP6_ASSIGN=<span class="string">"<span class="subst">$(echo ${NET_ULA} | grep -E '(\d+)</span>$' -o)"</span></span><br><span class="line">uci <span class="built_in">set</span> network.lan.ip6assign=<span class="string">"<span class="variable">${IP6_ASSIGN}</span>"</span></span><br><span class="line">uci commit network</span><br><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>配置 WAN6 以及 LAN 端口</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">uci <span class="built_in">set</span> dhcp.wan6.ra=<span class="string">'relay'</span></span><br><span class="line">uci <span class="built_in">set</span> dhcp.wan6.dhcpv6=<span class="string">'relay'</span></span><br><span class="line">uci delete dhcp.wan6.ndp</span><br><span class="line">uci <span class="built_in">set</span> dhcp.wan6.master=<span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">uci <span class="built_in">set</span> dhcp.lan.ra_default=<span class="string">'1'</span></span><br><span class="line">uci <span class="built_in">set</span> dhcp.lan.ra=<span class="string">'server'</span></span><br><span class="line">uci <span class="built_in">set</span> dhcp.lan.dhcpv6=<span class="string">'server'</span></span><br><span class="line">uci delete dhcp.lan.ndp</span><br><span class="line">uci <span class="built_in">set</span> dhcp.lan.ra_management=<span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">uci commit dhcp</span><br><span class="line">/etc/init.d/odhcpd restart</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>配置防火墙</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Configure firewall</span></span><br><span class="line">uci <span class="built_in">set</span> firewall.@zone[1].masq6=<span class="string">"1"</span></span><br><span class="line">uci commit firewall</span><br><span class="line">/etc/init.d/firewall restart</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>添加 ipv6 默认网关</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/hotplug.d/iface</span><br><span class="line"><span class="built_in">touch</span> 90-nat66</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"#!/bin/sh"</span> &gt;&gt; 90-nat66</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[ \"\$ACTION\" = ifup ] || exit 0"</span> &gt;&gt; 90-nat66</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"route -A inet6 add default gw \`(ip -6 route | grep default | awk '{print \$5,\$6,\$7}')\`"</span> &gt;&gt; 90-nat66</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>也可以直接 <code>vim /etc/hotplug.d/iface/90-nat66</code> 填入：</p>
<p></p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">[ "$ACTION" = ifup ] || exit 0</span><br><span class="line">route -A inet6 add default gw `(ip -6 route | grep default | awk '{print $5,$6,$7}')`</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>该步骤主要是让 OpenWRT 每次重启后自动添加 ipv6
默认网关，如果要立即生效可以手动执行</p></li>
<li><p>重启路由器</p></li>
</ol>
<h2 id="usb">USB</h2>
<p>很多路由器有 USB 端口，通过插入 U 盘或者接入磁盘、SSD
等设备可以拓展存储空间，这样就可以安装更多的插件，或者搭建一个简单的
FTP、SMB 服务器用于共享数据</p>
<h3 id="安装-usb-驱动">安装 USB 驱动</h3>
<p>依次执行以下命令进行驱动基本包的安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install kmod-usb-core</span><br><span class="line"><span class="comment"># insmod usbcore</span></span><br><span class="line">opkg install kmod-usb-storage</span><br></pre></td></tr></tbody></table></figure>
<p>如果设备是 USB 2.0</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">opkg install kmod-usb2</span><br><span class="line"><span class="comment"># insmod ehci-hcd</span></span><br></pre></td></tr></tbody></table></figure>
<p>如果设备是 USB 3.0</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">opkg install kmod-usb3</span><br><span class="line"><span class="comment"># insmod xhci-hcd</span></span><br></pre></td></tr></tbody></table></figure>
<p>通常移动硬盘或者移动 SSD 还需要安装 UAS/UASP 支持</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">opkg install kmod-usb-storage-uas</span><br></pre></td></tr></tbody></table></figure>
<p>然后热插拔存储设备，通常就能在 <code>/dev</code> 目录下看见
<code>sda</code> 设备了</p>
<h3 id="自动挂载">自动挂载</h3>
<ul>
<li><p>安装块设备工具包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">opkg install block-mount</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>分区</p>
<p>个人已经提前将存储设备划分了两个分区，一个分区较小 (sda1) 用于后续的 <a href="#extroot">Extroot</a>，剩余的空间 (sda2) 全用于存储个人数据</p></li>
<li><p>创建文件系统</p>
<p>推荐移动磁盘用 ext4 文件系统，而移动 SSD 推荐使用 f2fs 文件系统</p>
<p>分区和创建文件系统可以参考 <span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvc3RvcmFnZS91c2ItZHJpdmVzI2NyZWF0ZV9hX3BhcnRpdGlvbl9vbl90aGVfdXNiX2Rpc2s=">官网的指导<i class="fa fa-external-link-alt"></i></span></p>
<p>例如：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ext4</span></span><br><span class="line">opkg install e2fsprogs</span><br><span class="line">opkg install kmod-fs-ext4</span><br><span class="line">mkfs.ext4 /dev/sda1</span><br><span class="line"></span><br><span class="line"><span class="comment"># f2fs</span></span><br><span class="line">opkg install f2fs-tools</span><br><span class="line">opkg install kmod-fs-f2fs</span><br><span class="line">mkfs.f2fs /dev/sda1</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>配置挂载</p>
<p>配置挂载可以通过直接在网页端的 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9zeXN0ZW0vbW91bnRz">系统 - 挂载点<i class="fa fa-external-link-alt"></i></span>
进行手动配置，比较直观，如图所示：</p>
<figure>
<img data-src="/posts/51140c4a/Mount-sda6.png" alt="挂载设备">
<figcaption aria-hidden="true">挂载设备</figcaption>
</figure>
<ul>
<li>已启用：勾选</li>
<li> UUID：推荐使用 UUID 来进行挂载</li>
<li>挂载点：也就是挂载的位置，通常在 <code>/mnt</code>
目录下新建一个文件夹</li>
</ul></li>
</ul>
<h3 id="extroot">Extroot</h3>
<p>有时候安装太多包会导致本地空间不足，此时可以通过将包安装在 USB
设备上，也可以通过 Extroot 的方式将 USB 设备的空间直接配置成
<code>overlay</code> 分区，后者更为推荐</p>
<ol type="1">
<li><p>修改 <code>fstab</code>，将原本挂载的 <code>overlay</code>
设备挂载到新的目录 <code>/rwm</code></p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">DEVICE=<span class="string">"<span class="subst">$(sed -n -e <span class="string">"/\s\/overlay\s.*$/s///p"</span> /etc/mtab)</span>"</span></span><br><span class="line">uci -q delete fstab.rwm</span><br><span class="line">uci <span class="built_in">set</span> fstab.rwm=<span class="string">"mount"</span></span><br><span class="line">uci <span class="built_in">set</span> fstab.rwm.device=<span class="string">"<span class="variable">${DEVICE}</span>"</span></span><br><span class="line">uci <span class="built_in">set</span> fstab.rwm.target=<span class="string">"/rwm"</span></span><br><span class="line">uci commit fstab</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>修改 <code>fstab</code>，配置 USB 设备挂载成 <code>overlay</code>
分区</p>
<p>其中部分部分操作在 <a href="#自动挂载">上节</a>
已经执行过，可以略去</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看分区信息</span></span><br><span class="line"><span class="comment"># block info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定分区并制作文件系统</span></span><br><span class="line">DEVICE=<span class="string">"/dev/sda1"</span></span><br><span class="line"><span class="comment"># mkfs.ext4 ${DEVICE}</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> $(block info <span class="variable">${DEVICE}</span> | grep -o -e <span class="string">"UUID=\S*"</span>)</span><br><span class="line">uci -q delete fstab.overlay</span><br><span class="line">uci <span class="built_in">set</span> fstab.overlay=<span class="string">"mount"</span></span><br><span class="line">uci <span class="built_in">set</span> fstab.overlay.uuid=<span class="string">"<span class="variable">${UUID}</span>"</span></span><br><span class="line">uci <span class="built_in">set</span> fstab.overlay.target=<span class="string">"/overlay"</span></span><br><span class="line">uci commit fstab</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>将原本 <code>overlay</code> 分区数据复制到 USB
设备上，重启设备</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /tmp/cproot</span><br><span class="line">mount --<span class="built_in">bind</span> /overlay /tmp/cproot</span><br><span class="line"><span class="built_in">mkdir</span> -p /mnt/tmp</span><br><span class="line">mount <span class="variable">${DEVICE}</span> /mnt/tmp</span><br><span class="line">tar -C /tmp/cproot -cvf - . | tar -C /mnt/tmp -xf -</span><br><span class="line">umount /tmp/cproot /mnt/tmp</span><br><span class="line">reboot</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<h2 id="ftp">FTP</h2>
<p>配置好 USB 后，就可以配置 FTP 来共享 USB 设备</p>
<ol type="1">
<li><p>首先安装 vsftpd 包</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">opkg install vsftpd</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>修改配置文件
<code>/etc/vsftpd.conf</code>，这里给出个人的配置，可以参考</p>
<p></p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">background</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">listen</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anonymous_enable</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">local_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">local_umask</span>=<span class="number">022</span></span><br><span class="line"><span class="attr">check_shell</span>=<span class="literal">NO</span></span><br><span class="line"><span class="comment">#dirmessage_enable=YES</span></span><br><span class="line"><span class="comment">#ftpd_banner=Welcome to MINI FTP service.</span></span><br><span class="line"><span class="attr">session_support</span>=<span class="literal">NO</span></span><br><span class="line"><span class="comment">#syslog_enable=YES</span></span><br><span class="line"><span class="comment">#userlist_enable=YES</span></span><br><span class="line"><span class="comment">#userlist_deny=NO</span></span><br><span class="line"><span class="comment">#userlist_file=/etc/vsftpd/vsftpd.users</span></span><br><span class="line"><span class="comment">#xferlog_enable=YES</span></span><br><span class="line"><span class="comment">#xferlog_file=/var/log/vsftpd.log</span></span><br><span class="line"><span class="comment">#xferlog_std_format=YES</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### TLS/SSL options</span></span><br><span class="line"><span class="comment">### example key generation: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/vsftpd/vsftpd_privkey.pem -out /etc</span></span><br><span class="line"><span class="comment">#ssl_enable=YES</span></span><br><span class="line"><span class="comment">#allow_anon_ssl=NO</span></span><br><span class="line"><span class="comment">#force_local_data_ssl=NO</span></span><br><span class="line"><span class="comment">#force_local_logins_ssl=NO</span></span><br><span class="line"><span class="comment">#ssl_tlsv1=YES</span></span><br><span class="line"><span class="comment">#ssl_sslv2=NO</span></span><br><span class="line"><span class="comment">#ssl_sslv3=NO</span></span><br><span class="line"><span class="comment">#rsa_cert_file=/etc/vsftpd/vsftpd_cert.pem</span></span><br><span class="line"><span class="comment">#rsa_private_key_file=/etc/vsftpd/vsftpd_privkey.pem</span></span><br><span class="line"><span class="comment"># 共享的目录位置</span></span><br><span class="line"><span class="attr">local_root</span>=/mnt/ext4</span><br><span class="line"><span class="attr">pasv_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">pasv_min_port</span>=<span class="number">10090</span></span><br><span class="line"><span class="attr">pasv_max_port</span>=<span class="number">10100</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>然后参考之前的 <a href="#开放端口">开放端口</a>，打开
20、21、10090-10100 端口就可以在外网访问 FTP 服务器了</p>
<figure>
<img data-src="/posts/51140c4a/Allow-FTP-WAN.png" alt="开放 FTP 端口">
<figcaption aria-hidden="true">开放 FTP 端口</figcaption>
</figure></li>
<li><p>之后重启 <code>vsftpd</code> 服务即可使用</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/etc/init.d/vsftpd restart</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<p>P.S. 连接 ftp 服务器的账号密码就是路由器的 root 账号密码</p>
<h2 id="smb">SMB</h2>
<p>使用 Samba 来共享的设备可以在 Windows
的文件资源管理器中挂载，使用起来和本地磁盘一样（在局域网内）</p>
<ol type="1">
<li><p>安装 samba4-server 以及 LuCI 管理界面</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">opkg install samba4-server</span><br><span class="line">opkg install luci-app-samba4 luci-i18n-samba4-zh-cn</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>在网页端的 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9zZXJ2aWNlcy9zYW1iYTQ=">服务 - 网络共享<i class="fa fa-external-link-alt"></i></span>
中进行配置，个人配置如下，可以参考</p>
<figure>
<img data-src="/posts/51140c4a/Samba.png" alt="Samba 配置">
<figcaption aria-hidden="true">Samba 配置</figcaption>
</figure></li>
<li><p>之后重启 <code>samba4</code> 服务即可使用</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/etc/init.d/samba4 restart</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<p>P.S. 连接 Samba 服务器的账号密码也是路由器的 root 账号密码</p>
<h2 id="bt-下载">BT 下载</h2>
<p>transmission 是一个轻量级跨平台的 BT 下载客户端</p>
<ol type="1">
<li><p>安装 transmission</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">opkg install transmission-daemon</span><br><span class="line">opkg install transmission-cli</span><br><span class="line">opkg install transmission-web   <span class="comment"># web 界面，可选</span></span><br><span class="line">opkg install transmission-remote</span><br><span class="line">opkg install luci-app-transmission luci-i18n-transmission-zh-cn</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>直接修改 <code>/etc/config/transmission</code>，或者在网页端的 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vbHVjaS9hZG1pbi9zZXJ2aWNlcy90cmFuc21pc3Npb24=">服务 - Transmission<i class="fa fa-external-link-alt"></i></span>
进行配置，下面给出个人配置，可以参考</p>
<figure>
<img data-src="/posts/51140c4a/Transmission.png" alt="Transmission 配置">
<figcaption aria-hidden="true">Transmission 配置 </figcaption>
</figure>
<p></p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line">config transmission</span><br><span class="line">    option config_overwrite '1'</span><br><span class="line">    option mem_percentage '50'</span><br><span class="line">    option nice '10'</span><br><span class="line">    option alt_speed_enabled 'false'</span><br><span class="line">    option alt_speed_time_enabled 'false'</span><br><span class="line">    option bind_address_ipv4 '0.0.0.0'</span><br><span class="line">    option bind_address_ipv6 '::'</span><br><span class="line">    option blocklist_enabled 'false'</span><br><span class="line">    option cache_size_mb '2'</span><br><span class="line">    option dht_enabled 'true'</span><br><span class="line">    option download_queue_enabled 'true'</span><br><span class="line">    option download_queue_size '4'</span><br><span class="line">    option encryption '1'</span><br><span class="line">    option idle_seeding_limit_enabled 'false'</span><br><span class="line">    option lazy_bitfield_enabled 'true'</span><br><span class="line">    option lpd_enabled 'false'</span><br><span class="line">    option message_level '1'</span><br><span class="line">    option peer_limit_global '240'</span><br><span class="line">    option peer_limit_per_torrent '60'</span><br><span class="line">    option peer_port '51413'</span><br><span class="line">    option peer_port_random_on_start 'false'</span><br><span class="line">    option peer_socket_tos 'default'</span><br><span class="line">    option pex_enabled 'true'</span><br><span class="line">    option port_forwarding_enabled 'true'</span><br><span class="line">    option preallocation '1'</span><br><span class="line">    option queue_stalled_enabled 'true'</span><br><span class="line">    option queue_stalled_minutes '30'</span><br><span class="line">    option ratio_limit '2.0000'</span><br><span class="line">    option rename_partial_files 'true'</span><br><span class="line">    option rpc_bind_address '0.0.0.0'</span><br><span class="line">    option rpc_enabled 'true'</span><br><span class="line">    option rpc_host_whitelist_enabled 'false'</span><br><span class="line">    option rpc_port '9091'</span><br><span class="line">    option rpc_url '/transmission/'</span><br><span class="line">    option rpc_whitelist_enabled 'false'</span><br><span class="line">    option scrape_paused_torrents_enabled 'true'</span><br><span class="line">    option script_torrent_done_enabled 'false'</span><br><span class="line">    option seed_queue_enabled 'false'</span><br><span class="line">    option speed_limit_down_enabled 'false'</span><br><span class="line">    option speed_limit_up_enabled 'false'</span><br><span class="line">    option start_added_torrents 'true'</span><br><span class="line">    option umask '18'</span><br><span class="line">    option utp_enabled 'true'</span><br><span class="line">    option scrape_paused_torrents 'true'</span><br><span class="line">    option watch_dir_enabled 'false'</span><br><span class="line">    option enabled '1'</span><br><span class="line">    option user 'root'</span><br><span class="line">    option group 'root'</span><br><span class="line">    option upload_slots_per_torrent '10'</span><br><span class="line">    option download_dir '/mnt/ext4/transmission'</span><br><span class="line">    option incomplete_dir_enabled 'true'</span><br><span class="line">    option incomplete_dir '/mnt/ext4/transmission/incomplete'</span><br><span class="line">    option trash_original_torrent_files 'true'</span><br><span class="line">    option rpc_authentication_required 'true'</span><br><span class="line">    option rpc_username 'rpc_username'</span><br><span class="line">    option rpc_password 'rpc_password'</span><br><span class="line">    option ratio_limit_enabled 'true'</span><br><span class="line">    option config_dir '/etc/transmission'</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>之后重启 <code>transmission</code> 服务即可使用</p>
<p></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/etc/init.d/transmission restart</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<p>连接的账号密码为自行配置的 <code>RPC</code> 连接的账号密码</p>
<p>默认的 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xOjkwOTEvdHJhbnNtaXNzaW9uL3dlYi8=">Web
界面<i class="fa fa-external-link-alt"></i></span> 比较简陋，并且不能配置 tracker，个人推荐使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RyYW5zbWlzc2lvbi1yZW1vdGUtZ3VpL3RyYW5zZ3Vp">transgui<i class="fa fa-external-link-alt"></i></span>
来 <code>RPC</code> 连接使用</p>
<p>如果需要远程访问，则需要将 <code>rpc_port</code>
配置的端口开放，具体流程参考 <a href="#开放端口">上文</a></p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvbHVjaS9sdWNpLmVzc2VudGlhbHM=">【OpenWrt】LuCI<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI3NDA5Ny9hcnRpY2xlL2RldGFpbHMvMTA3MTk3NzE3">【CSDN】luci.cbi
报错<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2t1b3J1YW4vbHVjaS1hcHAtdjJyYXkvaXNzdWVzLzQy">【GitHub】应用设置界面错误<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h5cmF0aGIvbWVudG9odXN0">【GitHub】MentoHUST
加入 v4 支持<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0t5bGVSaWNhcmRvL01lbnRvSFVTVC1PcGVuV3J0LWlwaw==">【GitHub】MentoHUST-OpenWrt-ipk<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JvcmluZ0NhdC9sdWNpLWFwcC1tZW50b2h1c3Q=">【GitHub】OpenWrt/LEDE
LuCI for MentoHUST<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VwZGF0ZWluZy9taW5pZWFw">【GitHub】MiniEAP<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JvcmluZ0NhdC9taW5pZWFwLW9wZW53cnQ=">【GitHub】minieap-openwrt<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JvcmluZ0NhdC9sdWNpLWFwcC1taW5pZWFw">【GitHub】OpenWrt/LEDE
LuCI for minieap<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VwZGF0ZWluZy9taW5pZWFwL2lzc3Vlcy80Mw==">【GitHub】no-auto-reauth
配置项的逻辑判断有问题<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvZmlyZXdhbGwvZmlyZXdhbGxfY29uZmlndXJhdGlvbiNydWxlcw==">【OpenWrt】firewall
rules<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy96aC1jbi9kb2MvdWNpL2ZpcmV3YWxsIyVFNCVCOCVCRSVFNCVCRSU4Qg==">【OpenWrt】防火墙配置举例<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvbmV0d29yay9pcHY2L2lwdjYubmF0Ng==">【OpenWrt】IPv6
NAT6 配置<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvbmV0d29yay9pcHY2L2lwdjZfZXh0cmFzI3VzaW5nX2lwdjZfYnlfZGVmYXVsdA==">【OpenWrt】默认使用
IPv6<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvbmV0d29yay9pcHY2L2lwdjZfZXh0cmFzI2Fubm91bmNpbmdfZGVmYXVsdF9pcHY2X3JvdXRl">【OpenWrt】默认
IPv6 路由<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMU55NHkxeDdQYQ==">【Bilibili】【老湿基】IPv6
竟然也可以开 NAT｜OpenWRT IPv6 NAT 手把手教学<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNDY2MDY4NTY=">【Zhihu】如何开启
NAT6<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvc3RvcmFnZS91c2ItaW5zdGFsbGluZw==">【OpenWrt】安装
USB 驱动<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvc3RvcmFnZS91c2ItZHJpdmVz">【OpenWrt】使用
USB 设备<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvYWRkaXRpb25hbC1zb2Z0d2FyZS9leHRyb290X2NvbmZpZ3VyYXRpb24=">【OpenWrt】Extroot
配置<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvc2VydmljZXMvbmFzL2Z0cC5vdmVydmlldw==">【OpenWrt】FTP<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvc2VydmljZXMvbmFzL3NhbWJh">【OpenWrt】Samba<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvc2VydmljZXMvZG93bmxvYWRpbmdfYW5kX2ZpbGVzaGFyaW5nL3RyYW5zbWlzc2lvbg==">【OpenWrt】transmission<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
        <tag>锐捷</tag>
        <tag>IPv6</tag>
        <tag>NAS</tag>
      </tags>
  </entry>
</search>
